# id;timestamp;commentText;codeText;commentWords;codeWords
NumberUtils -> private static BigInteger decodeBigInteger(String value);1328020251;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1356735495;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1385412762;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1394726635;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1401205411;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1426267150;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1432125256;Decode a {@link java.math.BigInteger} from a {@link String} value._Supports decimal, hex and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,a,link,string,value,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1438881662;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1438882923;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1458323501;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1467730834;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1496837955;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static BigInteger decodeBigInteger(String value);1545987505;Decode a {@link java.math.BigInteger} from the supplied {@link String} value._<p>Supports decimal, hex, and octal notation._@see BigInteger#BigInteger(String, int);private static BigInteger decodeBigInteger(String value) {_		int radix = 10__		int index = 0__		boolean negative = false___		_		if (value.startsWith("-")) {_			negative = true__			index++__		}__		_		if (value.startsWith("0x", index) || value.startsWith("0X", index)) {_			index += 2__			radix = 16__		}_		else if (value.startsWith("#", index)) {_			index++__			radix = 16__		}_		else if (value.startsWith("0", index) && value.length() > 1 + index) {_			index++__			radix = 8__		}__		BigInteger result = new BigInteger(value.substring(index), radix)__		return (negative ? result.negate() : result)__	};decode,a,link,java,math,big,integer,from,the,supplied,link,string,value,p,supports,decimal,hex,and,octal,notation,see,big,integer,big,integer,string,int;private,static,big,integer,decode,big,integer,string,value,int,radix,10,int,index,0,boolean,negative,false,if,value,starts,with,negative,true,index,if,value,starts,with,0x,index,value,starts,with,0x,index,index,2,radix,16,else,if,value,starts,with,index,index,radix,16,else,if,value,starts,with,0,index,value,length,1,index,index,radix,8,big,integer,result,new,big,integer,value,substring,index,radix,return,negative,result,negate,result
NumberUtils -> private static boolean isHexNumber(String value);1328020251;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into <code>Integer.decode</code> instead of <code>Integer.valueOf</code> (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,code,instead,of,code,integer,value,of,code,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1356735495;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1385412762;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1394726635;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1401205411;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1426267150;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1432125256;Determine whether the given value String indicates a hex number, i.e. needs to be_passed into {@code Integer.decode} instead of {@code Integer.valueOf} (etc).;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1438881662;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1438882923;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1458323501;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1467730834;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1496837955;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static boolean isHexNumber(String value);1545987505;Determine whether the given {@code value} String indicates a hex number,_i.e. needs to be passed into {@code Integer.decode} instead of_{@code Integer.valueOf}, etc.;private static boolean isHexNumber(String value) {_		int index = (value.startsWith("-") ? 1 : 0)__		return (value.startsWith("0x", index) || value.startsWith("0X", index) || value.startsWith("#", index))__	};determine,whether,the,given,code,value,string,indicates,a,hex,number,i,e,needs,to,be,passed,into,code,integer,decode,instead,of,code,integer,value,of,etc;private,static,boolean,is,hex,number,string,value,int,index,value,starts,with,1,0,return,value,starts,with,0x,index,value,starts,with,0x,index,value,starts,with,index
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1385412762;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1394726635;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1401205411;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1426267150;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1432125256;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1438881662;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1438882923;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1458323501;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException if there is an overflow;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception,if,there,is,an,overflow;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1467730834;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException if there is an overflow;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception,if,there,is,an,overflow;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1496837955;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException if there is an overflow;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception,if,there,is,an,overflow;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class<?> targetClass);1545987505;Raise an <em>overflow</em> exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to_@throws IllegalArgumentException if there is an overflow;private static void raiseOverflowException(Number number, Class<?> targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,em,overflow,em,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to,throws,illegal,argument,exception,if,there,is,an,overflow;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static long checkedLongValue(Number number, Class<? extends Number> targetClass);1458323501;Check for a {@code BigInteger}/{@code BigDecimal} long overflow_before returning the given number as a long value._@param number the number to convert_@param targetClass the target class to convert to_@return the long value, if convertible without overflow_@throws IllegalArgumentException if there is an overflow_@see #raiseOverflowException;private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {_		BigInteger bigInt = null__		if (number instanceof BigInteger) {_			bigInt = (BigInteger) number__		}_		else if (number instanceof BigDecimal) {_			bigInt = ((BigDecimal) number).toBigInteger()__		}_		_		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_			raiseOverflowException(number, targetClass)__		}_		return number.longValue()__	};check,for,a,code,big,integer,code,big,decimal,long,overflow,before,returning,the,given,number,as,a,long,value,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,long,value,if,convertible,without,overflow,throws,illegal,argument,exception,if,there,is,an,overflow,see,raise,overflow,exception;private,static,long,checked,long,value,number,number,class,extends,number,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,number,long,value
NumberUtils -> private static long checkedLongValue(Number number, Class<? extends Number> targetClass);1467730834;Check for a {@code BigInteger}/{@code BigDecimal} long overflow_before returning the given number as a long value._@param number the number to convert_@param targetClass the target class to convert to_@return the long value, if convertible without overflow_@throws IllegalArgumentException if there is an overflow_@see #raiseOverflowException;private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {_		BigInteger bigInt = null__		if (number instanceof BigInteger) {_			bigInt = (BigInteger) number__		}_		else if (number instanceof BigDecimal) {_			bigInt = ((BigDecimal) number).toBigInteger()__		}_		_		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_			raiseOverflowException(number, targetClass)__		}_		return number.longValue()__	};check,for,a,code,big,integer,code,big,decimal,long,overflow,before,returning,the,given,number,as,a,long,value,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,long,value,if,convertible,without,overflow,throws,illegal,argument,exception,if,there,is,an,overflow,see,raise,overflow,exception;private,static,long,checked,long,value,number,number,class,extends,number,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,number,long,value
NumberUtils -> private static long checkedLongValue(Number number, Class<? extends Number> targetClass);1496837955;Check for a {@code BigInteger}/{@code BigDecimal} long overflow_before returning the given number as a long value._@param number the number to convert_@param targetClass the target class to convert to_@return the long value, if convertible without overflow_@throws IllegalArgumentException if there is an overflow_@see #raiseOverflowException;private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {_		BigInteger bigInt = null__		if (number instanceof BigInteger) {_			bigInt = (BigInteger) number__		}_		else if (number instanceof BigDecimal) {_			bigInt = ((BigDecimal) number).toBigInteger()__		}_		_		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_			raiseOverflowException(number, targetClass)__		}_		return number.longValue()__	};check,for,a,code,big,integer,code,big,decimal,long,overflow,before,returning,the,given,number,as,a,long,value,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,long,value,if,convertible,without,overflow,throws,illegal,argument,exception,if,there,is,an,overflow,see,raise,overflow,exception;private,static,long,checked,long,value,number,number,class,extends,number,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,number,long,value
NumberUtils -> private static long checkedLongValue(Number number, Class<? extends Number> targetClass);1545987505;Check for a {@code BigInteger}/{@code BigDecimal} long overflow_before returning the given number as a long value._@param number the number to convert_@param targetClass the target class to convert to_@return the long value, if convertible without overflow_@throws IllegalArgumentException if there is an overflow_@see #raiseOverflowException;private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {_		BigInteger bigInt = null__		if (number instanceof BigInteger) {_			bigInt = (BigInteger) number__		}_		else if (number instanceof BigDecimal) {_			bigInt = ((BigDecimal) number).toBigInteger()__		}_		_		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_			raiseOverflowException(number, targetClass)__		}_		return number.longValue()__	};check,for,a,code,big,integer,code,big,decimal,long,overflow,before,returning,the,given,number,as,a,long,value,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,long,value,if,convertible,without,overflow,throws,illegal,argument,exception,if,there,is,an,overflow,see,raise,overflow,exception;private,static,long,checked,long,value,number,number,class,extends,number,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,number,long,value
NumberUtils -> private static void raiseOverflowException(Number number, Class targetClass);1328020251;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> private static void raiseOverflowException(Number number, Class targetClass);1356735495;Raise an overflow exception for the given number and target class._@param number the number we tried to convert_@param targetClass the target class we tried to convert to;private static void raiseOverflowException(Number number, Class targetClass) {_		throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_				number.getClass().getName() + "] to target class [" + targetClass.getName() + "]: overflow")__	};raise,an,overflow,exception,for,the,given,number,and,target,class,param,number,the,number,we,tried,to,convert,param,target,class,the,target,class,we,tried,to,convert,to;private,static,void,raise,overflow,exception,number,number,class,target,class,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,target,class,target,class,get,name,overflow
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1328020251;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input <code>String</code>_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if <code>null</code>,_this method falls back to <code>parseNumber(String, Class)</code>)_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,code,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,code,this,method,falls,back,to,code,parse,number,string,class,code,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1356735495;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1385412762;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1394726635;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1401205411;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1426267150;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class.equals(targetClass) && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,equals,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1432125256;Parse the given text into a number instance of the given target class,_using the given NumberFormat. Trims the input {@code String}_before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the NumberFormat to use for parsing (if {@code null},_this method falls back to {@code parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,given,number,format,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,code,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1438881662;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1438882923;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1458323501;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat);1467730834;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(String text, Class<T> targetClass, NumberFormat numberFormat) {_		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1328020251;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1356735495;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1385412762;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1394726635;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1401205411;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1426267150;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (targetClass.equals(Byte.class)) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (targetClass.equals(Short.class)) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (targetClass.equals(Integer.class)) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (targetClass.equals(Long.class)) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Long(number.longValue())__		}_		else if (targetClass.equals(BigInteger.class)) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (targetClass.equals(Float.class)) {_			return (T) new Float(number.floatValue())__		}_		else if (targetClass.equals(Double.class)) {_			return (T) new Double(number.doubleValue())__		}_		else if (targetClass.equals(BigDecimal.class)) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,target,class,equals,byte,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,target,class,equals,short,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,target,class,equals,integer,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,target,class,equals,long,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,new,long,number,long,value,else,if,target,class,equals,big,integer,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,target,class,equals,float,class,return,t,new,float,number,float,value,else,if,target,class,equals,double,class,return,t,new,double,number,double,value,else,if,target,class,equals,big,decimal,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1432125256;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (Long.class == targetClass) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Long(number.longValue())__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) new Float(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) new Double(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unknown target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,short,class,target,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,integer,class,target,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,long,class,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,new,long,number,long,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,new,float,number,float,value,else,if,double,class,target,class,return,t,new,double,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unknown,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1438881662;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Byte(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Short(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Integer(number.intValue())__		}_		else if (Long.class == targetClass) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) new Long(number.longValue())__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) new Float(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) new Double(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,new,byte,number,byte,value,else,if,short,class,target,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,new,short,number,short,value,else,if,integer,class,target,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,new,integer,number,int,value,else,if,long,class,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,new,long,number,long,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,new,float,number,float,value,else,if,double,class,target,class,return,t,new,double,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1438882923;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = number.longValue()__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Byte.valueOf(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = number.longValue()__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Short.valueOf(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = number.longValue()__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Integer.valueOf(number.intValue())__		}_		else if (Long.class == targetClass) {_			BigInteger bigInt = null__			if (number instanceof BigInteger) {_				bigInt = (BigInteger) number__			}_			else if (number instanceof BigDecimal) {_				bigInt = ((BigDecimal) number).toBigInteger()__			}_			_			if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Long.valueOf(number.longValue())__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,number,long,value,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,byte,value,of,number,byte,value,else,if,short,class,target,class,long,value,number,long,value,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,short,value,of,number,short,value,else,if,integer,class,target,class,long,value,number,long,value,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,integer,value,of,number,int,value,else,if,long,class,target,class,big,integer,big,int,null,if,number,instanceof,big,integer,big,int,big,integer,number,else,if,number,instanceof,big,decimal,big,int,big,decimal,number,to,big,integer,if,big,int,null,big,int,compare,to,0,big,int,compare,to,0,raise,overflow,exception,number,target,class,return,t,long,value,of,number,long,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,float,value,of,number,float,value,else,if,double,class,target,class,return,t,double,value,of,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1458323501;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Byte.valueOf(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Short.valueOf(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Integer.valueOf(number.intValue())__		}_		else if (Long.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			return (T) Long.valueOf(value)__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,checked,long,value,number,target,class,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,byte,value,of,number,byte,value,else,if,short,class,target,class,long,value,checked,long,value,number,target,class,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,short,value,of,number,short,value,else,if,integer,class,target,class,long,value,checked,long,value,number,target,class,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,integer,value,of,number,int,value,else,if,long,class,target,class,long,value,checked,long,value,number,target,class,return,t,long,value,of,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,float,value,of,number,float,value,else,if,double,class,target,class,return,t,double,value,of,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1467730834;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Byte.valueOf(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Short.valueOf(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Integer.valueOf(number.intValue())__		}_		else if (Long.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			return (T) Long.valueOf(value)__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,checked,long,value,number,target,class,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,byte,value,of,number,byte,value,else,if,short,class,target,class,long,value,checked,long,value,number,target,class,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,short,value,of,number,short,value,else,if,integer,class,target,class,long,value,checked,long,value,number,target,class,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,integer,value,of,number,int,value,else,if,long,class,target,class,long,value,checked,long,value,number,target,class,return,t,long,value,of,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,float,value,of,number,float,value,else,if,double,class,target,class,return,t,double,value,of,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1496837955;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Byte.valueOf(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Short.valueOf(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Integer.valueOf(number.intValue())__		}_		else if (Long.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			return (T) Long.valueOf(value)__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,checked,long,value,number,target,class,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,byte,value,of,number,byte,value,else,if,short,class,target,class,long,value,checked,long,value,number,target,class,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,short,value,of,number,short,value,else,if,integer,class,target,class,long,value,checked,long,value,number,target,class,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,integer,value,of,number,int,value,else,if,long,class,target,class,long,value,checked,long,value,number,target,class,return,t,long,value,of,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,float,value,of,number,float,value,else,if,double,class,target,class,return,t,double,value,of,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) 			throws IllegalArgumentException;1545987505;Convert the given number into an instance of the given target class._@param number the number to convert_@param targetClass the target class to convert to_@return the converted number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte_@see java.lang.Short_@see java.lang.Integer_@see java.lang.Long_@see java.math.BigInteger_@see java.lang.Float_@see java.lang.Double_@see java.math.BigDecimal;@SuppressWarnings("unchecked")_	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)_			throws IllegalArgumentException {__		Assert.notNull(number, "Number must not be null")__		Assert.notNull(targetClass, "Target class must not be null")___		if (targetClass.isInstance(number)) {_			return (T) number__		}_		else if (Byte.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Byte.valueOf(number.byteValue())__		}_		else if (Short.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Short.valueOf(number.shortValue())__		}_		else if (Integer.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {_				raiseOverflowException(number, targetClass)__			}_			return (T) Integer.valueOf(number.intValue())__		}_		else if (Long.class == targetClass) {_			long value = checkedLongValue(number, targetClass)__			return (T) Long.valueOf(value)__		}_		else if (BigInteger.class == targetClass) {_			if (number instanceof BigDecimal) {_				_				return (T) ((BigDecimal) number).toBigInteger()__			}_			else {_				_				return (T) BigInteger.valueOf(number.longValue())__			}_		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(number.floatValue())__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(number.doubleValue())__		}_		else if (BigDecimal.class == targetClass) {_			_			_			return (T) new BigDecimal(number.toString())__		}_		else {_			throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" +_					number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")__		}_	};convert,the,given,number,into,an,instance,of,the,given,target,class,param,number,the,number,to,convert,param,target,class,the,target,class,to,convert,to,return,the,converted,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,see,java,lang,short,see,java,lang,integer,see,java,lang,long,see,java,math,big,integer,see,java,lang,float,see,java,lang,double,see,java,math,big,decimal;suppress,warnings,unchecked,public,static,t,extends,number,t,convert,number,to,target,class,number,number,class,t,target,class,throws,illegal,argument,exception,assert,not,null,number,number,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,if,target,class,is,instance,number,return,t,number,else,if,byte,class,target,class,long,value,checked,long,value,number,target,class,if,value,byte,value,byte,raise,overflow,exception,number,target,class,return,t,byte,value,of,number,byte,value,else,if,short,class,target,class,long,value,checked,long,value,number,target,class,if,value,short,value,short,raise,overflow,exception,number,target,class,return,t,short,value,of,number,short,value,else,if,integer,class,target,class,long,value,checked,long,value,number,target,class,if,value,integer,value,integer,raise,overflow,exception,number,target,class,return,t,integer,value,of,number,int,value,else,if,long,class,target,class,long,value,checked,long,value,number,target,class,return,t,long,value,of,value,else,if,big,integer,class,target,class,if,number,instanceof,big,decimal,return,t,big,decimal,number,to,big,integer,else,return,t,big,integer,value,of,number,long,value,else,if,float,class,target,class,return,t,float,value,of,number,float,value,else,if,double,class,target,class,return,t,double,value,of,number,double,value,else,if,big,decimal,class,target,class,return,t,new,big,decimal,number,to,string,else,throw,new,illegal,argument,exception,could,not,convert,number,number,of,type,number,get,class,get,name,to,unsupported,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1328020251;Parse the given text into a number instance of the given target class,_using the corresponding <code>decode</code> / <code>valueOf</code> methods._<p>Trims the input <code>String</code> before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.lang.Byte#decode_@see java.lang.Short#decode_@see java.lang.Integer#decode_@see java.lang.Long#decode_@see #decodeBigInteger(String)_@see java.lang.Float#valueOf_@see java.lang.Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,code,value,of,code,methods,p,trims,the,input,code,string,code,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,lang,byte,decode,see,java,lang,short,decode,see,java,lang,integer,decode,see,java,lang,long,decode,see,decode,big,integer,string,see,java,lang,float,value,of,see,java,lang,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1356735495;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1385412762;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1394726635;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1401205411;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1426267150;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (targetClass.equals(Byte.class)) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (targetClass.equals(Short.class)) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (targetClass.equals(Integer.class)) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (targetClass.equals(Long.class)) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (targetClass.equals(BigInteger.class)) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (targetClass.equals(Float.class)) {_			return (T) Float.valueOf(trimmed)__		}_		else if (targetClass.equals(Double.class)) {_			return (T) Double.valueOf(trimmed)__		}_		else if (targetClass.equals(BigDecimal.class) || targetClass.equals(Number.class)) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,target,class,equals,byte,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,target,class,equals,short,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,target,class,equals,integer,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,target,class,equals,long,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,target,class,equals,big,integer,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,target,class,equals,float,class,return,t,float,value,of,trimmed,else,if,target,class,equals,double,class,return,t,double,value,of,trimmed,else,if,target,class,equals,big,decimal,class,target,class,equals,number,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1432125256;Parse the given text into a number instance of the given target class,_using the corresponding {@code decode} / {@code valueOf} methods._<p>Trims the input {@code String} before attempting to parse the number._Supports numbers in hex format (with leading "0x", "0X" or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,text,into,a,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,methods,p,trims,the,input,code,string,before,attempting,to,parse,the,number,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1438881662;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1438882923;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1458323501;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1467730834;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1496837955;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> @SuppressWarnings("unchecked") 	public static <T extends Number> T parseNumber(String text, Class<T> targetClass);1545987505;Parse the given {@code text} into a {@link Number} instance of the given_target class, using the corresponding {@code decode} / {@code valueOf} method._<p>Trims all whitespace (leading, trailing, and in between characters) from_the input {@code String} before attempting to parse the number._<p>Supports numbers in hex format (with leading "0x", "0X", or "#") as well._@param text the text to convert_@param targetClass the target class to parse into_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see Byte#decode_@see Short#decode_@see Integer#decode_@see Long#decode_@see #decodeBigInteger(String)_@see Float#valueOf_@see Double#valueOf_@see java.math.BigDecimal#BigDecimal(String);@SuppressWarnings("unchecked")_	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {_		Assert.notNull(text, "Text must not be null")__		Assert.notNull(targetClass, "Target class must not be null")__		String trimmed = StringUtils.trimAllWhitespace(text)___		if (Byte.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))__		}_		else if (Short.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))__		}_		else if (Integer.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))__		}_		else if (Long.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))__		}_		else if (BigInteger.class == targetClass) {_			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))__		}_		else if (Float.class == targetClass) {_			return (T) Float.valueOf(trimmed)__		}_		else if (Double.class == targetClass) {_			return (T) Double.valueOf(trimmed)__		}_		else if (BigDecimal.class == targetClass || Number.class == targetClass) {_			return (T) new BigDecimal(trimmed)__		}_		else {_			throw new IllegalArgumentException(_					"Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,corresponding,code,decode,code,value,of,method,p,trims,all,whitespace,leading,trailing,and,in,between,characters,from,the,input,code,string,before,attempting,to,parse,the,number,p,supports,numbers,in,hex,format,with,leading,0x,0x,or,as,well,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,byte,decode,see,short,decode,see,integer,decode,see,long,decode,see,decode,big,integer,string,see,float,value,of,see,double,value,of,see,java,math,big,decimal,big,decimal,string;suppress,warnings,unchecked,public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,string,trimmed,string,utils,trim,all,whitespace,text,if,byte,class,target,class,return,t,is,hex,number,trimmed,byte,decode,trimmed,byte,value,of,trimmed,else,if,short,class,target,class,return,t,is,hex,number,trimmed,short,decode,trimmed,short,value,of,trimmed,else,if,integer,class,target,class,return,t,is,hex,number,trimmed,integer,decode,trimmed,integer,value,of,trimmed,else,if,long,class,target,class,return,t,is,hex,number,trimmed,long,decode,trimmed,long,value,of,trimmed,else,if,big,integer,class,target,class,return,t,is,hex,number,trimmed,decode,big,integer,trimmed,new,big,integer,trimmed,else,if,float,class,target,class,return,t,float,value,of,trimmed,else,if,double,class,target,class,return,t,double,value,of,trimmed,else,if,big,decimal,class,target,class,number,class,target,class,return,t,new,big,decimal,trimmed,else,throw,new,illegal,argument,exception,cannot,convert,string,text,to,target,class,target,class,get,name
NumberUtils -> public static <T extends Number> T parseNumber( 			String text, Class<T> targetClass, @Nullable NumberFormat numberFormat);1496837955;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(_			String text, Class<T> targetClass, @Nullable NumberFormat numberFormat) {__		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,nullable,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
NumberUtils -> public static <T extends Number> T parseNumber( 			String text, Class<T> targetClass, @Nullable NumberFormat numberFormat);1545987505;Parse the given {@code text} into a {@link Number} instance of the_given target class, using the supplied {@link NumberFormat}._<p>Trims the input {@code String} before attempting to parse the number._@param text the text to convert_@param targetClass the target class to parse into_@param numberFormat the {@code NumberFormat} to use for parsing (if_{@code null}, this method falls back to {@link #parseNumber(String, Class)})_@return the parsed number_@throws IllegalArgumentException if the target class is not supported_(i.e. not a standard Number subclass as included in the JDK)_@see java.text.NumberFormat#parse_@see #convertNumberToTargetClass_@see #parseNumber(String, Class);public static <T extends Number> T parseNumber(_			String text, Class<T> targetClass, @Nullable NumberFormat numberFormat) {__		if (numberFormat != null) {_			Assert.notNull(text, "Text must not be null")__			Assert.notNull(targetClass, "Target class must not be null")__			DecimalFormat decimalFormat = null__			boolean resetBigDecimal = false__			if (numberFormat instanceof DecimalFormat) {_				decimalFormat = (DecimalFormat) numberFormat__				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {_					decimalFormat.setParseBigDecimal(true)__					resetBigDecimal = true__				}_			}_			try {_				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text))__				return convertNumberToTargetClass(number, targetClass)__			}_			catch (ParseException ex) {_				throw new IllegalArgumentException("Could not parse number: " + ex.getMessage())__			}_			finally {_				if (resetBigDecimal) {_					decimalFormat.setParseBigDecimal(false)__				}_			}_		}_		else {_			return parseNumber(text, targetClass)__		}_	};parse,the,given,code,text,into,a,link,number,instance,of,the,given,target,class,using,the,supplied,link,number,format,p,trims,the,input,code,string,before,attempting,to,parse,the,number,param,text,the,text,to,convert,param,target,class,the,target,class,to,parse,into,param,number,format,the,code,number,format,to,use,for,parsing,if,code,null,this,method,falls,back,to,link,parse,number,string,class,return,the,parsed,number,throws,illegal,argument,exception,if,the,target,class,is,not,supported,i,e,not,a,standard,number,subclass,as,included,in,the,jdk,see,java,text,number,format,parse,see,convert,number,to,target,class,see,parse,number,string,class;public,static,t,extends,number,t,parse,number,string,text,class,t,target,class,nullable,number,format,number,format,if,number,format,null,assert,not,null,text,text,must,not,be,null,assert,not,null,target,class,target,class,must,not,be,null,decimal,format,decimal,format,null,boolean,reset,big,decimal,false,if,number,format,instanceof,decimal,format,decimal,format,decimal,format,number,format,if,big,decimal,class,target,class,decimal,format,is,parse,big,decimal,decimal,format,set,parse,big,decimal,true,reset,big,decimal,true,try,number,number,number,format,parse,string,utils,trim,all,whitespace,text,return,convert,number,to,target,class,number,target,class,catch,parse,exception,ex,throw,new,illegal,argument,exception,could,not,parse,number,ex,get,message,finally,if,reset,big,decimal,decimal,format,set,parse,big,decimal,false,else,return,parse,number,text,target,class
