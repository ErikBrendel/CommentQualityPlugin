commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object[].class, Object.class)). }
false;public;2;4;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, this.conversionService). }
false;public;3;15;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     if (sourceType.isAssignableTo(targetType)) {         return source.     }     if (Array.getLength(source) == 0) {         return null.     }     Object firstElement = Array.get(source, 0).     return this.conversionService.convert(firstElement, sourceType.elementTypeDescriptor(firstElement), targetType). }
