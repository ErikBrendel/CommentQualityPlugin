commented;modifiers;parameterAmount;loc;comment;code
true;public,synchronized;1;6;/**  * Resize the internal buffer size to a specified capacity.  * @param targetCapacity the desired size of the buffer  * @throws IllegalArgumentException if the given capacity is smaller than  * the actual size of the content stored in the buffer already  * @see ResizableByteArrayOutputStream#size()  */ ;/**  * Resize the internal buffer size to a specified capacity.  * @param targetCapacity the desired size of the buffer  * @throws IllegalArgumentException if the given capacity is smaller than  * the actual size of the content stored in the buffer already  * @see ResizableByteArrayOutputStream#size()  */ public synchronized void resize(int targetCapacity) {     Assert.isTrue(targetCapacity >= this.count, "New capacity must not be smaller than current size").     byte[] resizedBuffer = new byte[targetCapacity].     System.arraycopy(this.buf, 0, resizedBuffer, 0, this.count).     this.buf = resizedBuffer. }
true;public,synchronized;1;7;/**  * Grow the internal buffer size.  * @param additionalCapacity the number of bytes to add to the current buffer size  * @see ResizableByteArrayOutputStream#size()  */ ;/**  * Grow the internal buffer size.  * @param additionalCapacity the number of bytes to add to the current buffer size  * @see ResizableByteArrayOutputStream#size()  */ public synchronized void grow(int additionalCapacity) {     Assert.isTrue(additionalCapacity >= 0, "Additional capacity must be 0 or higher").     if (this.count + additionalCapacity > this.buf.length) {         int newCapacity = Math.max(this.buf.length * 2, this.count + additionalCapacity).         resize(newCapacity).     } }
true;public,synchronized;0;3;/**  * Return the current size of this stream's internal buffer.  */ ;/**  * Return the current size of this stream's internal buffer.  */ public synchronized int capacity() {     return this.buf.length. }
