commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setNamespaceContext(NamespaceContext context) throws XMLStreamException {     this.eventWriter.setNamespaceContext(context). }
false;public;0;4;;@Override public NamespaceContext getNamespaceContext() {     return this.eventWriter.getNamespaceContext(). }
false;public;2;4;;@Override public void setPrefix(String prefix, String uri) throws XMLStreamException {     this.eventWriter.setPrefix(prefix, uri). }
false;public;1;4;;@Override public String getPrefix(String uri) throws XMLStreamException {     return this.eventWriter.getPrefix(uri). }
false;public;1;4;;@Override public void setDefaultNamespace(String uri) throws XMLStreamException {     this.eventWriter.setDefaultNamespace(uri). }
false;public;1;4;;@Override public Object getProperty(String name) throws IllegalArgumentException {     throw new IllegalArgumentException(). }
false;public;0;5;;@Override public void writeStartDocument() throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createStartDocument()). }
false;public;1;5;;@Override public void writeStartDocument(String version) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createStartDocument(DEFAULT_ENCODING, version)). }
false;public;2;5;;@Override public void writeStartDocument(String encoding, String version) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createStartDocument(encoding, version)). }
false;public;1;5;;@Override public void writeStartElement(String localName) throws XMLStreamException {     closeEmptyElementIfNecessary().     doWriteStartElement(this.eventFactory.createStartElement(new QName(localName), null, null)). }
false;public;2;5;;@Override public void writeStartElement(String namespaceURI, String localName) throws XMLStreamException {     closeEmptyElementIfNecessary().     doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName), null, null)). }
false;public;3;5;;@Override public void writeStartElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {     closeEmptyElementIfNecessary().     doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName, prefix), null, null)). }
false;private;1;4;;private void doWriteStartElement(StartElement startElement) throws XMLStreamException {     this.eventWriter.add(startElement).     this.endElements.add(this.eventFactory.createEndElement(startElement.getName(), startElement.getNamespaces())). }
false;public;1;6;;@Override public void writeEmptyElement(String localName) throws XMLStreamException {     closeEmptyElementIfNecessary().     writeStartElement(localName).     this.emptyElement = true. }
false;public;2;6;;@Override public void writeEmptyElement(String namespaceURI, String localName) throws XMLStreamException {     closeEmptyElementIfNecessary().     writeStartElement(namespaceURI, localName).     this.emptyElement = true. }
false;public;3;6;;@Override public void writeEmptyElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {     closeEmptyElementIfNecessary().     writeStartElement(prefix, localName, namespaceURI).     this.emptyElement = true. }
false;private;0;6;;private void closeEmptyElementIfNecessary() throws XMLStreamException {     if (this.emptyElement) {         this.emptyElement = false.         writeEndElement().     } }
false;public;0;8;;@Override public void writeEndElement() throws XMLStreamException {     closeEmptyElementIfNecessary().     int last = this.endElements.size() - 1.     EndElement lastEndElement = this.endElements.get(last).     this.eventWriter.add(lastEndElement).     this.endElements.remove(last). }
false;public;2;4;;@Override public void writeAttribute(String localName, String value) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createAttribute(localName, value)). }
false;public;3;4;;@Override public void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createAttribute(new QName(namespaceURI, localName), value)). }
false;public;4;6;;@Override public void writeAttribute(String prefix, String namespaceURI, String localName, String value) throws XMLStreamException {     this.eventWriter.add(this.eventFactory.createAttribute(prefix, namespaceURI, localName, value)). }
false;public;2;4;;@Override public void writeNamespace(String prefix, String namespaceURI) throws XMLStreamException {     doWriteNamespace(this.eventFactory.createNamespace(prefix, namespaceURI)). }
false;public;1;4;;@Override public void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {     doWriteNamespace(this.eventFactory.createNamespace(namespaceURI)). }
false;private;1;15;;@SuppressWarnings("rawtypes") private void doWriteNamespace(Namespace namespace) throws XMLStreamException {     int last = this.endElements.size() - 1.     EndElement oldEndElement = this.endElements.get(last).     Iterator oldNamespaces = oldEndElement.getNamespaces().     List<Namespace> newNamespaces = new ArrayList<>().     while (oldNamespaces.hasNext()) {         Namespace oldNamespace = (Namespace) oldNamespaces.next().         newNamespaces.add(oldNamespace).     }     newNamespaces.add(namespace).     EndElement newEndElement = this.eventFactory.createEndElement(oldEndElement.getName(), newNamespaces.iterator()).     this.eventWriter.add(namespace).     this.endElements.set(last, newEndElement). }
false;public;1;5;;@Override public void writeCharacters(String text) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createCharacters(text)). }
false;public;3;5;;@Override public void writeCharacters(char[] text, int start, int len) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createCharacters(new String(text, start, len))). }
false;public;1;5;;@Override public void writeCData(String data) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createCData(data)). }
false;public;1;5;;@Override public void writeComment(String data) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createComment(data)). }
false;public;1;5;;@Override public void writeProcessingInstruction(String target) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, "")). }
false;public;2;5;;@Override public void writeProcessingInstruction(String target, String data) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, data)). }
false;public;1;5;;@Override public void writeDTD(String dtd) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createDTD(dtd)). }
false;public;1;5;;@Override public void writeEntityRef(String name) throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createEntityReference(name, null)). }
false;public;0;5;;@Override public void writeEndDocument() throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.add(this.eventFactory.createEndDocument()). }
false;public;0;4;;@Override public void flush() throws XMLStreamException {     this.eventWriter.flush(). }
false;public;0;5;;@Override public void close() throws XMLStreamException {     closeEmptyElementIfNecessary().     this.eventWriter.close(). }
