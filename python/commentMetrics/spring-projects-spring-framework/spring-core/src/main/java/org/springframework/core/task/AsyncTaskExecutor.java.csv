# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncTaskExecutor -> <T> Future<T> submit(Callable<T> task)_;1328020251;Submit a Callable task for execution, receiving a Future representing that task._The Future will return the Callable's result upon completion._@param task the <code>Callable</code> to execute (never <code>null</code>)_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted;<T> Future<T> submit(Callable<T> task)_;submit,a,callable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,the,callable,s,result,upon,completion,param,task,the,code,callable,code,to,execute,never,code,null,code,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted;t,future,t,submit,callable,t,task
AsyncTaskExecutor -> <T> Future<T> submit(Callable<T> task)_;1356735495;Submit a Callable task for execution, receiving a Future representing that task._The Future will return the Callable's result upon completion._@param task the {@code Callable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted;<T> Future<T> submit(Callable<T> task)_;submit,a,callable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,the,callable,s,result,upon,completion,param,task,the,code,callable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted;t,future,t,submit,callable,t,task
AsyncTaskExecutor -> <T> Future<T> submit(Callable<T> task)_;1388782627;Submit a Callable task for execution, receiving a Future representing that task._The Future will return the Callable's result upon completion._@param task the {@code Callable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted_@since 3.0;<T> Future<T> submit(Callable<T> task)_;submit,a,callable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,the,callable,s,result,upon,completion,param,task,the,code,callable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted,since,3,0;t,future,t,submit,callable,t,task
AsyncTaskExecutor -> <T> Future<T> submit(Callable<T> task)_;1530174524;Submit a Callable task for execution, receiving a Future representing that task._The Future will return the Callable's result upon completion._@param task the {@code Callable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted_@since 3.0;<T> Future<T> submit(Callable<T> task)_;submit,a,callable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,the,callable,s,result,upon,completion,param,task,the,code,callable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted,since,3,0;t,future,t,submit,callable,t,task
AsyncTaskExecutor -> Future<?> submit(Runnable task)_;1328020251;Submit a Runnable task for execution, receiving a Future representing that task._The Future will return a <code>null</code> result upon completion._@param task the <code>Runnable</code> to execute (never <code>null</code>)_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted;Future<?> submit(Runnable task)_;submit,a,runnable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,a,code,null,code,result,upon,completion,param,task,the,code,runnable,code,to,execute,never,code,null,code,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted;future,submit,runnable,task
AsyncTaskExecutor -> Future<?> submit(Runnable task)_;1356735495;Submit a Runnable task for execution, receiving a Future representing that task._The Future will return a {@code null} result upon completion._@param task the {@code Runnable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted;Future<?> submit(Runnable task)_;submit,a,runnable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,a,code,null,result,upon,completion,param,task,the,code,runnable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted;future,submit,runnable,task
AsyncTaskExecutor -> Future<?> submit(Runnable task)_;1388782627;Submit a Runnable task for execution, receiving a Future representing that task._The Future will return a {@code null} result upon completion._@param task the {@code Runnable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted_@since 3.0;Future<?> submit(Runnable task)_;submit,a,runnable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,a,code,null,result,upon,completion,param,task,the,code,runnable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted,since,3,0;future,submit,runnable,task
AsyncTaskExecutor -> Future<?> submit(Runnable task)_;1530174524;Submit a Runnable task for execution, receiving a Future representing that task._The Future will return a {@code null} result upon completion._@param task the {@code Runnable} to execute (never {@code null})_@return a Future representing pending completion of the task_@throws TaskRejectedException if the given task was not accepted_@since 3.0;Future<?> submit(Runnable task)_;submit,a,runnable,task,for,execution,receiving,a,future,representing,that,task,the,future,will,return,a,code,null,result,upon,completion,param,task,the,code,runnable,to,execute,never,code,null,return,a,future,representing,pending,completion,of,the,task,throws,task,rejected,exception,if,the,given,task,was,not,accepted,since,3,0;future,submit,runnable,task
AsyncTaskExecutor -> void execute(Runnable task, long startTimeout)_;1328020251;Execute the given <code>task</code>._@param task the <code>Runnable</code> to execute (never <code>null</code>)_@param startTimeout the time duration (milliseconds) within which the task is_supposed to start. This is intended as a hint to the executor, allowing for_preferred handling of immediate tasks. Typical values are {@link #TIMEOUT_IMMEDIATE}_or {@link #TIMEOUT_INDEFINITE} (the default as used by {@link #execute(Runnable)})._@throws TaskTimeoutException in case of the task being rejected because_of the timeout (i.e. it cannot be started in time)_@throws TaskRejectedException if the given task was not accepted;void execute(Runnable task, long startTimeout)_;execute,the,given,code,task,code,param,task,the,code,runnable,code,to,execute,never,code,null,code,param,start,timeout,the,time,duration,milliseconds,within,which,the,task,is,supposed,to,start,this,is,intended,as,a,hint,to,the,executor,allowing,for,preferred,handling,of,immediate,tasks,typical,values,are,link,or,link,the,default,as,used,by,link,execute,runnable,throws,task,timeout,exception,in,case,of,the,task,being,rejected,because,of,the,timeout,i,e,it,cannot,be,started,in,time,throws,task,rejected,exception,if,the,given,task,was,not,accepted;void,execute,runnable,task,long,start,timeout
AsyncTaskExecutor -> void execute(Runnable task, long startTimeout)_;1356735495;Execute the given {@code task}._@param task the {@code Runnable} to execute (never {@code null})_@param startTimeout the time duration (milliseconds) within which the task is_supposed to start. This is intended as a hint to the executor, allowing for_preferred handling of immediate tasks. Typical values are {@link #TIMEOUT_IMMEDIATE}_or {@link #TIMEOUT_INDEFINITE} (the default as used by {@link #execute(Runnable)})._@throws TaskTimeoutException in case of the task being rejected because_of the timeout (i.e. it cannot be started in time)_@throws TaskRejectedException if the given task was not accepted;void execute(Runnable task, long startTimeout)_;execute,the,given,code,task,param,task,the,code,runnable,to,execute,never,code,null,param,start,timeout,the,time,duration,milliseconds,within,which,the,task,is,supposed,to,start,this,is,intended,as,a,hint,to,the,executor,allowing,for,preferred,handling,of,immediate,tasks,typical,values,are,link,or,link,the,default,as,used,by,link,execute,runnable,throws,task,timeout,exception,in,case,of,the,task,being,rejected,because,of,the,timeout,i,e,it,cannot,be,started,in,time,throws,task,rejected,exception,if,the,given,task,was,not,accepted;void,execute,runnable,task,long,start,timeout
AsyncTaskExecutor -> void execute(Runnable task, long startTimeout)_;1388782627;Execute the given {@code task}._@param task the {@code Runnable} to execute (never {@code null})_@param startTimeout the time duration (milliseconds) within which the task is_supposed to start. This is intended as a hint to the executor, allowing for_preferred handling of immediate tasks. Typical values are {@link #TIMEOUT_IMMEDIATE}_or {@link #TIMEOUT_INDEFINITE} (the default as used by {@link #execute(Runnable)})._@throws TaskTimeoutException in case of the task being rejected because_of the timeout (i.e. it cannot be started in time)_@throws TaskRejectedException if the given task was not accepted;void execute(Runnable task, long startTimeout)_;execute,the,given,code,task,param,task,the,code,runnable,to,execute,never,code,null,param,start,timeout,the,time,duration,milliseconds,within,which,the,task,is,supposed,to,start,this,is,intended,as,a,hint,to,the,executor,allowing,for,preferred,handling,of,immediate,tasks,typical,values,are,link,or,link,the,default,as,used,by,link,execute,runnable,throws,task,timeout,exception,in,case,of,the,task,being,rejected,because,of,the,timeout,i,e,it,cannot,be,started,in,time,throws,task,rejected,exception,if,the,given,task,was,not,accepted;void,execute,runnable,task,long,start,timeout
AsyncTaskExecutor -> void execute(Runnable task, long startTimeout)_;1530174524;Execute the given {@code task}._@param task the {@code Runnable} to execute (never {@code null})_@param startTimeout the time duration (milliseconds) within which the task is_supposed to start. This is intended as a hint to the executor, allowing for_preferred handling of immediate tasks. Typical values are {@link #TIMEOUT_IMMEDIATE}_or {@link #TIMEOUT_INDEFINITE} (the default as used by {@link #execute(Runnable)})._@throws TaskTimeoutException in case of the task being rejected because_of the timeout (i.e. it cannot be started in time)_@throws TaskRejectedException if the given task was not accepted;void execute(Runnable task, long startTimeout)_;execute,the,given,code,task,param,task,the,code,runnable,to,execute,never,code,null,param,start,timeout,the,time,duration,milliseconds,within,which,the,task,is,supposed,to,start,this,is,intended,as,a,hint,to,the,executor,allowing,for,preferred,handling,of,immediate,tasks,typical,values,are,link,or,link,the,default,as,used,by,link,execute,runnable,throws,task,timeout,exception,in,case,of,the,task,being,rejected,because,of,the,timeout,i,e,it,cannot,be,started,in,time,throws,task,rejected,exception,if,the,given,task,was,not,accepted;void,execute,runnable,task,long,start,timeout
