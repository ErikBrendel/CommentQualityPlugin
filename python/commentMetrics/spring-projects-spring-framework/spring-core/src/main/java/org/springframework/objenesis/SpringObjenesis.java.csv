commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return whether this Objenesis instance is worth trying for instance creation,  * i.e. whether it hasn't been used yet or is known to work.  * <p>If the configured Objenesis instantiator strategy has been identified to not  * work on the current JVM at all or if the "spring.objenesis.ignore" property has  * been set to "true", this method returns {@code false}.  */ ;/**  * Return whether this Objenesis instance is worth trying for instance creation,  * i.e. whether it hasn't been used yet or is known to work.  * <p>If the configured Objenesis instantiator strategy has been identified to not  * work on the current JVM at all or if the "spring.objenesis.ignore" property has  * been set to "true", this method returns {@code false}.  */ public boolean isWorthTrying() {     return (this.worthTrying != Boolean.FALSE). }
true;public;2;6;/**  * Create a new instance of the given class via Objenesis.  * @param clazz the class to create an instance of  * @param useCache whether to use the instantiator cache  * (typically {@code true} but can be set to {@code false}  * e.g. for reloadable classes)  * @return the new instance (never {@code null})  * @throws ObjenesisException if instance creation failed  */ ;/**  * Create a new instance of the given class via Objenesis.  * @param clazz the class to create an instance of  * @param useCache whether to use the instantiator cache  * (typically {@code true} but can be set to {@code false}  * e.g. for reloadable classes)  * @return the new instance (never {@code null})  * @throws ObjenesisException if instance creation failed  */ public <T> T newInstance(Class<T> clazz, boolean useCache) {     if (!useCache) {         return newInstantiatorOf(clazz).newInstance().     }     return getInstantiatorOf(clazz).newInstance(). }
false;public;1;3;;public <T> T newInstance(Class<T> clazz) {     return getInstantiatorOf(clazz).newInstance(). }
false;public;1;12;;@SuppressWarnings("unchecked") public <T> ObjectInstantiator<T> getInstantiatorOf(Class<T> clazz) {     ObjectInstantiator<?> instantiator = this.cache.get(clazz).     if (instantiator == null) {         ObjectInstantiator<T> newInstantiator = newInstantiatorOf(clazz).         instantiator = this.cache.putIfAbsent(clazz, newInstantiator).         if (instantiator == null) {             instantiator = newInstantiator.         }     }     return (ObjectInstantiator<T>) instantiator. }
false;protected;1;30;;protected <T> ObjectInstantiator<T> newInstantiatorOf(Class<T> clazz) {     Boolean currentWorthTrying = this.worthTrying.     try {         ObjectInstantiator<T> instantiator = this.strategy.newInstantiatorOf(clazz).         if (currentWorthTrying == null) {             this.worthTrying = Boolean.TRUE.         }         return instantiator.     } catch (ObjenesisException ex) {         if (currentWorthTrying == null) {             Throwable cause = ex.getCause().             if (cause instanceof ClassNotFoundException || cause instanceof IllegalAccessException) {                 // Indicates that the chosen instantiation strategy does not work on the given JVM.                 // Typically a failure to initialize the default SunReflectionFactoryInstantiator.                 // Let's assume that any subsequent attempts to use Objenesis will fail as well...                 this.worthTrying = Boolean.FALSE.             }         }         throw ex.     } catch (NoClassDefFoundError err) {         // restricted "sun.reflect.ReflectionFactory" class...         if (currentWorthTrying == null) {             this.worthTrying = Boolean.FALSE.         }         throw new ObjenesisException(err).     } }
