# id;timestamp;commentText;codeText;commentWords;codeWords
ConcurrencyThrottleSupport -> public void setConcurrencyLimit(int concurrencyLimit);1328020251;Set the maximum number of concurrent access attempts allowed._-1 indicates unbounded concurrency._<p>In principle, this limit can be changed at runtime,_although it is generally designed as a config time setting._<p>NOTE: Do not switch between -1 and any concrete limit at runtime,_as this will lead to inconsistent concurrency counts: A limit_of -1 effectively turns off concurrency counting completely.;public void setConcurrencyLimit(int concurrencyLimit) {_		this.concurrencyLimit = concurrencyLimit__	};set,the,maximum,number,of,concurrent,access,attempts,allowed,1,indicates,unbounded,concurrency,p,in,principle,this,limit,can,be,changed,at,runtime,although,it,is,generally,designed,as,a,config,time,setting,p,note,do,not,switch,between,1,and,any,concrete,limit,at,runtime,as,this,will,lead,to,inconsistent,concurrency,counts,a,limit,of,1,effectively,turns,off,concurrency,counting,completely;public,void,set,concurrency,limit,int,concurrency,limit,this,concurrency,limit,concurrency,limit
ConcurrencyThrottleSupport -> public void setConcurrencyLimit(int concurrencyLimit);1356735495;Set the maximum number of concurrent access attempts allowed._-1 indicates unbounded concurrency._<p>In principle, this limit can be changed at runtime,_although it is generally designed as a config time setting._<p>NOTE: Do not switch between -1 and any concrete limit at runtime,_as this will lead to inconsistent concurrency counts: A limit_of -1 effectively turns off concurrency counting completely.;public void setConcurrencyLimit(int concurrencyLimit) {_		this.concurrencyLimit = concurrencyLimit__	};set,the,maximum,number,of,concurrent,access,attempts,allowed,1,indicates,unbounded,concurrency,p,in,principle,this,limit,can,be,changed,at,runtime,although,it,is,generally,designed,as,a,config,time,setting,p,note,do,not,switch,between,1,and,any,concrete,limit,at,runtime,as,this,will,lead,to,inconsistent,concurrency,counts,a,limit,of,1,effectively,turns,off,concurrency,counting,completely;public,void,set,concurrency,limit,int,concurrency,limit,this,concurrency,limit,concurrency,limit
ConcurrencyThrottleSupport -> public void setConcurrencyLimit(int concurrencyLimit);1504266289;Set the maximum number of concurrent access attempts allowed._-1 indicates unbounded concurrency._<p>In principle, this limit can be changed at runtime,_although it is generally designed as a config time setting._<p>NOTE: Do not switch between -1 and any concrete limit at runtime,_as this will lead to inconsistent concurrency counts: A limit_of -1 effectively turns off concurrency counting completely.;public void setConcurrencyLimit(int concurrencyLimit) {_		this.concurrencyLimit = concurrencyLimit__	};set,the,maximum,number,of,concurrent,access,attempts,allowed,1,indicates,unbounded,concurrency,p,in,principle,this,limit,can,be,changed,at,runtime,although,it,is,generally,designed,as,a,config,time,setting,p,note,do,not,switch,between,1,and,any,concrete,limit,at,runtime,as,this,will,lead,to,inconsistent,concurrency,counts,a,limit,of,1,effectively,turns,off,concurrency,counting,completely;public,void,set,concurrency,limit,int,concurrency,limit,this,concurrency,limit,concurrency,limit
ConcurrencyThrottleSupport -> public void setConcurrencyLimit(int concurrencyLimit);1530174524;Set the maximum number of concurrent access attempts allowed._-1 indicates unbounded concurrency._<p>In principle, this limit can be changed at runtime,_although it is generally designed as a config time setting._<p>NOTE: Do not switch between -1 and any concrete limit at runtime,_as this will lead to inconsistent concurrency counts: A limit_of -1 effectively turns off concurrency counting completely.;public void setConcurrencyLimit(int concurrencyLimit) {_		this.concurrencyLimit = concurrencyLimit__	};set,the,maximum,number,of,concurrent,access,attempts,allowed,1,indicates,unbounded,concurrency,p,in,principle,this,limit,can,be,changed,at,runtime,although,it,is,generally,designed,as,a,config,time,setting,p,note,do,not,switch,between,1,and,any,concrete,limit,at,runtime,as,this,will,lead,to,inconsistent,concurrency,counts,a,limit,of,1,effectively,turns,off,concurrency,counting,completely;public,void,set,concurrency,limit,int,concurrency,limit,this,concurrency,limit,concurrency,limit
ConcurrencyThrottleSupport -> protected void afterAccess();1328020251;To be invoked after the main execution logic of concrete subclasses._@see #beforeAccess();protected void afterAccess() {_		if (this.concurrencyLimit >= 0) {_			synchronized (this.monitor) {_				this.concurrencyCount--__				if (logger.isDebugEnabled()) {_					logger.debug("Returning from throttle at concurrency count " + this.concurrencyCount)__				}_				this.monitor.notify()__			}_		}_	};to,be,invoked,after,the,main,execution,logic,of,concrete,subclasses,see,before,access;protected,void,after,access,if,this,concurrency,limit,0,synchronized,this,monitor,this,concurrency,count,if,logger,is,debug,enabled,logger,debug,returning,from,throttle,at,concurrency,count,this,concurrency,count,this,monitor,notify
ConcurrencyThrottleSupport -> protected void afterAccess();1356735495;To be invoked after the main execution logic of concrete subclasses._@see #beforeAccess();protected void afterAccess() {_		if (this.concurrencyLimit >= 0) {_			synchronized (this.monitor) {_				this.concurrencyCount--__				if (logger.isDebugEnabled()) {_					logger.debug("Returning from throttle at concurrency count " + this.concurrencyCount)__				}_				this.monitor.notify()__			}_		}_	};to,be,invoked,after,the,main,execution,logic,of,concrete,subclasses,see,before,access;protected,void,after,access,if,this,concurrency,limit,0,synchronized,this,monitor,this,concurrency,count,if,logger,is,debug,enabled,logger,debug,returning,from,throttle,at,concurrency,count,this,concurrency,count,this,monitor,notify
ConcurrencyThrottleSupport -> protected void afterAccess();1504266289;To be invoked after the main execution logic of concrete subclasses._@see #beforeAccess();protected void afterAccess() {_		if (this.concurrencyLimit >= 0) {_			synchronized (this.monitor) {_				this.concurrencyCount--__				if (logger.isDebugEnabled()) {_					logger.debug("Returning from throttle at concurrency count " + this.concurrencyCount)__				}_				this.monitor.notify()__			}_		}_	};to,be,invoked,after,the,main,execution,logic,of,concrete,subclasses,see,before,access;protected,void,after,access,if,this,concurrency,limit,0,synchronized,this,monitor,this,concurrency,count,if,logger,is,debug,enabled,logger,debug,returning,from,throttle,at,concurrency,count,this,concurrency,count,this,monitor,notify
ConcurrencyThrottleSupport -> protected void afterAccess();1530174524;To be invoked after the main execution logic of concrete subclasses._@see #beforeAccess();protected void afterAccess() {_		if (this.concurrencyLimit >= 0) {_			synchronized (this.monitor) {_				this.concurrencyCount--__				if (logger.isDebugEnabled()) {_					logger.debug("Returning from throttle at concurrency count " + this.concurrencyCount)__				}_				this.monitor.notify()__			}_		}_	};to,be,invoked,after,the,main,execution,logic,of,concrete,subclasses,see,before,access;protected,void,after,access,if,this,concurrency,limit,0,synchronized,this,monitor,this,concurrency,count,if,logger,is,debug,enabled,logger,debug,returning,from,throttle,at,concurrency,count,this,concurrency,count,this,monitor,notify
ConcurrencyThrottleSupport -> public boolean isThrottleActive();1328020251;Return whether this throttle is currently active._@return <code>true</code> if the concurrency limit for this instance is active_@see #getConcurrencyLimit();public boolean isThrottleActive() {_		return (this.concurrencyLimit > 0)__	};return,whether,this,throttle,is,currently,active,return,code,true,code,if,the,concurrency,limit,for,this,instance,is,active,see,get,concurrency,limit;public,boolean,is,throttle,active,return,this,concurrency,limit,0
ConcurrencyThrottleSupport -> public boolean isThrottleActive();1356735495;Return whether this throttle is currently active._@return {@code true} if the concurrency limit for this instance is active_@see #getConcurrencyLimit();public boolean isThrottleActive() {_		return (this.concurrencyLimit > 0)__	};return,whether,this,throttle,is,currently,active,return,code,true,if,the,concurrency,limit,for,this,instance,is,active,see,get,concurrency,limit;public,boolean,is,throttle,active,return,this,concurrency,limit,0
ConcurrencyThrottleSupport -> public boolean isThrottleActive();1504266289;Return whether this throttle is currently active._@return {@code true} if the concurrency limit for this instance is active_@see #getConcurrencyLimit();public boolean isThrottleActive() {_		return (this.concurrencyLimit >= 0)__	};return,whether,this,throttle,is,currently,active,return,code,true,if,the,concurrency,limit,for,this,instance,is,active,see,get,concurrency,limit;public,boolean,is,throttle,active,return,this,concurrency,limit,0
ConcurrencyThrottleSupport -> public boolean isThrottleActive();1530174524;Return whether this throttle is currently active._@return {@code true} if the concurrency limit for this instance is active_@see #getConcurrencyLimit();public boolean isThrottleActive() {_		return (this.concurrencyLimit >= 0)__	};return,whether,this,throttle,is,currently,active,return,code,true,if,the,concurrency,limit,for,this,instance,is,active,see,get,concurrency,limit;public,boolean,is,throttle,active,return,this,concurrency,limit,0
ConcurrencyThrottleSupport -> public int getConcurrencyLimit();1328020251;Return the maximum number of concurrent access attempts allowed.;public int getConcurrencyLimit() {_		return this.concurrencyLimit__	};return,the,maximum,number,of,concurrent,access,attempts,allowed;public,int,get,concurrency,limit,return,this,concurrency,limit
ConcurrencyThrottleSupport -> public int getConcurrencyLimit();1356735495;Return the maximum number of concurrent access attempts allowed.;public int getConcurrencyLimit() {_		return this.concurrencyLimit__	};return,the,maximum,number,of,concurrent,access,attempts,allowed;public,int,get,concurrency,limit,return,this,concurrency,limit
ConcurrencyThrottleSupport -> public int getConcurrencyLimit();1504266289;Return the maximum number of concurrent access attempts allowed.;public int getConcurrencyLimit() {_		return this.concurrencyLimit__	};return,the,maximum,number,of,concurrent,access,attempts,allowed;public,int,get,concurrency,limit,return,this,concurrency,limit
ConcurrencyThrottleSupport -> public int getConcurrencyLimit();1530174524;Return the maximum number of concurrent access attempts allowed.;public int getConcurrencyLimit() {_		return this.concurrencyLimit__	};return,the,maximum,number,of,concurrent,access,attempts,allowed;public,int,get,concurrency,limit,return,this,concurrency,limit
ConcurrencyThrottleSupport -> protected void beforeAccess();1328020251;To be invoked before the main execution logic of concrete subclasses._<p>This implementation applies the concurrency throttle._@see #afterAccess();protected void beforeAccess() {_		if (this.concurrencyLimit == NO_CONCURRENCY) {_			throw new IllegalStateException(_					"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY")__		}_		if (this.concurrencyLimit > 0) {_			boolean debug = logger.isDebugEnabled()__			synchronized (this.monitor) {_				boolean interrupted = false__				while (this.concurrencyCount >= this.concurrencyLimit) {_					if (interrupted) {_						throw new IllegalStateException("Thread was interrupted while waiting for invocation access, " +_								"but concurrency limit still does not allow for entering")__					}_					if (debug) {_						logger.debug("Concurrency count " + this.concurrencyCount +_								" has reached limit " + this.concurrencyLimit + " - blocking")__					}_					try {_						this.monitor.wait()__					}_					catch (InterruptedException ex) {_						_						Thread.currentThread().interrupt()__						interrupted = true__					}_				}_				if (debug) {_					logger.debug("Entering throttle at concurrency count " + this.concurrencyCount)__				}_				this.concurrencyCount++__			}_		}_	};to,be,invoked,before,the,main,execution,logic,of,concrete,subclasses,p,this,implementation,applies,the,concurrency,throttle,see,after,access;protected,void,before,access,if,this,concurrency,limit,throw,new,illegal,state,exception,currently,no,invocations,allowed,concurrency,limit,set,to,if,this,concurrency,limit,0,boolean,debug,logger,is,debug,enabled,synchronized,this,monitor,boolean,interrupted,false,while,this,concurrency,count,this,concurrency,limit,if,interrupted,throw,new,illegal,state,exception,thread,was,interrupted,while,waiting,for,invocation,access,but,concurrency,limit,still,does,not,allow,for,entering,if,debug,logger,debug,concurrency,count,this,concurrency,count,has,reached,limit,this,concurrency,limit,blocking,try,this,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,interrupted,true,if,debug,logger,debug,entering,throttle,at,concurrency,count,this,concurrency,count,this,concurrency,count
ConcurrencyThrottleSupport -> protected void beforeAccess();1356735495;To be invoked before the main execution logic of concrete subclasses._<p>This implementation applies the concurrency throttle._@see #afterAccess();protected void beforeAccess() {_		if (this.concurrencyLimit == NO_CONCURRENCY) {_			throw new IllegalStateException(_					"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY")__		}_		if (this.concurrencyLimit > 0) {_			boolean debug = logger.isDebugEnabled()__			synchronized (this.monitor) {_				boolean interrupted = false__				while (this.concurrencyCount >= this.concurrencyLimit) {_					if (interrupted) {_						throw new IllegalStateException("Thread was interrupted while waiting for invocation access, " +_								"but concurrency limit still does not allow for entering")__					}_					if (debug) {_						logger.debug("Concurrency count " + this.concurrencyCount +_								" has reached limit " + this.concurrencyLimit + " - blocking")__					}_					try {_						this.monitor.wait()__					}_					catch (InterruptedException ex) {_						_						Thread.currentThread().interrupt()__						interrupted = true__					}_				}_				if (debug) {_					logger.debug("Entering throttle at concurrency count " + this.concurrencyCount)__				}_				this.concurrencyCount++__			}_		}_	};to,be,invoked,before,the,main,execution,logic,of,concrete,subclasses,p,this,implementation,applies,the,concurrency,throttle,see,after,access;protected,void,before,access,if,this,concurrency,limit,throw,new,illegal,state,exception,currently,no,invocations,allowed,concurrency,limit,set,to,if,this,concurrency,limit,0,boolean,debug,logger,is,debug,enabled,synchronized,this,monitor,boolean,interrupted,false,while,this,concurrency,count,this,concurrency,limit,if,interrupted,throw,new,illegal,state,exception,thread,was,interrupted,while,waiting,for,invocation,access,but,concurrency,limit,still,does,not,allow,for,entering,if,debug,logger,debug,concurrency,count,this,concurrency,count,has,reached,limit,this,concurrency,limit,blocking,try,this,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,interrupted,true,if,debug,logger,debug,entering,throttle,at,concurrency,count,this,concurrency,count,this,concurrency,count
ConcurrencyThrottleSupport -> protected void beforeAccess();1504266289;To be invoked before the main execution logic of concrete subclasses._<p>This implementation applies the concurrency throttle._@see #afterAccess();protected void beforeAccess() {_		if (this.concurrencyLimit == NO_CONCURRENCY) {_			throw new IllegalStateException(_					"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY")__		}_		if (this.concurrencyLimit > 0) {_			boolean debug = logger.isDebugEnabled()__			synchronized (this.monitor) {_				boolean interrupted = false__				while (this.concurrencyCount >= this.concurrencyLimit) {_					if (interrupted) {_						throw new IllegalStateException("Thread was interrupted while waiting for invocation access, " +_								"but concurrency limit still does not allow for entering")__					}_					if (debug) {_						logger.debug("Concurrency count " + this.concurrencyCount +_								" has reached limit " + this.concurrencyLimit + " - blocking")__					}_					try {_						this.monitor.wait()__					}_					catch (InterruptedException ex) {_						_						Thread.currentThread().interrupt()__						interrupted = true__					}_				}_				if (debug) {_					logger.debug("Entering throttle at concurrency count " + this.concurrencyCount)__				}_				this.concurrencyCount++__			}_		}_	};to,be,invoked,before,the,main,execution,logic,of,concrete,subclasses,p,this,implementation,applies,the,concurrency,throttle,see,after,access;protected,void,before,access,if,this,concurrency,limit,throw,new,illegal,state,exception,currently,no,invocations,allowed,concurrency,limit,set,to,if,this,concurrency,limit,0,boolean,debug,logger,is,debug,enabled,synchronized,this,monitor,boolean,interrupted,false,while,this,concurrency,count,this,concurrency,limit,if,interrupted,throw,new,illegal,state,exception,thread,was,interrupted,while,waiting,for,invocation,access,but,concurrency,limit,still,does,not,allow,for,entering,if,debug,logger,debug,concurrency,count,this,concurrency,count,has,reached,limit,this,concurrency,limit,blocking,try,this,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,interrupted,true,if,debug,logger,debug,entering,throttle,at,concurrency,count,this,concurrency,count,this,concurrency,count
ConcurrencyThrottleSupport -> protected void beforeAccess();1530174524;To be invoked before the main execution logic of concrete subclasses._<p>This implementation applies the concurrency throttle._@see #afterAccess();protected void beforeAccess() {_		if (this.concurrencyLimit == NO_CONCURRENCY) {_			throw new IllegalStateException(_					"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY")__		}_		if (this.concurrencyLimit > 0) {_			boolean debug = logger.isDebugEnabled()__			synchronized (this.monitor) {_				boolean interrupted = false__				while (this.concurrencyCount >= this.concurrencyLimit) {_					if (interrupted) {_						throw new IllegalStateException("Thread was interrupted while waiting for invocation access, " +_								"but concurrency limit still does not allow for entering")__					}_					if (debug) {_						logger.debug("Concurrency count " + this.concurrencyCount +_								" has reached limit " + this.concurrencyLimit + " - blocking")__					}_					try {_						this.monitor.wait()__					}_					catch (InterruptedException ex) {_						_						Thread.currentThread().interrupt()__						interrupted = true__					}_				}_				if (debug) {_					logger.debug("Entering throttle at concurrency count " + this.concurrencyCount)__				}_				this.concurrencyCount++__			}_		}_	};to,be,invoked,before,the,main,execution,logic,of,concrete,subclasses,p,this,implementation,applies,the,concurrency,throttle,see,after,access;protected,void,before,access,if,this,concurrency,limit,throw,new,illegal,state,exception,currently,no,invocations,allowed,concurrency,limit,set,to,if,this,concurrency,limit,0,boolean,debug,logger,is,debug,enabled,synchronized,this,monitor,boolean,interrupted,false,while,this,concurrency,count,this,concurrency,limit,if,interrupted,throw,new,illegal,state,exception,thread,was,interrupted,while,waiting,for,invocation,access,but,concurrency,limit,still,does,not,allow,for,entering,if,debug,logger,debug,concurrency,count,this,concurrency,count,has,reached,limit,this,concurrency,limit,blocking,try,this,monitor,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,interrupted,true,if,debug,logger,debug,entering,throttle,at,concurrency,count,this,concurrency,count,this,concurrency,count
