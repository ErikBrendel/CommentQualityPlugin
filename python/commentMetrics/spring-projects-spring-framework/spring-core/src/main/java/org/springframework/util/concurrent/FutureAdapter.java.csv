commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Returns the adaptee.  */ ;/**  * Returns the adaptee.  */ protected Future<S> getAdaptee() {     return this.adaptee. }
false;public;1;4;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     return this.adaptee.cancel(mayInterruptIfRunning). }
false;public;0;4;;@Override public boolean isCancelled() {     return this.adaptee.isCancelled(). }
false;public;0;4;;@Override public boolean isDone() {     return this.adaptee.isDone(). }
false;public;0;5;;@Override @Nullable public T get() throws InterruptedException, ExecutionException {     return adaptInternal(this.adaptee.get()). }
false;public;2;5;;@Override @Nullable public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {     return adaptInternal(this.adaptee.get(timeout, unit)). }
false;final;1;33;;@SuppressWarnings("unchecked") @Nullable final T adaptInternal(S adapteeResult) throws ExecutionException {     synchronized (this.mutex) {         switch(this.state) {             case SUCCESS:                 return (T) this.result.             case FAILURE:                 Assert.state(this.result instanceof ExecutionException, "Failure without exception").                 throw (ExecutionException) this.result.             case NEW:                 try {                     T adapted = adapt(adapteeResult).                     this.result = adapted.                     this.state = State.SUCCESS.                     return adapted.                 } catch (ExecutionException ex) {                     this.result = ex.                     this.state = State.FAILURE.                     throw ex.                 } catch (Throwable ex) {                     ExecutionException execEx = new ExecutionException(ex).                     this.result = execEx.                     this.state = State.FAILURE.                     throw execEx.                 }             default:                 throw new IllegalStateException().         }     } }
true;protected,abstract;1;2;/**  * Adapts the given adaptee's result into T.  * @return the adapted result  */ ;/**  * Adapts the given adaptee's result into T.  * @return the adapted result  */ @Nullable protected abstract T adapt(S adapteeResult) throws ExecutionException.
