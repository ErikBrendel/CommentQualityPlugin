# id;timestamp;commentText;codeText;commentWords;codeWords
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor cv);1366718246;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}._@param cv_the class visitor to which this visitor must delegate method_calls. May be null.;public ClassVisitor(final int api, final ClassVisitor cv) {_		_        this.api = api__        this.cv = cv__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,param,cv,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,cv,this,api,api,this,cv,cv
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor cv);1395273982;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param cv_the class visitor to which this visitor must delegate method_calls. May be null.;public ClassVisitor(final int api, final ClassVisitor cv) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.cv = cv__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,cv,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,cv,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,cv,cv
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor cv);1397644526;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param cv_the class visitor to which this visitor must delegate method_calls. May be null.;public ClassVisitor(final int api, final ClassVisitor cv) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.cv = cv__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,cv,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,cv,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,cv,cv
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor cv);1505821772;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}._@param cv_the class visitor to which this visitor must delegate method_calls. May be null.;public ClassVisitor(final int api, final ClassVisitor cv) {_        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.cv = cv__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6,param,cv,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,cv,if,api,opcodes,asm4,api,opcodes,asm6,throw,new,illegal,argument,exception,this,api,api,this,cv,cv
ClassVisitor -> public void visitOuterClass(String owner, String name, String desc);1366718246;Visits the enclosing class of the class. This method must be called only_if the class has an enclosing class.__@param owner_internal name of the enclosing class of the class._@param name_the name of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class._@param desc_the descriptor of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class.;public void visitOuterClass(String owner, String name, String desc) {_        if (cv != null) {_            cv.visitOuterClass(owner, name, desc)__        }_    };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,desc,the,descriptor,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,string,owner,string,name,string,desc,if,cv,null,cv,visit,outer,class,owner,name,desc
ClassVisitor -> public void visitOuterClass(String owner, String name, String desc);1395273982;Visits the enclosing class of the class. This method must be called only_if the class has an enclosing class.__@param owner_internal name of the enclosing class of the class._@param name_the name of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class._@param desc_the descriptor of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class.;public void visitOuterClass(String owner, String name, String desc) {_        if (cv != null) {_            cv.visitOuterClass(owner, name, desc)__        }_    };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,desc,the,descriptor,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,string,owner,string,name,string,desc,if,cv,null,cv,visit,outer,class,owner,name,desc
ClassVisitor -> public void visitOuterClass(String owner, String name, String desc);1397644526;Visits the enclosing class of the class. This method must be called only_if the class has an enclosing class.__@param owner_internal name of the enclosing class of the class._@param name_the name of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class._@param desc_the descriptor of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class.;public void visitOuterClass(String owner, String name, String desc) {_        if (cv != null) {_            cv.visitOuterClass(owner, name, desc)__        }_    };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,desc,the,descriptor,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,string,owner,string,name,string,desc,if,cv,null,cv,visit,outer,class,owner,name,desc
ClassVisitor -> public void visitOuterClass(String owner, String name, String desc);1505821772;Visits the enclosing class of the class. This method must be called only_if the class has an enclosing class.__@param owner_internal name of the enclosing class of the class._@param name_the name of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class._@param desc_the descriptor of the method that contains the class, or_<tt>null</tt> if the class is not enclosed in a method of its_enclosing class.;public void visitOuterClass(String owner, String name, String desc) {_        if (cv != null) {_            cv.visitOuterClass(owner, name, desc)__        }_    };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,desc,the,descriptor,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,string,owner,string,name,string,desc,if,cv,null,cv,visit,outer,class,owner,name,desc
ClassVisitor -> public ClassVisitor(final int api);1366718246;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}.;public ClassVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public ClassVisitor(final int api);1395273982;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public ClassVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public ClassVisitor(final int api);1397644526;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public ClassVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public ClassVisitor(final int api);1505821772;Constructs a new {@link ClassVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}.;public ClassVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public ClassVisitor(final int api);1531241461;Constructs a new {@link ClassVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}.;public ClassVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public ClassVisitor(final int api);1536664245;Constructs a new {@link ClassVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.;public ClassVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7;public,class,visitor,final,int,api,this,api,null
ClassVisitor -> public void visitSource(String source, String debug);1366718246;Visits the source of the class.__@param source_the name of the source file from which the class was compiled._May be <tt>null</tt>._@param debug_additional debug information to compute the correspondance_between source and compiled elements of the class. May be_<tt>null</tt>.;public void visitSource(String source, String debug) {_        if (cv != null) {_            cv.visitSource(source, debug)__        }_    };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,tt,null,tt,param,debug,additional,debug,information,to,compute,the,correspondance,between,source,and,compiled,elements,of,the,class,may,be,tt,null,tt;public,void,visit,source,string,source,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public void visitSource(String source, String debug);1395273982;Visits the source of the class.__@param source_the name of the source file from which the class was compiled._May be <tt>null</tt>._@param debug_additional debug information to compute the correspondance_between source and compiled elements of the class. May be_<tt>null</tt>.;public void visitSource(String source, String debug) {_        if (cv != null) {_            cv.visitSource(source, debug)__        }_    };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,tt,null,tt,param,debug,additional,debug,information,to,compute,the,correspondance,between,source,and,compiled,elements,of,the,class,may,be,tt,null,tt;public,void,visit,source,string,source,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public void visitSource(String source, String debug);1397644526;Visits the source of the class.__@param source_the name of the source file from which the class was compiled._May be <tt>null</tt>._@param debug_additional debug information to compute the correspondance_between source and compiled elements of the class. May be_<tt>null</tt>.;public void visitSource(String source, String debug) {_        if (cv != null) {_            cv.visitSource(source, debug)__        }_    };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,tt,null,tt,param,debug,additional,debug,information,to,compute,the,correspondance,between,source,and,compiled,elements,of,the,class,may,be,tt,null,tt;public,void,visit,source,string,source,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public void visitSource(String source, String debug);1505821772;Visits the source of the class.__@param source_the name of the source file from which the class was compiled._May be <tt>null</tt>._@param debug_additional debug information to compute the correspondance_between source and compiled elements of the class. May be_<tt>null</tt>.;public void visitSource(String source, String debug) {_        if (cv != null) {_            cv.visitSource(source, debug)__        }_    };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,tt,null,tt,param,debug,additional,debug,information,to,compute,the,correspondance,between,source,and,compiled,elements,of,the,class,may,be,tt,null,tt;public,void,visit,source,string,source,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1366718246;Visits an annotation of the class.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (cv != null) {_            return cv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,the,class,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,cv,null,return,cv,visit,annotation,desc,visible,return,null
ClassVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1395273982;Visits an annotation of the class.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (cv != null) {_            return cv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,the,class,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,cv,null,return,cv,visit,annotation,desc,visible,return,null
ClassVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1397644526;Visits an annotation of the class.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (cv != null) {_            return cv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,the,class,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,cv,null,return,cv,visit,annotation,desc,visible,return,null
ClassVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1505821772;Visits an annotation of the class.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (cv != null) {_            return cv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,the,class,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,cv,null,return,cv,visit,annotation,desc,visible,return,null
ClassVisitor -> public MethodVisitor visitMethod(int access, String name, String desc,             String signature, String[] exceptions);1366718246;Visits a method of the class. This method <i>must</i> return a new_{@link MethodVisitor} instance (or <tt>null</tt>) each time it is called,_i.e., it should not return a previously returned visitor.__@param access_the method's access flags (see {@link Opcodes}). This_parameter also indicates if the method is synthetic and/or_deprecated._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param signature_the method's signature. May be <tt>null</tt> if the method_parameters, return type and exceptions do not use generic_types._@param exceptions_the internal names of the method's exception classes (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>._@return an object to visit the byte code of the method, or <tt>null</tt>_if this class visitor is not interested in visiting the code of_this method.;public MethodVisitor visitMethod(int access, String name, String desc,_            String signature, String[] exceptions) {_        if (cv != null) {_            return cv.visitMethod(access, name, desc, signature, exceptions)__        }_        return null__    };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,tt,null,tt,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,signature,the,method,s,signature,may,be,tt,null,tt,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,return,an,object,to,visit,the,byte,code,of,the,method,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,int,access,string,name,string,desc,string,signature,string,exceptions,if,cv,null,return,cv,visit,method,access,name,desc,signature,exceptions,return,null
ClassVisitor -> public MethodVisitor visitMethod(int access, String name, String desc,             String signature, String[] exceptions);1395273982;Visits a method of the class. This method <i>must</i> return a new_{@link MethodVisitor} instance (or <tt>null</tt>) each time it is called,_i.e., it should not return a previously returned visitor.__@param access_the method's access flags (see {@link Opcodes}). This_parameter also indicates if the method is synthetic and/or_deprecated._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param signature_the method's signature. May be <tt>null</tt> if the method_parameters, return type and exceptions do not use generic_types._@param exceptions_the internal names of the method's exception classes (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>._@return an object to visit the byte code of the method, or <tt>null</tt>_if this class visitor is not interested in visiting the code of_this method.;public MethodVisitor visitMethod(int access, String name, String desc,_            String signature, String[] exceptions) {_        if (cv != null) {_            return cv.visitMethod(access, name, desc, signature, exceptions)__        }_        return null__    };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,tt,null,tt,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,signature,the,method,s,signature,may,be,tt,null,tt,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,return,an,object,to,visit,the,byte,code,of,the,method,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,int,access,string,name,string,desc,string,signature,string,exceptions,if,cv,null,return,cv,visit,method,access,name,desc,signature,exceptions,return,null
ClassVisitor -> public MethodVisitor visitMethod(int access, String name, String desc,             String signature, String[] exceptions);1397644526;Visits a method of the class. This method <i>must</i> return a new_{@link MethodVisitor} instance (or <tt>null</tt>) each time it is called,_i.e., it should not return a previously returned visitor.__@param access_the method's access flags (see {@link Opcodes}). This_parameter also indicates if the method is synthetic and/or_deprecated._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param signature_the method's signature. May be <tt>null</tt> if the method_parameters, return type and exceptions do not use generic_types._@param exceptions_the internal names of the method's exception classes (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>._@return an object to visit the byte code of the method, or <tt>null</tt>_if this class visitor is not interested in visiting the code of_this method.;public MethodVisitor visitMethod(int access, String name, String desc,_            String signature, String[] exceptions) {_        if (cv != null) {_            return cv.visitMethod(access, name, desc, signature, exceptions)__        }_        return null__    };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,tt,null,tt,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,signature,the,method,s,signature,may,be,tt,null,tt,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,return,an,object,to,visit,the,byte,code,of,the,method,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,int,access,string,name,string,desc,string,signature,string,exceptions,if,cv,null,return,cv,visit,method,access,name,desc,signature,exceptions,return,null
ClassVisitor -> public MethodVisitor visitMethod(int access, String name, String desc,             String signature, String[] exceptions);1505821772;Visits a method of the class. This method <i>must</i> return a new_{@link MethodVisitor} instance (or <tt>null</tt>) each time it is called,_i.e., it should not return a previously returned visitor.__@param access_the method's access flags (see {@link Opcodes}). This_parameter also indicates if the method is synthetic and/or_deprecated._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param signature_the method's signature. May be <tt>null</tt> if the method_parameters, return type and exceptions do not use generic_types._@param exceptions_the internal names of the method's exception classes (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>._@return an object to visit the byte code of the method, or <tt>null</tt>_if this class visitor is not interested in visiting the code of_this method.;public MethodVisitor visitMethod(int access, String name, String desc,_            String signature, String[] exceptions) {_        if (cv != null) {_            return cv.visitMethod(access, name, desc, signature, exceptions)__        }_        return null__    };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,tt,null,tt,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,signature,the,method,s,signature,may,be,tt,null,tt,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,return,an,object,to,visit,the,byte,code,of,the,method,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,int,access,string,name,string,desc,string,signature,string,exceptions,if,cv,null,return,cv,visit,method,access,name,desc,signature,exceptions,return,null
ClassVisitor -> public void visitSource(final String source, final String debug);1531241461;Visits the source of the class.__@param source the name of the source file from which the class was compiled. May be_<tt>null</tt>._@param debug additional debug information to compute the correspondence between source and_compiled elements of the class. May be <tt>null</tt>.;public void visitSource(final String source, final String debug) {_    if (cv != null) {_      cv.visitSource(source, debug)__    }_  };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,tt,null,tt,param,debug,additional,debug,information,to,compute,the,correspondence,between,source,and,compiled,elements,of,the,class,may,be,tt,null,tt;public,void,visit,source,final,string,source,final,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public void visitSource(final String source, final String debug);1536664245;Visits the source of the class.__@param source the name of the source file from which the class was compiled. May be {@literal_null}._@param debug additional debug information to compute the correspondence between source and_compiled elements of the class. May be {@literal null}.;public void visitSource(final String source, final String debug) {_    if (cv != null) {_      cv.visitSource(source, debug)__    }_  };visits,the,source,of,the,class,param,source,the,name,of,the,source,file,from,which,the,class,was,compiled,may,be,literal,null,param,debug,additional,debug,information,to,compute,the,correspondence,between,source,and,compiled,elements,of,the,class,may,be,literal,null;public,void,visit,source,final,string,source,final,string,debug,if,cv,null,cv,visit,source,source,debug
ClassVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1395273982;Visits an annotation on a type in the class signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#CLASS_TYPE_PARAMETER_CLASS_TYPE_PARAMETER},_{@link TypeReference#CLASS_TYPE_PARAMETER_BOUND_CLASS_TYPE_PARAMETER_BOUND} or_{@link TypeReference#CLASS_EXTENDS CLASS_EXTENDS}. See_{@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (cv != null) {_            return cv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,class,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,api,opcodes,asm5,throw,new,runtime,exception,if,cv,null,return,cv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
ClassVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1397644526;Visits an annotation on a type in the class signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#CLASS_TYPE_PARAMETER_CLASS_TYPE_PARAMETER},_{@link TypeReference#CLASS_TYPE_PARAMETER_BOUND_CLASS_TYPE_PARAMETER_BOUND} or_{@link TypeReference#CLASS_EXTENDS CLASS_EXTENDS}. See_{@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (cv != null) {_            return cv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,class,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,cv,null,return,cv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
ClassVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1505821772;Visits an annotation on a type in the class signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#CLASS_TYPE_PARAMETER_CLASS_TYPE_PARAMETER},_{@link TypeReference#CLASS_TYPE_PARAMETER_BOUND_CLASS_TYPE_PARAMETER_BOUND} or_{@link TypeReference#CLASS_EXTENDS CLASS_EXTENDS}. See_{@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (cv != null) {_            return cv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,class,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,cv,null,return,cv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
ClassVisitor -> public void visitOuterClass(final String owner, final String name, final String descriptor);1531241461;Visits the enclosing class of the class. This method must be called only if the class has an_enclosing class.__@param owner internal name of the enclosing class of the class._@param name the name of the method that contains the class, or <tt>null</tt> if the class is_not enclosed in a method of its enclosing class._@param descriptor the descriptor of the method that contains the class, or <tt>null</tt> if the_class is not enclosed in a method of its enclosing class.;public void visitOuterClass(final String owner, final String name, final String descriptor) {_    if (cv != null) {_      cv.visitOuterClass(owner, name, descriptor)__    }_  };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,descriptor,the,descriptor,of,the,method,that,contains,the,class,or,tt,null,tt,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,final,string,owner,final,string,name,final,string,descriptor,if,cv,null,cv,visit,outer,class,owner,name,descriptor
ClassVisitor -> public void visitOuterClass(final String owner, final String name, final String descriptor);1536664245;Visits the enclosing class of the class. This method must be called only if the class has an_enclosing class.__@param owner internal name of the enclosing class of the class._@param name the name of the method that contains the class, or {@literal null} if the class is_not enclosed in a method of its enclosing class._@param descriptor the descriptor of the method that contains the class, or {@literal null} if_the class is not enclosed in a method of its enclosing class.;public void visitOuterClass(final String owner, final String name, final String descriptor) {_    if (cv != null) {_      cv.visitOuterClass(owner, name, descriptor)__    }_  };visits,the,enclosing,class,of,the,class,this,method,must,be,called,only,if,the,class,has,an,enclosing,class,param,owner,internal,name,of,the,enclosing,class,of,the,class,param,name,the,name,of,the,method,that,contains,the,class,or,literal,null,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class,param,descriptor,the,descriptor,of,the,method,that,contains,the,class,or,literal,null,if,the,class,is,not,enclosed,in,a,method,of,its,enclosing,class;public,void,visit,outer,class,final,string,owner,final,string,name,final,string,descriptor,if,cv,null,cv,visit,outer,class,owner,name,descriptor
ClassVisitor -> public MethodVisitor visitMethod(       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions);1531241461;Visits a method of the class. This method <i>must</i> return a new {@link MethodVisitor}_instance (or <tt>null</tt>) each time it is called, i.e., it should not return a previously_returned visitor.__@param access the method's access flags (see {@link Opcodes}). This parameter also indicates if_the method is synthetic and/or deprecated._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be <tt>null</tt> if the method parameters, return_type and exceptions do not use generic types._@param exceptions the internal names of the method's exception classes (see {@link_Type#getInternalName()}). May be <tt>null</tt>._@return an object to visit the byte code of the method, or <tt>null</tt> if this class visitor_is not interested in visiting the code of this method.;public MethodVisitor visitMethod(_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions) {_    if (cv != null) {_      return cv.visitMethod(access, name, descriptor, signature, exceptions)__    }_    return null__  };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,tt,null,tt,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,tt,null,tt,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,may,be,tt,null,tt,return,an,object,to,visit,the,byte,code,of,the,method,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,if,cv,null,return,cv,visit,method,access,name,descriptor,signature,exceptions,return,null
ClassVisitor -> public MethodVisitor visitMethod(       final int access,       final String name,       final String descriptor,       final String signature,       final String[] exceptions);1536664245;Visits a method of the class. This method <i>must</i> return a new {@link MethodVisitor}_instance (or {@literal null}) each time it is called, i.e., it should not return a previously_returned visitor.__@param access the method's access flags (see {@link Opcodes}). This parameter also indicates if_the method is synthetic and/or deprecated._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param signature the method's signature. May be {@literal null} if the method parameters,_return type and exceptions do not use generic types._@param exceptions the internal names of the method's exception classes (see {@link_Type#getInternalName()}). May be {@literal null}._@return an object to visit the byte code of the method, or {@literal null} if this class_visitor is not interested in visiting the code of this method.;public MethodVisitor visitMethod(_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final String[] exceptions) {_    if (cv != null) {_      return cv.visitMethod(access, name, descriptor, signature, exceptions)__    }_    return null__  };visits,a,method,of,the,class,this,method,i,must,i,return,a,new,link,method,visitor,instance,or,literal,null,each,time,it,is,called,i,e,it,should,not,return,a,previously,returned,visitor,param,access,the,method,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,method,is,synthetic,and,or,deprecated,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,signature,the,method,s,signature,may,be,literal,null,if,the,method,parameters,return,type,and,exceptions,do,not,use,generic,types,param,exceptions,the,internal,names,of,the,method,s,exception,classes,see,link,type,get,internal,name,may,be,literal,null,return,an,object,to,visit,the,byte,code,of,the,method,or,literal,null,if,this,class,visitor,is,not,interested,in,visiting,the,code,of,this,method;public,method,visitor,visit,method,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,string,exceptions,if,cv,null,return,cv,visit,method,access,name,descriptor,signature,exceptions,return,null
ClassVisitor -> public void visitEnd();1366718246;Visits the end of the class. This method, which is the last one to be_called, is used to inform the visitor that all the fields and methods of_the class have been visited.;public void visitEnd() {_        if (cv != null) {_            cv.visitEnd()__        }_    };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitEnd();1395273982;Visits the end of the class. This method, which is the last one to be_called, is used to inform the visitor that all the fields and methods of_the class have been visited.;public void visitEnd() {_        if (cv != null) {_            cv.visitEnd()__        }_    };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitEnd();1397644526;Visits the end of the class. This method, which is the last one to be_called, is used to inform the visitor that all the fields and methods of_the class have been visited.;public void visitEnd() {_        if (cv != null) {_            cv.visitEnd()__        }_    };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitEnd();1505821772;Visits the end of the class. This method, which is the last one to be_called, is used to inform the visitor that all the fields and methods of_the class have been visited.;public void visitEnd() {_        if (cv != null) {_            cv.visitEnd()__        }_    };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitEnd();1531241461;Visits the end of the class. This method, which is the last one to be called, is used to inform_the visitor that all the fields and methods of the class have been visited.;public void visitEnd() {_    if (cv != null) {_      cv.visitEnd()__    }_  };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitEnd();1536664245;Visits the end of the class. This method, which is the last one to be called, is used to inform_the visitor that all the fields and methods of the class have been visited.;public void visitEnd() {_    if (cv != null) {_      cv.visitEnd()__    }_  };visits,the,end,of,the,class,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,fields,and,methods,of,the,class,have,been,visited;public,void,visit,end,if,cv,null,cv,visit,end
ClassVisitor -> public void visitInnerClass(String name, String outerName,             String innerName, int access);1366718246;Visits information about an inner class. This inner class is not_necessarily a member of the class being visited.__@param name_the internal name of an inner class (see_{@link Type#getInternalName() getInternalName})._@param outerName_the internal name of the class to which the inner class_belongs (see {@link Type#getInternalName() getInternalName})._May be <tt>null</tt> for not member classes._@param innerName_the (simple) name of the inner class inside its enclosing_class. May be <tt>null</tt> for anonymous inner classes._@param access_the access flags of the inner class as originally declared in_the enclosing class.;public void visitInnerClass(String name, String outerName,_            String innerName, int access) {_        if (cv != null) {_            cv.visitInnerClass(name, outerName, innerName, access)__        }_    };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,tt,null,tt,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,string,name,string,outer,name,string,inner,name,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public void visitInnerClass(String name, String outerName,             String innerName, int access);1395273982;Visits information about an inner class. This inner class is not_necessarily a member of the class being visited.__@param name_the internal name of an inner class (see_{@link Type#getInternalName() getInternalName})._@param outerName_the internal name of the class to which the inner class_belongs (see {@link Type#getInternalName() getInternalName})._May be <tt>null</tt> for not member classes._@param innerName_the (simple) name of the inner class inside its enclosing_class. May be <tt>null</tt> for anonymous inner classes._@param access_the access flags of the inner class as originally declared in_the enclosing class.;public void visitInnerClass(String name, String outerName,_            String innerName, int access) {_        if (cv != null) {_            cv.visitInnerClass(name, outerName, innerName, access)__        }_    };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,tt,null,tt,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,string,name,string,outer,name,string,inner,name,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public void visitInnerClass(String name, String outerName,             String innerName, int access);1397644526;Visits information about an inner class. This inner class is not_necessarily a member of the class being visited.__@param name_the internal name of an inner class (see_{@link Type#getInternalName() getInternalName})._@param outerName_the internal name of the class to which the inner class_belongs (see {@link Type#getInternalName() getInternalName})._May be <tt>null</tt> for not member classes._@param innerName_the (simple) name of the inner class inside its enclosing_class. May be <tt>null</tt> for anonymous inner classes._@param access_the access flags of the inner class as originally declared in_the enclosing class.;public void visitInnerClass(String name, String outerName,_            String innerName, int access) {_        if (cv != null) {_            cv.visitInnerClass(name, outerName, innerName, access)__        }_    };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,tt,null,tt,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,string,name,string,outer,name,string,inner,name,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public void visitInnerClass(String name, String outerName,             String innerName, int access);1505821772;Visits information about an inner class. This inner class is not_necessarily a member of the class being visited.__@param name_the internal name of an inner class (see_{@link Type#getInternalName() getInternalName})._@param outerName_the internal name of the class to which the inner class_belongs (see {@link Type#getInternalName() getInternalName})._May be <tt>null</tt> for not member classes._@param innerName_the (simple) name of the inner class inside its enclosing_class. May be <tt>null</tt> for anonymous inner classes._@param access_the access flags of the inner class as originally declared in_the enclosing class.;public void visitInnerClass(String name, String outerName,_            String innerName, int access) {_        if (cv != null) {_            cv.visitInnerClass(name, outerName, innerName, access)__        }_    };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,tt,null,tt,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,string,name,string,outer,name,string,inner,name,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public void visitAttribute(final Attribute attribute);1531241461;Visits a non standard attribute of the class.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (cv != null) {_      cv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,the,class,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,cv,null,cv,visit,attribute,attribute
ClassVisitor -> public void visitAttribute(final Attribute attribute);1536664245;Visits a non standard attribute of the class.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (cv != null) {_      cv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,the,class,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,cv,null,cv,visit,attribute,attribute
ClassVisitor -> public void visitAttribute(Attribute attr);1366718246;Visits a non standard attribute of the class.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (cv != null) {_            cv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,the,class,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,cv,null,cv,visit,attribute,attr
ClassVisitor -> public void visitAttribute(Attribute attr);1395273982;Visits a non standard attribute of the class.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (cv != null) {_            cv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,the,class,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,cv,null,cv,visit,attribute,attr
ClassVisitor -> public void visitAttribute(Attribute attr);1397644526;Visits a non standard attribute of the class.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (cv != null) {_            cv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,the,class,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,cv,null,cv,visit,attribute,attr
ClassVisitor -> public void visitAttribute(Attribute attr);1505821772;Visits a non standard attribute of the class.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (cv != null) {_            cv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,the,class,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,cv,null,cv,visit,attribute,attr
ClassVisitor -> public FieldVisitor visitField(int access, String name, String desc,             String signature, Object value);1366718246;Visits a field of the class.__@param access_the field's access flags (see {@link Opcodes}). This parameter_also indicates if the field is synthetic and/or deprecated._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type})._@param signature_the field's signature. May be <tt>null</tt> if the field's_type does not use generic types._@param value_the field's initial value. This parameter, which may be_<tt>null</tt> if the field does not have an initial value,_must be an {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double} or a {@link String} (for <tt>int</tt>,_<tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields_respectively). <i>This parameter is only used for static_fields</i>. Its value is ignored for non static fields, which_must be initialized through bytecode instructions in_constructors or methods._@return a visitor to visit field annotations and attributes, or_<tt>null</tt> if this class visitor is not interested in visiting_these annotations and attributes.;public FieldVisitor visitField(int access, String name, String desc,_            String signature, Object value) {_        if (cv != null) {_            return cv.visitField(access, name, desc, signature, value)__        }_        return null__    };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type,param,signature,the,field,s,signature,may,be,tt,null,tt,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,tt,null,tt,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,tt,int,tt,tt,float,tt,tt,long,tt,or,tt,string,tt,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,int,access,string,name,string,desc,string,signature,object,value,if,cv,null,return,cv,visit,field,access,name,desc,signature,value,return,null
ClassVisitor -> public FieldVisitor visitField(int access, String name, String desc,             String signature, Object value);1395273982;Visits a field of the class.__@param access_the field's access flags (see {@link Opcodes}). This parameter_also indicates if the field is synthetic and/or deprecated._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type})._@param signature_the field's signature. May be <tt>null</tt> if the field's_type does not use generic types._@param value_the field's initial value. This parameter, which may be_<tt>null</tt> if the field does not have an initial value,_must be an {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double} or a {@link String} (for <tt>int</tt>,_<tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields_respectively). <i>This parameter is only used for static_fields</i>. Its value is ignored for non static fields, which_must be initialized through bytecode instructions in_constructors or methods._@return a visitor to visit field annotations and attributes, or_<tt>null</tt> if this class visitor is not interested in visiting_these annotations and attributes.;public FieldVisitor visitField(int access, String name, String desc,_            String signature, Object value) {_        if (cv != null) {_            return cv.visitField(access, name, desc, signature, value)__        }_        return null__    };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type,param,signature,the,field,s,signature,may,be,tt,null,tt,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,tt,null,tt,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,tt,int,tt,tt,float,tt,tt,long,tt,or,tt,string,tt,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,int,access,string,name,string,desc,string,signature,object,value,if,cv,null,return,cv,visit,field,access,name,desc,signature,value,return,null
ClassVisitor -> public FieldVisitor visitField(int access, String name, String desc,             String signature, Object value);1397644526;Visits a field of the class.__@param access_the field's access flags (see {@link Opcodes}). This parameter_also indicates if the field is synthetic and/or deprecated._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type})._@param signature_the field's signature. May be <tt>null</tt> if the field's_type does not use generic types._@param value_the field's initial value. This parameter, which may be_<tt>null</tt> if the field does not have an initial value,_must be an {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double} or a {@link String} (for <tt>int</tt>,_<tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields_respectively). <i>This parameter is only used for static_fields</i>. Its value is ignored for non static fields, which_must be initialized through bytecode instructions in_constructors or methods._@return a visitor to visit field annotations and attributes, or_<tt>null</tt> if this class visitor is not interested in visiting_these annotations and attributes.;public FieldVisitor visitField(int access, String name, String desc,_            String signature, Object value) {_        if (cv != null) {_            return cv.visitField(access, name, desc, signature, value)__        }_        return null__    };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type,param,signature,the,field,s,signature,may,be,tt,null,tt,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,tt,null,tt,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,tt,int,tt,tt,float,tt,tt,long,tt,or,tt,string,tt,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,int,access,string,name,string,desc,string,signature,object,value,if,cv,null,return,cv,visit,field,access,name,desc,signature,value,return,null
ClassVisitor -> public FieldVisitor visitField(int access, String name, String desc,             String signature, Object value);1505821772;Visits a field of the class.__@param access_the field's access flags (see {@link Opcodes}). This parameter_also indicates if the field is synthetic and/or deprecated._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type})._@param signature_the field's signature. May be <tt>null</tt> if the field's_type does not use generic types._@param value_the field's initial value. This parameter, which may be_<tt>null</tt> if the field does not have an initial value,_must be an {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double} or a {@link String} (for <tt>int</tt>,_<tt>float</tt>, <tt>long</tt> or <tt>String</tt> fields_respectively). <i>This parameter is only used for static_fields</i>. Its value is ignored for non static fields, which_must be initialized through bytecode instructions in_constructors or methods._@return a visitor to visit field annotations and attributes, or_<tt>null</tt> if this class visitor is not interested in visiting_these annotations and attributes.;public FieldVisitor visitField(int access, String name, String desc,_            String signature, Object value) {_        if (cv != null) {_            return cv.visitField(access, name, desc, signature, value)__        }_        return null__    };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type,param,signature,the,field,s,signature,may,be,tt,null,tt,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,tt,null,tt,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,tt,int,tt,tt,float,tt,tt,long,tt,or,tt,string,tt,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,int,access,string,name,string,desc,string,signature,object,value,if,cv,null,return,cv,visit,field,access,name,desc,signature,value,return,null
ClassVisitor -> public void visitInnerClass(       final String name, final String outerName, final String innerName, final int access);1531241461;Visits information about an inner class. This inner class is not necessarily a member of the_class being visited.__@param name the internal name of an inner class (see {@link Type#getInternalName()})._@param outerName the internal name of the class to which the inner class belongs (see {@link_Type#getInternalName()}). May be <tt>null</tt> for not member classes._@param innerName the (simple) name of the inner class inside its enclosing class. May be_<tt>null</tt> for anonymous inner classes._@param access the access flags of the inner class as originally declared in the enclosing_class.;public void visitInnerClass(_      final String name, final String outerName, final String innerName, final int access) {_    if (cv != null) {_      cv.visitInnerClass(name, outerName, innerName, access)__    }_  };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,may,be,tt,null,tt,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,tt,null,tt,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,final,string,name,final,string,outer,name,final,string,inner,name,final,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public void visitInnerClass(       final String name, final String outerName, final String innerName, final int access);1536664245;Visits information about an inner class. This inner class is not necessarily a member of the_class being visited.__@param name the internal name of an inner class (see {@link Type#getInternalName()})._@param outerName the internal name of the class to which the inner class belongs (see {@link_Type#getInternalName()}). May be {@literal null} for not member classes._@param innerName the (simple) name of the inner class inside its enclosing class. May be_{@literal null} for anonymous inner classes._@param access the access flags of the inner class as originally declared in the enclosing_class.;public void visitInnerClass(_      final String name, final String outerName, final String innerName, final int access) {_    if (cv != null) {_      cv.visitInnerClass(name, outerName, innerName, access)__    }_  };visits,information,about,an,inner,class,this,inner,class,is,not,necessarily,a,member,of,the,class,being,visited,param,name,the,internal,name,of,an,inner,class,see,link,type,get,internal,name,param,outer,name,the,internal,name,of,the,class,to,which,the,inner,class,belongs,see,link,type,get,internal,name,may,be,literal,null,for,not,member,classes,param,inner,name,the,simple,name,of,the,inner,class,inside,its,enclosing,class,may,be,literal,null,for,anonymous,inner,classes,param,access,the,access,flags,of,the,inner,class,as,originally,declared,in,the,enclosing,class;public,void,visit,inner,class,final,string,name,final,string,outer,name,final,string,inner,name,final,int,access,if,cv,null,cv,visit,inner,class,name,outer,name,inner,name,access
ClassVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1531241461;Visits an annotation of the class.__@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (cv != null) {_      return cv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,the,class,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,cv,null,return,cv,visit,annotation,descriptor,visible,return,null
ClassVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1536664245;Visits an annotation of the class.__@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (cv != null) {_      return cv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,the,class,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,cv,null,return,cv,visit,annotation,descriptor,visible,return,null
ClassVisitor -> public void visit(int version, int access, String name, String signature,             String superName, String[] interfaces);1366718246;Visits the header of the class.__@param version_the class version._@param access_the class's access flags (see {@link Opcodes}). This parameter_also indicates if the class is deprecated._@param name_the internal name of the class (see_{@link Type#getInternalName() getInternalName})._@param signature_the signature of this class. May be <tt>null</tt> if the class_is not a generic one, and does not extend or implement generic_classes or interfaces._@param superName_the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For_interfaces, the super class is {@link Object}. May be_<tt>null</tt>, but only for the {@link Object} class._@param interfaces_the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>.;public void visit(int version, int access, String name, String signature,_            String superName, String[] interfaces) {_        if (cv != null) {_            cv.visit(version, access, name, signature, superName, interfaces)__        }_    };visits,the,header,of,the,class,param,version,the,class,version,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,param,signature,the,signature,of,this,class,may,be,tt,null,tt,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,tt,null,tt,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt;public,void,visit,int,version,int,access,string,name,string,signature,string,super,name,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public void visit(int version, int access, String name, String signature,             String superName, String[] interfaces);1395273982;Visits the header of the class.__@param version_the class version._@param access_the class's access flags (see {@link Opcodes}). This parameter_also indicates if the class is deprecated._@param name_the internal name of the class (see_{@link Type#getInternalName() getInternalName})._@param signature_the signature of this class. May be <tt>null</tt> if the class_is not a generic one, and does not extend or implement generic_classes or interfaces._@param superName_the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For_interfaces, the super class is {@link Object}. May be_<tt>null</tt>, but only for the {@link Object} class._@param interfaces_the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>.;public void visit(int version, int access, String name, String signature,_            String superName, String[] interfaces) {_        if (cv != null) {_            cv.visit(version, access, name, signature, superName, interfaces)__        }_    };visits,the,header,of,the,class,param,version,the,class,version,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,param,signature,the,signature,of,this,class,may,be,tt,null,tt,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,tt,null,tt,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt;public,void,visit,int,version,int,access,string,name,string,signature,string,super,name,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public void visit(int version, int access, String name, String signature,             String superName, String[] interfaces);1397644526;Visits the header of the class.__@param version_the class version._@param access_the class's access flags (see {@link Opcodes}). This parameter_also indicates if the class is deprecated._@param name_the internal name of the class (see_{@link Type#getInternalName() getInternalName})._@param signature_the signature of this class. May be <tt>null</tt> if the class_is not a generic one, and does not extend or implement generic_classes or interfaces._@param superName_the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For_interfaces, the super class is {@link Object}. May be_<tt>null</tt>, but only for the {@link Object} class._@param interfaces_the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>.;public void visit(int version, int access, String name, String signature,_            String superName, String[] interfaces) {_        if (cv != null) {_            cv.visit(version, access, name, signature, superName, interfaces)__        }_    };visits,the,header,of,the,class,param,version,the,class,version,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,param,signature,the,signature,of,this,class,may,be,tt,null,tt,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,tt,null,tt,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt;public,void,visit,int,version,int,access,string,name,string,signature,string,super,name,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public void visit(int version, int access, String name, String signature,             String superName, String[] interfaces);1505821772;Visits the header of the class.__@param version_the class version._@param access_the class's access flags (see {@link Opcodes}). This parameter_also indicates if the class is deprecated._@param name_the internal name of the class (see_{@link Type#getInternalName() getInternalName})._@param signature_the signature of this class. May be <tt>null</tt> if the class_is not a generic one, and does not extend or implement generic_classes or interfaces._@param superName_the internal of name of the super class (see_{@link Type#getInternalName() getInternalName}). For_interfaces, the super class is {@link Object}. May be_<tt>null</tt>, but only for the {@link Object} class._@param interfaces_the internal names of the class's interfaces (see_{@link Type#getInternalName() getInternalName}). May be_<tt>null</tt>.;public void visit(int version, int access, String name, String signature,_            String superName, String[] interfaces) {_        if (cv != null) {_            cv.visit(version, access, name, signature, superName, interfaces)__        }_    };visits,the,header,of,the,class,param,version,the,class,version,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,get,internal,name,param,signature,the,signature,of,this,class,may,be,tt,null,tt,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,tt,null,tt,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,get,internal,name,may,be,tt,null,tt;public,void,visit,int,version,int,access,string,name,string,signature,string,super,name,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public ModuleVisitor visitModule(final String name, final int access, final String version);1531241461;Visit the module corresponding to the class.__@param name the fully qualified name (using dots) of the module._@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code_ACC_MANDATED}._@param version the module version, or <tt>null</tt>._@return a visitor to visit the module values, or <tt>null</tt> if this visitor is not_interested in visiting this module.;public ModuleVisitor visitModule(final String name, final int access, final String version) {_    if (api < Opcodes.ASM6) {_      throw new UnsupportedOperationException()__    }_    if (cv != null) {_      return cv.visitModule(name, access, version)__    }_    return null__  };visit,the,module,corresponding,to,the,class,param,name,the,fully,qualified,name,using,dots,of,the,module,param,access,the,module,access,flags,among,code,code,and,code,param,version,the,module,version,or,tt,null,tt,return,a,visitor,to,visit,the,module,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,module;public,module,visitor,visit,module,final,string,name,final,int,access,final,string,version,if,api,opcodes,asm6,throw,new,unsupported,operation,exception,if,cv,null,return,cv,visit,module,name,access,version,return,null
ClassVisitor -> public ModuleVisitor visitModule(final String name, final int access, final String version);1536664245;Visit the module corresponding to the class.__@param name the fully qualified name (using dots) of the module._@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code_ACC_MANDATED}._@param version the module version, or {@literal null}._@return a visitor to visit the module values, or {@literal null} if this visitor is not_interested in visiting this module.;public ModuleVisitor visitModule(final String name, final int access, final String version) {_    if (api < Opcodes.ASM6) {_      throw new UnsupportedOperationException("This feature requires ASM6")__    }_    if (cv != null) {_      return cv.visitModule(name, access, version)__    }_    return null__  };visit,the,module,corresponding,to,the,class,param,name,the,fully,qualified,name,using,dots,of,the,module,param,access,the,module,access,flags,among,code,code,and,code,param,version,the,module,version,or,literal,null,return,a,visitor,to,visit,the,module,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,module;public,module,visitor,visit,module,final,string,name,final,int,access,final,string,version,if,api,opcodes,asm6,throw,new,unsupported,operation,exception,this,feature,requires,asm6,if,cv,null,return,cv,visit,module,name,access,version,return,null
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor classVisitor);1531241461;Constructs a new {@link ClassVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}._@param classVisitor the class visitor to which this visitor must delegate method calls. May be_null.;public ClassVisitor(final int api, final ClassVisitor classVisitor) {_    if (api != Opcodes.ASM6_        && api != Opcodes.ASM5_        && api != Opcodes.ASM4_        && api != Opcodes.ASM7_EXPERIMENTAL) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.cv = classVisitor__  };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,param,class,visitor,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,class,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,throw,new,illegal,argument,exception,this,api,api,this,cv,class,visitor
ClassVisitor -> public ClassVisitor(final int api, final ClassVisitor classVisitor);1536664245;Constructs a new {@link ClassVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}._@param classVisitor the class visitor to which this visitor must delegate method calls. May be_null.;public ClassVisitor(final int api, final ClassVisitor classVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.cv = classVisitor__  };constructs,a,new,link,class,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7,param,class,visitor,the,class,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,class,visitor,final,int,api,final,class,visitor,class,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,asm7,throw,new,illegal,argument,exception,this,api,api,this,cv,class,visitor
ClassVisitor -> public void visit(       final int version,       final int access,       final String name,       final String signature,       final String superName,       final String[] interfaces);1531241461;Visits the header of the class.__@param version the class version. The minor version is stored in the 16 most significant bits,_and the major version in the 16 least significant bits._@param access the class's access flags (see {@link Opcodes}). This parameter also indicates if_the class is deprecated._@param name the internal name of the class (see {@link Type#getInternalName()})._@param signature the signature of this class. May be <tt>null</tt> if the class is not a_generic one, and does not extend or implement generic classes or interfaces._@param superName the internal of name of the super class (see {@link Type#getInternalName()})._For interfaces, the super class is {@link Object}. May be <tt>null</tt>, but only for the_{@link Object} class._@param interfaces the internal names of the class's interfaces (see {@link_Type#getInternalName()}). May be <tt>null</tt>.;public void visit(_      final int version,_      final int access,_      final String name,_      final String signature,_      final String superName,_      final String[] interfaces) {_    if (cv != null) {_      cv.visit(version, access, name, signature, superName, interfaces)__    }_  };visits,the,header,of,the,class,param,version,the,class,version,the,minor,version,is,stored,in,the,16,most,significant,bits,and,the,major,version,in,the,16,least,significant,bits,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,param,signature,the,signature,of,this,class,may,be,tt,null,tt,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,tt,null,tt,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,may,be,tt,null,tt;public,void,visit,final,int,version,final,int,access,final,string,name,final,string,signature,final,string,super,name,final,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public void visit(       final int version,       final int access,       final String name,       final String signature,       final String superName,       final String[] interfaces);1536664245;Visits the header of the class.__@param version the class version. The minor version is stored in the 16 most significant bits,_and the major version in the 16 least significant bits._@param access the class's access flags (see {@link Opcodes}). This parameter also indicates if_the class is deprecated._@param name the internal name of the class (see {@link Type#getInternalName()})._@param signature the signature of this class. May be {@literal null} if the class is not a_generic one, and does not extend or implement generic classes or interfaces._@param superName the internal of name of the super class (see {@link Type#getInternalName()})._For interfaces, the super class is {@link Object}. May be {@literal null}, but only for the_{@link Object} class._@param interfaces the internal names of the class's interfaces (see {@link_Type#getInternalName()}). May be {@literal null}.;public void visit(_      final int version,_      final int access,_      final String name,_      final String signature,_      final String superName,_      final String[] interfaces) {_    if (cv != null) {_      cv.visit(version, access, name, signature, superName, interfaces)__    }_  };visits,the,header,of,the,class,param,version,the,class,version,the,minor,version,is,stored,in,the,16,most,significant,bits,and,the,major,version,in,the,16,least,significant,bits,param,access,the,class,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,class,is,deprecated,param,name,the,internal,name,of,the,class,see,link,type,get,internal,name,param,signature,the,signature,of,this,class,may,be,literal,null,if,the,class,is,not,a,generic,one,and,does,not,extend,or,implement,generic,classes,or,interfaces,param,super,name,the,internal,of,name,of,the,super,class,see,link,type,get,internal,name,for,interfaces,the,super,class,is,link,object,may,be,literal,null,but,only,for,the,link,object,class,param,interfaces,the,internal,names,of,the,class,s,interfaces,see,link,type,get,internal,name,may,be,literal,null;public,void,visit,final,int,version,final,int,access,final,string,name,final,string,signature,final,string,super,name,final,string,interfaces,if,cv,null,cv,visit,version,access,name,signature,super,name,interfaces
ClassVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1531241461;Visits an annotation on a type in the class signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#CLASS_TYPE_PARAMETER}, {@link_TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See_{@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException()__    }_    if (cv != null) {_      return cv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,class,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,cv,null,return,cv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
ClassVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1536664245;Visits an annotation on a type in the class signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#CLASS_TYPE_PARAMETER}, {@link_TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See_{@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException("This feature requires ASM5")__    }_    if (cv != null) {_      return cv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,class,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,this,feature,requires,asm5,if,cv,null,return,cv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
ClassVisitor -> public FieldVisitor visitField(       final int access,       final String name,       final String descriptor,       final String signature,       final Object value);1531241461;Visits a field of the class.__@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if_the field is synthetic and/or deprecated._@param name the field's name._@param descriptor the field's descriptor (see {@link Type})._@param signature the field's signature. May be <tt>null</tt> if the field's type does not use_generic types._@param value the field's initial value. This parameter, which may be <tt>null</tt> if the field_does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link_Long}, a {@link Double} or a {@link String} (for <tt>int</tt>, <tt>float</tt>,_<tt>long</tt> or <tt>String</tt> fields respectively). <i>This parameter is only used for_static fields</i>. Its value is ignored for non static fields, which must be initialized_through bytecode instructions in constructors or methods._@return a visitor to visit field annotations and attributes, or <tt>null</tt> if this class_visitor is not interested in visiting these annotations and attributes.;public FieldVisitor visitField(_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final Object value) {_    if (cv != null) {_      return cv.visitField(access, name, descriptor, signature, value)__    }_    return null__  };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type,param,signature,the,field,s,signature,may,be,tt,null,tt,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,tt,null,tt,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,tt,int,tt,tt,float,tt,tt,long,tt,or,tt,string,tt,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,tt,null,tt,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,object,value,if,cv,null,return,cv,visit,field,access,name,descriptor,signature,value,return,null
ClassVisitor -> public FieldVisitor visitField(       final int access,       final String name,       final String descriptor,       final String signature,       final Object value);1536664245;Visits a field of the class.__@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if_the field is synthetic and/or deprecated._@param name the field's name._@param descriptor the field's descriptor (see {@link Type})._@param signature the field's signature. May be {@literal null} if the field's type does not use_generic types._@param value the field's initial value. This parameter, which may be {@literal null} if the_field does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link_Long}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}_or {@code String} fields respectively). <i>This parameter is only used for static_fields</i>. Its value is ignored for non static fields, which must be initialized through_bytecode instructions in constructors or methods._@return a visitor to visit field annotations and attributes, or {@literal null} if this class_visitor is not interested in visiting these annotations and attributes.;public FieldVisitor visitField(_      final int access,_      final String name,_      final String descriptor,_      final String signature,_      final Object value) {_    if (cv != null) {_      return cv.visitField(access, name, descriptor, signature, value)__    }_    return null__  };visits,a,field,of,the,class,param,access,the,field,s,access,flags,see,link,opcodes,this,parameter,also,indicates,if,the,field,is,synthetic,and,or,deprecated,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type,param,signature,the,field,s,signature,may,be,literal,null,if,the,field,s,type,does,not,use,generic,types,param,value,the,field,s,initial,value,this,parameter,which,may,be,literal,null,if,the,field,does,not,have,an,initial,value,must,be,an,link,integer,a,link,float,a,link,long,a,link,double,or,a,link,string,for,code,int,code,float,code,long,or,code,string,fields,respectively,i,this,parameter,is,only,used,for,static,fields,i,its,value,is,ignored,for,non,static,fields,which,must,be,initialized,through,bytecode,instructions,in,constructors,or,methods,return,a,visitor,to,visit,field,annotations,and,attributes,or,literal,null,if,this,class,visitor,is,not,interested,in,visiting,these,annotations,and,attributes;public,field,visitor,visit,field,final,int,access,final,string,name,final,string,descriptor,final,string,signature,final,object,value,if,cv,null,return,cv,visit,field,access,name,descriptor,signature,value,return,null
