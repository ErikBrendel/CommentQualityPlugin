# id;timestamp;commentText;codeText;commentWords;codeWords
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale);1495868221;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to {@code java.util.ResourceBundle}'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be {@code null})_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,nullable,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale);1496837955;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to {@code java.util.ResourceBundle}'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be {@code null})_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,nullable,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale);1530174524;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to {@code java.util.ResourceBundle}'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be {@code null})_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,nullable,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale);1533725446;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to {@code java.util.ResourceBundle}'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be {@code null})_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, @Nullable Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,nullable,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public LocalizedResourceHelper();1328020251;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper();1356735495;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper();1495868221;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper();1496837955;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper();1530174524;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper();1533725446;Create a new LocalizedResourceHelper with a DefaultResourceLoader._@see org.springframework.core.io.DefaultResourceLoader;public LocalizedResourceHelper() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,localized,resource,helper,with,a,default,resource,loader,see,org,springframework,core,io,default,resource,loader;public,localized,resource,helper,this,resource,loader,new,default,resource,loader
LocalizedResourceHelper -> public void setSeparator(@Nullable String separator);1496837955;Set the separator to use inbetween file name parts._Default is an underscore ("_").;public void setSeparator(@Nullable String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,inbetween,file,name,parts,default,is,an,underscore;public,void,set,separator,nullable,string,separator,this,separator,separator,null,separator
LocalizedResourceHelper -> public void setSeparator(@Nullable String separator);1530174524;Set the separator to use inbetween file name parts._Default is an underscore ("_").;public void setSeparator(@Nullable String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,inbetween,file,name,parts,default,is,an,underscore;public,void,set,separator,nullable,string,separator,this,separator,separator,null,separator
LocalizedResourceHelper -> public void setSeparator(@Nullable String separator);1533725446;Set the separator to use in-between file name parts._Default is an underscore ("_").;public void setSeparator(@Nullable String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,in,between,file,name,parts,default,is,an,underscore;public,void,set,separator,nullable,string,separator,this,separator,separator,null,separator
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1328020251;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1356735495;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1495868221;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1496837955;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1530174524;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public LocalizedResourceHelper(ResourceLoader resourceLoader);1533725446;Create a new LocalizedResourceHelper with the given ResourceLoader._@param resourceLoader the ResourceLoader to use;public LocalizedResourceHelper(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,localized,resource,helper,with,the,given,resource,loader,param,resource,loader,the,resource,loader,to,use;public,localized,resource,helper,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, Locale locale);1328020251;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to <code>java.util.ResourceBundle</code>'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be <code>null</code>)_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,code,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,code,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public Resource findLocalizedResource(String name, String extension, Locale locale);1356735495;Find the most specific localized resource for the given name,_extension and locale:_<p>The file will be searched with locations in the following order,_similar to {@code java.util.ResourceBundle}'s search order:_<ul>_<li>[name]_[language]_[country]_[variant][extension]_<li>[name]_[language]_[country][extension]_<li>[name]_[language][extension]_<li>[name][extension]_</ul>_<p>If none of the specific files can be found, a resource_descriptor for the default location will be returned._@param name the name of the file, without localization part nor extension_@param extension the file extension (e.g. ".xls")_@param locale the current locale (may be {@code null})_@return the most specific localized resource found_@see java.util.ResourceBundle;public Resource findLocalizedResource(String name, String extension, Locale locale) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(extension, "Extension must not be null")___		Resource resource = null___		if (locale != null) {_			String lang = locale.getLanguage()__			String country = locale.getCountry()__			String variant = locale.getVariant()___			_			if (variant.length() > 0) {_				String location =_						name + this.separator + lang + this.separator + country + this.separator + variant + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && country.length() > 0) {_				String location = name + this.separator + lang + this.separator + country + extension__				resource = this.resourceLoader.getResource(location)__			}__			_			if ((resource == null || !resource.exists()) && lang.length() > 0) {_				String location = name + this.separator + lang + extension__				resource = this.resourceLoader.getResource(location)__			}_		}__		_		if (resource == null || !resource.exists()) {_			String location = name + extension__			resource = this.resourceLoader.getResource(location)__		}__		return resource__	};find,the,most,specific,localized,resource,for,the,given,name,extension,and,locale,p,the,file,will,be,searched,with,locations,in,the,following,order,similar,to,code,java,util,resource,bundle,s,search,order,ul,li,name,language,country,variant,extension,li,name,language,country,extension,li,name,language,extension,li,name,extension,ul,p,if,none,of,the,specific,files,can,be,found,a,resource,descriptor,for,the,default,location,will,be,returned,param,name,the,name,of,the,file,without,localization,part,nor,extension,param,extension,the,file,extension,e,g,xls,param,locale,the,current,locale,may,be,code,null,return,the,most,specific,localized,resource,found,see,java,util,resource,bundle;public,resource,find,localized,resource,string,name,string,extension,locale,locale,assert,not,null,name,name,must,not,be,null,assert,not,null,extension,extension,must,not,be,null,resource,resource,null,if,locale,null,string,lang,locale,get,language,string,country,locale,get,country,string,variant,locale,get,variant,if,variant,length,0,string,location,name,this,separator,lang,this,separator,country,this,separator,variant,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,country,length,0,string,location,name,this,separator,lang,this,separator,country,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,lang,length,0,string,location,name,this,separator,lang,extension,resource,this,resource,loader,get,resource,location,if,resource,null,resource,exists,string,location,name,extension,resource,this,resource,loader,get,resource,location,return,resource
LocalizedResourceHelper -> public void setSeparator(String separator);1328020251;Set the separator to use inbetween file name parts._Default is an underscore ("_").;public void setSeparator(String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,inbetween,file,name,parts,default,is,an,underscore;public,void,set,separator,string,separator,this,separator,separator,null,separator
LocalizedResourceHelper -> public void setSeparator(String separator);1356735495;Set the separator to use inbetween file name parts._Default is an underscore ("_").;public void setSeparator(String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,inbetween,file,name,parts,default,is,an,underscore;public,void,set,separator,string,separator,this,separator,separator,null,separator
LocalizedResourceHelper -> public void setSeparator(String separator);1495868221;Set the separator to use inbetween file name parts._Default is an underscore ("_").;public void setSeparator(String separator) {_		this.separator = (separator != null ? separator : DEFAULT_SEPARATOR)__	};set,the,separator,to,use,inbetween,file,name,parts,default,is,an,underscore;public,void,set,separator,string,separator,this,separator,separator,null,separator
