# id;timestamp;commentText;codeText;commentWords;codeWords
FileSystemUtils -> public static boolean deleteRecursively(@Nullable Path root) throws IOException;1500332081;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root {@code File} to delete_@return {@code true} if the {@code File} existed and was deleted,_or {@code false} it it did not exist_@throws IOException in the case of I/O errors_@since 5.0;public static boolean deleteRecursively(@Nullable Path root) throws IOException {_		if (root != null) {_			Files.walkFileTree(root, new SimpleFileVisitor<Path>() {_				@Override_				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_					Files.delete(file)__					return FileVisitResult.CONTINUE__				}_				@Override_				public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {_					Files.delete(dir)__					return FileVisitResult.CONTINUE__				}_			})__			return Files.deleteIfExists(root)__		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,existed,and,was,deleted,or,code,false,it,it,did,not,exist,throws,ioexception,in,the,case,of,i,o,errors,since,5,0;public,static,boolean,delete,recursively,nullable,path,root,throws,ioexception,if,root,null,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,files,delete,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,path,dir,ioexception,exc,throws,ioexception,files,delete,dir,return,file,visit,result,continue,return,files,delete,if,exists,root,return,false
FileSystemUtils -> public static boolean deleteRecursively(@Nullable Path root) throws IOException;1501762860;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root {@code File} to delete_@return {@code true} if the {@code File} existed and was deleted,_or {@code false} it it did not exist_@throws IOException in the case of I/O errors_@since 5.0;public static boolean deleteRecursively(@Nullable Path root) throws IOException {_		if (root == null) {_			return false__		}_		if (!Files.exists(root)) {_			return false__		}__		Files.walkFileTree(root, new SimpleFileVisitor<Path>() {_			@Override_			public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_				Files.delete(file)__				return FileVisitResult.CONTINUE__			}_			@Override_			public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {_				Files.delete(dir)__				return FileVisitResult.CONTINUE__			}_		})__		return true__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,existed,and,was,deleted,or,code,false,it,it,did,not,exist,throws,ioexception,in,the,case,of,i,o,errors,since,5,0;public,static,boolean,delete,recursively,nullable,path,root,throws,ioexception,if,root,null,return,false,if,files,exists,root,return,false,files,walk,file,tree,root,new,simple,file,visitor,path,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,files,delete,file,return,file,visit,result,continue,override,public,file,visit,result,post,visit,directory,path,dir,ioexception,exc,throws,ioexception,files,delete,dir,return,file,visit,result,continue,return,true
FileSystemUtils -> public static boolean deleteRecursively(File root);1328020251;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root <code>File</code> to delete_@return <code>true</code> if the <code>File</code> was deleted,_otherwise <code>false</code>;public static boolean deleteRecursively(File root) {_		if (root != null && root.exists()) {_			if (root.isDirectory()) {_				File[] children = root.listFiles()__				if (children != null) {_					for (File child : children) {_						deleteRecursively(child)__					}_				}_			}_			return root.delete()__		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,code,to,delete,return,code,true,code,if,the,code,file,code,was,deleted,otherwise,code,false,code;public,static,boolean,delete,recursively,file,root,if,root,null,root,exists,if,root,is,directory,file,children,root,list,files,if,children,null,for,file,child,children,delete,recursively,child,return,root,delete,return,false
FileSystemUtils -> public static boolean deleteRecursively(File root);1356735495;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root {@code File} to delete_@return {@code true} if the {@code File} was deleted,_otherwise {@code false};public static boolean deleteRecursively(File root) {_		if (root != null && root.exists()) {_			if (root.isDirectory()) {_				File[] children = root.listFiles()__				if (children != null) {_					for (File child : children) {_						deleteRecursively(child)__					}_				}_			}_			return root.delete()__		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,was,deleted,otherwise,code,false;public,static,boolean,delete,recursively,file,root,if,root,null,root,exists,if,root,is,directory,file,children,root,list,files,if,children,null,for,file,child,children,delete,recursively,child,return,root,delete,return,false
FileSystemUtils -> public static void copyRecursively(@Nullable File src, File dest) throws IOException;1496837955;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(@Nullable File src, File dest) throws IOException {_		Assert.isTrue(src != null && (src.isDirectory() || src.isFile()), "Source File must denote a directory or file")__		Assert.notNull(dest, "Destination File must not be null")__		doCopyRecursively(src, dest)__	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,nullable,file,src,file,dest,throws,ioexception,assert,is,true,src,null,src,is,directory,src,is,file,source,file,must,denote,a,directory,or,file,assert,not,null,dest,destination,file,must,not,be,null,do,copy,recursively,src,dest
FileSystemUtils -> public static void copyRecursively(@Nullable File src, File dest) throws IOException;1499689513;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(@Nullable File src, File dest) throws IOException {_		Assert.isTrue(src != null && (src.isDirectory() || src.isFile()),_				"Source File must denote a directory or file")__		Assert.notNull(dest, "Destination File must not be null")__		doCopyRecursively(src, dest)__	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,nullable,file,src,file,dest,throws,ioexception,assert,is,true,src,null,src,is,directory,src,is,file,source,file,must,denote,a,directory,or,file,assert,not,null,dest,destination,file,must,not,be,null,do,copy,recursively,src,dest
FileSystemUtils -> public static void copyRecursively(File src, File dest) throws IOException;1328020251;Recursively copy the contents of the <code>src</code> file/directory_to the <code>dest</code> file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(File src, File dest) throws IOException {_		Assert.isTrue(src != null && (src.isDirectory() || src.isFile()), "Source File must denote a directory or file")__		Assert.notNull(dest, "Destination File must not be null")__		doCopyRecursively(src, dest)__	};recursively,copy,the,contents,of,the,code,src,code,file,directory,to,the,code,dest,code,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,file,src,file,dest,throws,ioexception,assert,is,true,src,null,src,is,directory,src,is,file,source,file,must,denote,a,directory,or,file,assert,not,null,dest,destination,file,must,not,be,null,do,copy,recursively,src,dest
FileSystemUtils -> public static void copyRecursively(File src, File dest) throws IOException;1356735495;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(File src, File dest) throws IOException {_		Assert.isTrue(src != null && (src.isDirectory() || src.isFile()), "Source File must denote a directory or file")__		Assert.notNull(dest, "Destination File must not be null")__		doCopyRecursively(src, dest)__	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,file,src,file,dest,throws,ioexception,assert,is,true,src,null,src,is,directory,src,is,file,source,file,must,denote,a,directory,or,file,assert,not,null,dest,destination,file,must,not,be,null,do,copy,recursively,src,dest
FileSystemUtils -> public static void copyRecursively(File src, File dest) throws IOException;1500332081;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(File src, File dest) throws IOException {_		Assert.notNull(src, "Source File must not be null")__		Assert.notNull(dest, "Destination File must not be null")__		copyRecursively(src.toPath(), dest.toPath())__	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,file,src,file,dest,throws,ioexception,assert,not,null,src,source,file,must,not,be,null,assert,not,null,dest,destination,file,must,not,be,null,copy,recursively,src,to,path,dest,to,path
FileSystemUtils -> public static void copyRecursively(File src, File dest) throws IOException;1501762860;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;public static void copyRecursively(File src, File dest) throws IOException {_		Assert.notNull(src, "Source File must not be null")__		Assert.notNull(dest, "Destination File must not be null")__		copyRecursively(src.toPath(), dest.toPath())__	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;public,static,void,copy,recursively,file,src,file,dest,throws,ioexception,assert,not,null,src,source,file,must,not,be,null,assert,not,null,dest,destination,file,must,not,be,null,copy,recursively,src,to,path,dest,to,path
FileSystemUtils -> public static boolean deleteRecursively(@Nullable File root);1496837955;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root {@code File} to delete_@return {@code true} if the {@code File} was deleted,_otherwise {@code false};public static boolean deleteRecursively(@Nullable File root) {_		if (root != null && root.exists()) {_			if (root.isDirectory()) {_				File[] children = root.listFiles()__				if (children != null) {_					for (File child : children) {_						deleteRecursively(child)__					}_				}_			}_			return root.delete()__		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,was,deleted,otherwise,code,false;public,static,boolean,delete,recursively,nullable,file,root,if,root,null,root,exists,if,root,is,directory,file,children,root,list,files,if,children,null,for,file,child,children,delete,recursively,child,return,root,delete,return,false
FileSystemUtils -> public static boolean deleteRecursively(@Nullable File root);1499689513;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._@param root the root {@code File} to delete_@return {@code true} if the {@code File} was deleted,_otherwise {@code false};public static boolean deleteRecursively(@Nullable File root) {_		if (root != null && root.exists()) {_			if (root.isDirectory()) {_				File[] children = root.listFiles()__				if (children != null) {_					for (File child : children) {_						deleteRecursively(child)__					}_				}_			}_			return root.delete()__		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,was,deleted,otherwise,code,false;public,static,boolean,delete,recursively,nullable,file,root,if,root,null,root,exists,if,root,is,directory,file,children,root,list,files,if,children,null,for,file,child,children,delete,recursively,child,return,root,delete,return,false
FileSystemUtils -> public static boolean deleteRecursively(@Nullable File root);1500332081;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._<p>Note: Like {@link File#delete()}, this method does not throw any_exception but rather silently returns {@code false} in case of I/O_errors. Consider using {@link #deleteRecursively(Path)} for NIO-style_handling of I/O errors, clearly differentiating between non-existence_and failure to delete an existing file._@param root the root {@code File} to delete_@return {@code true} if the {@code File} was successfully deleted,_otherwise {@code false};public static boolean deleteRecursively(@Nullable File root) {_		if (root != null) {_			try {_				return deleteRecursively(root.toPath())__			}_			catch (IOException ex) {_				return false__			}_		}_		return false__	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,p,note,like,link,file,delete,this,method,does,not,throw,any,exception,but,rather,silently,returns,code,false,in,case,of,i,o,errors,consider,using,link,delete,recursively,path,for,nio,style,handling,of,i,o,errors,clearly,differentiating,between,non,existence,and,failure,to,delete,an,existing,file,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,was,successfully,deleted,otherwise,code,false;public,static,boolean,delete,recursively,nullable,file,root,if,root,null,try,return,delete,recursively,root,to,path,catch,ioexception,ex,return,false,return,false
FileSystemUtils -> public static boolean deleteRecursively(@Nullable File root);1501762860;Delete the supplied {@link File} - for directories,_recursively delete any nested directories or files as well._<p>Note: Like {@link File#delete()}, this method does not throw any_exception but rather silently returns {@code false} in case of I/O_errors. Consider using {@link #deleteRecursively(Path)} for NIO-style_handling of I/O errors, clearly differentiating between non-existence_and failure to delete an existing file._@param root the root {@code File} to delete_@return {@code true} if the {@code File} was successfully deleted,_otherwise {@code false};public static boolean deleteRecursively(@Nullable File root) {_		if (root == null) {_			return false__		}__		try {_			return deleteRecursively(root.toPath())__		}_		catch (IOException ex) {_			return false__		}_	};delete,the,supplied,link,file,for,directories,recursively,delete,any,nested,directories,or,files,as,well,p,note,like,link,file,delete,this,method,does,not,throw,any,exception,but,rather,silently,returns,code,false,in,case,of,i,o,errors,consider,using,link,delete,recursively,path,for,nio,style,handling,of,i,o,errors,clearly,differentiating,between,non,existence,and,failure,to,delete,an,existing,file,param,root,the,root,code,file,to,delete,return,code,true,if,the,code,file,was,successfully,deleted,otherwise,code,false;public,static,boolean,delete,recursively,nullable,file,root,if,root,null,return,false,try,return,delete,recursively,root,to,path,catch,ioexception,ex,return,false
FileSystemUtils -> public static void copyRecursively(Path src, Path dest) throws IOException;1500332081;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors_@since 5.0;public static void copyRecursively(Path src, Path dest) throws IOException {_		Assert.notNull(src, "Source Path must not be null")__		Assert.notNull(dest, "Destination Path must not be null")__		BasicFileAttributes srcAttr = Files.readAttributes(src, BasicFileAttributes.class)___		if (srcAttr.isDirectory()) {_			Files.walkFileTree(src, new SimpleFileVisitor<Path>() {_				@Override_				public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {_					Files.createDirectories(dest.resolve(src.relativize(dir)))__					return FileVisitResult.CONTINUE__				}_				@Override_				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_					Files.copy(file, dest.resolve(src.relativize(file)))__					return FileVisitResult.CONTINUE__				}_			})__		}_		else if (srcAttr.isRegularFile()) {_			Files.copy(src, dest)__		}_		else {_			throw new IllegalArgumentException("Source File must denote a directory or file")__		}_	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors,since,5,0;public,static,void,copy,recursively,path,src,path,dest,throws,ioexception,assert,not,null,src,source,path,must,not,be,null,assert,not,null,dest,destination,path,must,not,be,null,basic,file,attributes,src,attr,files,read,attributes,src,basic,file,attributes,class,if,src,attr,is,directory,files,walk,file,tree,src,new,simple,file,visitor,path,override,public,file,visit,result,pre,visit,directory,path,dir,basic,file,attributes,attrs,throws,ioexception,files,create,directories,dest,resolve,src,relativize,dir,return,file,visit,result,continue,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,files,copy,file,dest,resolve,src,relativize,file,return,file,visit,result,continue,else,if,src,attr,is,regular,file,files,copy,src,dest,else,throw,new,illegal,argument,exception,source,file,must,denote,a,directory,or,file
FileSystemUtils -> public static void copyRecursively(Path src, Path dest) throws IOException;1501762860;Recursively copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors_@since 5.0;public static void copyRecursively(Path src, Path dest) throws IOException {_		Assert.notNull(src, "Source Path must not be null")__		Assert.notNull(dest, "Destination Path must not be null")__		BasicFileAttributes srcAttr = Files.readAttributes(src, BasicFileAttributes.class)___		if (srcAttr.isDirectory()) {_			Files.walkFileTree(src, new SimpleFileVisitor<Path>() {_				@Override_				public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {_					Files.createDirectories(dest.resolve(src.relativize(dir)))__					return FileVisitResult.CONTINUE__				}_				@Override_				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {_					Files.copy(file, dest.resolve(src.relativize(file)), StandardCopyOption.REPLACE_EXISTING)__					return FileVisitResult.CONTINUE__				}_			})__		}_		else if (srcAttr.isRegularFile()) {_			Files.copy(src, dest)__		}_		else {_			throw new IllegalArgumentException("Source File must denote a directory or file")__		}_	};recursively,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors,since,5,0;public,static,void,copy,recursively,path,src,path,dest,throws,ioexception,assert,not,null,src,source,path,must,not,be,null,assert,not,null,dest,destination,path,must,not,be,null,basic,file,attributes,src,attr,files,read,attributes,src,basic,file,attributes,class,if,src,attr,is,directory,files,walk,file,tree,src,new,simple,file,visitor,path,override,public,file,visit,result,pre,visit,directory,path,dir,basic,file,attributes,attrs,throws,ioexception,files,create,directories,dest,resolve,src,relativize,dir,return,file,visit,result,continue,override,public,file,visit,result,visit,file,path,file,basic,file,attributes,attrs,throws,ioexception,files,copy,file,dest,resolve,src,relativize,file,standard,copy,option,return,file,visit,result,continue,else,if,src,attr,is,regular,file,files,copy,src,dest,else,throw,new,illegal,argument,exception,source,file,must,denote,a,directory,or,file
FileSystemUtils -> private static void doCopyRecursively(File src, File dest) throws IOException;1328020251;Actually copy the contents of the <code>src</code> file/directory_to the <code>dest</code> file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;private static void doCopyRecursively(File src, File dest) throws IOException {_		if (src.isDirectory()) {_			dest.mkdir()__			File[] entries = src.listFiles()__			if (entries == null) {_				throw new IOException("Could not list files in directory: " + src)__			}_			for (File entry : entries) {_				doCopyRecursively(entry, new File(dest, entry.getName()))__			}_		}_		else if (src.isFile()) {_			try {_				dest.createNewFile()__			}_			catch (IOException ex) {_				IOException ioex = new IOException("Failed to create file: " + dest)__				ioex.initCause(ex)__				throw ioex__			}_			FileCopyUtils.copy(src, dest)__		}_		else {_			_			_		}_	};actually,copy,the,contents,of,the,code,src,code,file,directory,to,the,code,dest,code,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;private,static,void,do,copy,recursively,file,src,file,dest,throws,ioexception,if,src,is,directory,dest,mkdir,file,entries,src,list,files,if,entries,null,throw,new,ioexception,could,not,list,files,in,directory,src,for,file,entry,entries,do,copy,recursively,entry,new,file,dest,entry,get,name,else,if,src,is,file,try,dest,create,new,file,catch,ioexception,ex,ioexception,ioex,new,ioexception,failed,to,create,file,dest,ioex,init,cause,ex,throw,ioex,file,copy,utils,copy,src,dest,else
FileSystemUtils -> private static void doCopyRecursively(File src, File dest) throws IOException;1356735495;Actually copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;private static void doCopyRecursively(File src, File dest) throws IOException {_		if (src.isDirectory()) {_			dest.mkdir()__			File[] entries = src.listFiles()__			if (entries == null) {_				throw new IOException("Could not list files in directory: " + src)__			}_			for (File entry : entries) {_				doCopyRecursively(entry, new File(dest, entry.getName()))__			}_		}_		else if (src.isFile()) {_			try {_				dest.createNewFile()__			}_			catch (IOException ex) {_				IOException ioex = new IOException("Failed to create file: " + dest)__				ioex.initCause(ex)__				throw ioex__			}_			FileCopyUtils.copy(src, dest)__		}_		else {_			_			_		}_	};actually,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;private,static,void,do,copy,recursively,file,src,file,dest,throws,ioexception,if,src,is,directory,dest,mkdir,file,entries,src,list,files,if,entries,null,throw,new,ioexception,could,not,list,files,in,directory,src,for,file,entry,entries,do,copy,recursively,entry,new,file,dest,entry,get,name,else,if,src,is,file,try,dest,create,new,file,catch,ioexception,ex,ioexception,ioex,new,ioexception,failed,to,create,file,dest,ioex,init,cause,ex,throw,ioex,file,copy,utils,copy,src,dest,else
FileSystemUtils -> private static void doCopyRecursively(File src, File dest) throws IOException;1496837955;Actually copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;private static void doCopyRecursively(File src, File dest) throws IOException {_		if (src.isDirectory()) {_			dest.mkdir()__			File[] entries = src.listFiles()__			if (entries == null) {_				throw new IOException("Could not list files in directory: " + src)__			}_			for (File entry : entries) {_				doCopyRecursively(entry, new File(dest, entry.getName()))__			}_		}_		else if (src.isFile()) {_			try {_				dest.createNewFile()__			}_			catch (IOException ex) {_				IOException ioex = new IOException("Failed to create file: " + dest)__				ioex.initCause(ex)__				throw ioex__			}_			FileCopyUtils.copy(src, dest)__		}_		else {_			_			_		}_	};actually,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;private,static,void,do,copy,recursively,file,src,file,dest,throws,ioexception,if,src,is,directory,dest,mkdir,file,entries,src,list,files,if,entries,null,throw,new,ioexception,could,not,list,files,in,directory,src,for,file,entry,entries,do,copy,recursively,entry,new,file,dest,entry,get,name,else,if,src,is,file,try,dest,create,new,file,catch,ioexception,ex,ioexception,ioex,new,ioexception,failed,to,create,file,dest,ioex,init,cause,ex,throw,ioex,file,copy,utils,copy,src,dest,else
FileSystemUtils -> private static void doCopyRecursively(File src, File dest) throws IOException;1499689513;Actually copy the contents of the {@code src} file/directory_to the {@code dest} file/directory._@param src the source directory_@param dest the destination directory_@throws IOException in the case of I/O errors;private static void doCopyRecursively(File src, File dest) throws IOException {_		if (src.isDirectory()) {_			dest.mkdir()__			File[] entries = src.listFiles()__			if (entries == null) {_				throw new IOException("Could not list files in directory: " + src)__			}_			for (File entry : entries) {_				doCopyRecursively(entry, new File(dest, entry.getName()))__			}_		}_		else if (src.isFile()) {_			try {_				dest.createNewFile()__			}_			catch (IOException ex) {_				throw new IOException("Failed to create file: " + dest, ex)__			}_			FileCopyUtils.copy(src, dest)__		}_		else {_			_			_		}_	};actually,copy,the,contents,of,the,code,src,file,directory,to,the,code,dest,file,directory,param,src,the,source,directory,param,dest,the,destination,directory,throws,ioexception,in,the,case,of,i,o,errors;private,static,void,do,copy,recursively,file,src,file,dest,throws,ioexception,if,src,is,directory,dest,mkdir,file,entries,src,list,files,if,entries,null,throw,new,ioexception,could,not,list,files,in,directory,src,for,file,entry,entries,do,copy,recursively,entry,new,file,dest,entry,get,name,else,if,src,is,file,try,dest,create,new,file,catch,ioexception,ex,throw,new,ioexception,failed,to,create,file,dest,ex,file,copy,utils,copy,src,dest,else
