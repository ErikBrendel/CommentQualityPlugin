commented;modifiers;parameterAmount;loc;comment;code
true;public;1;11;/**  * Specify the maximum number of entries for the MetadataReader cache.  * <p>Default is 256 for a local cache, whereas a shared cache is  * typically unbounded. This method enforces a local resource cache,  * even if the {@link ResourceLoader} supports a shared resource cache.  */ ;/**  * Specify the maximum number of entries for the MetadataReader cache.  * <p>Default is 256 for a local cache, whereas a shared cache is  * typically unbounded. This method enforces a local resource cache,  * even if the {@link ResourceLoader} supports a shared resource cache.  */ public void setCacheLimit(int cacheLimit) {     if (cacheLimit <= 0) {         this.metadataReaderCache = null.     } else if (this.metadataReaderCache instanceof LocalResourceCache) {         ((LocalResourceCache) this.metadataReaderCache).setCacheLimit(cacheLimit).     } else {         this.metadataReaderCache = new LocalResourceCache(cacheLimit).     } }
true;public;0;8;/**  * Return the maximum number of entries for the MetadataReader cache.  */ ;/**  * Return the maximum number of entries for the MetadataReader cache.  */ public int getCacheLimit() {     if (this.metadataReaderCache instanceof LocalResourceCache) {         return ((LocalResourceCache) this.metadataReaderCache).getCacheLimit().     } else {         return (this.metadataReaderCache != null ? Integer.MAX_VALUE : 0).     } }
false;public;1;25;;@Override public MetadataReader getMetadataReader(Resource resource) throws IOException {     if (this.metadataReaderCache instanceof ConcurrentMap) {         // No synchronization necessary...         MetadataReader metadataReader = this.metadataReaderCache.get(resource).         if (metadataReader == null) {             metadataReader = super.getMetadataReader(resource).             this.metadataReaderCache.put(resource, metadataReader).         }         return metadataReader.     } else if (this.metadataReaderCache != null) {         synchronized (this.metadataReaderCache) {             MetadataReader metadataReader = this.metadataReaderCache.get(resource).             if (metadataReader == null) {                 metadataReader = super.getMetadataReader(resource).                 this.metadataReaderCache.put(resource, metadataReader).             }             return metadataReader.         }     } else {         return super.getMetadataReader(resource).     } }
true;public;0;11;/**  * Clear the local MetadataReader cache, if any, removing all cached class metadata.  */ ;/**  * Clear the local MetadataReader cache, if any, removing all cached class metadata.  */ public void clearCache() {     if (this.metadataReaderCache instanceof LocalResourceCache) {         synchronized (this.metadataReaderCache) {             this.metadataReaderCache.clear().         }     } else if (this.metadataReaderCache != null) {         // Shared resource cache -> reset to local cache.         setCacheLimit(DEFAULT_CACHE_LIMIT).     } }
false;public;1;3;;public void setCacheLimit(int cacheLimit) {     this.cacheLimit = cacheLimit. }
false;public;0;3;;public int getCacheLimit() {     return this.cacheLimit. }
false;protected;1;4;;@Override protected boolean removeEldestEntry(Map.Entry<Resource, MetadataReader> eldest) {     return size() > this.cacheLimit. }
