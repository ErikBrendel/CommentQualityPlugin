# id;timestamp;commentText;codeText;commentWords;codeWords
CollectionUtils -> public static boolean contains(Enumeration enumeration, Object element);1328020251;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return <code>true</code> if found, <code>false</code> else;public static boolean contains(Enumeration enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,code,if,found,code,false,code,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration enumeration, Object element);1356735495;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration enumeration, Object element);1357119239;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration enumeration, Object element);1368482696;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable List<T> list);1515777832;Retrieve the last element of the given List, accessing the highest index._@param list the List to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3;@Nullable_	public static <T> T lastElement(@Nullable List<T> list) {_		if (isEmpty(list)) {_			return null__		}_		return list.get(list.size() - 1)__	};retrieve,the,last,element,of,the,given,list,accessing,the,highest,index,param,list,the,list,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3;nullable,public,static,t,t,last,element,nullable,list,t,list,if,is,empty,list,return,null,return,list,get,list,size,1
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable List<T> list);1528737477;Retrieve the last element of the given List, accessing the highest index._@param list the List to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3;@Nullable_	public static <T> T lastElement(@Nullable List<T> list) {_		if (isEmpty(list)) {_			return null__		}_		return list.get(list.size() - 1)__	};retrieve,the,last,element,of,the,given,list,accessing,the,highest,index,param,list,the,list,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3;nullable,public,static,t,t,last,element,nullable,list,t,list,if,is,empty,list,return,null,return,list,get,list,size,1
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable List<T> list);1530174524;Retrieve the last element of the given List, accessing the highest index._@param list the List to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3;@Nullable_	public static <T> T lastElement(@Nullable List<T> list) {_		if (isEmpty(list)) {_			return null__		}_		return list.get(list.size() - 1)__	};retrieve,the,last,element,of,the,given,list,accessing,the,highest,index,param,list,the,list,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3;nullable,public,static,t,t,last,element,nullable,list,t,list,if,is,empty,list,return,null,return,list,get,list,size,1
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergeArrayIntoCollection(Object array, Collection collection);1328020251;Merge the given array into the given Collection._@param array the array to merge (may be <code>null</code>)_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static void mergeArrayIntoCollection(Object array, Collection collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add(elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,code,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,void,merge,array,into,collection,object,array,collection,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergeArrayIntoCollection(Object array, Collection collection);1356735495;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static void mergeArrayIntoCollection(Object array, Collection collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add(elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,void,merge,array,into,collection,object,array,collection,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergeArrayIntoCollection(Object array, Collection collection);1357119239;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static void mergeArrayIntoCollection(Object array, Collection collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add(elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,void,merge,array,into,collection,object,array,collection,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergeArrayIntoCollection(Object array, Collection collection);1368482696;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static void mergeArrayIntoCollection(Object array, Collection collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add(elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,void,merge,array,into,collection,object,array,collection,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,elem
CollectionUtils -> public static Object findFirstMatch(Collection source, Collection candidates);1328020251;Return the first element in '<code>candidates</code>' that is contained in_'<code>source</code>'. If no element in '<code>candidates</code>' is present in_'<code>source</code>' returns <code>null</code>. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or <code>null</code> if not found;public static Object findFirstMatch(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,code,that,is,contained,in,code,source,code,if,no,element,in,code,candidates,code,is,present,in,code,source,code,returns,code,null,code,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,code,if,not,found;public,static,object,find,first,match,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,candidate,return,null
CollectionUtils -> public static Object findFirstMatch(Collection source, Collection candidates);1356735495;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;public static Object findFirstMatch(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;public,static,object,find,first,match,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,candidate,return,null
CollectionUtils -> public static Object findFirstMatch(Collection source, Collection candidates);1357119239;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;public static Object findFirstMatch(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;public,static,object,find,first,match,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,candidate,return,null
CollectionUtils -> public static Object findFirstMatch(Collection source, Collection candidates);1368482696;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;public static Object findFirstMatch(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;public,static,object,find,first,match,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,candidate,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1495868221;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1496259743;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1496837955;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1496955179;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1497269532;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1500448076;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1502974979;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1515777832;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1528737477;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> @Nullable 	public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1530174524;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;@Nullable_	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;nullable,public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1496837955;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1496955179;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1497269532;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1500448076;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1502974979;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1515777832;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1528737477;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(@Nullable Collection<?> collection, Object element);1530174524;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,instance,nullable,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1385412762;Return {@code true} if the supplied Collection is {@code null}_or empty. Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1385986241;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1386673232;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1398721027;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1425639171;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1436221591;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1467730834;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1474830340;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1485782330;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection<?> collection);1493370460;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1385412762;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1385986241;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1386673232;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1398721027;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1425639171;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1436221591;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1467730834;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1474830340;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1485782330;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection);1493370460;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1385412762;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1385986241;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1386673232;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1398721027;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1425639171;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1436221591;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1467730834;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1474830340;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1485782330;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1493370460;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1495868221;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator<?> iterator, Object element);1496259743;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1495868221;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1496259743;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1496837955;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1496955179;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1497269532;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1500448076;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1502974979;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1515777832;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1528737477;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Map<?, ?> map);1530174524;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(@Nullable Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,nullable,map,map,return,map,null,map,is,empty
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1425639171;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<? extends V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), (List<V>) values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,extends,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1436221591;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<? extends V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), (List<V>) values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,extends,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1467730834;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<? extends V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), (List<V>) values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,extends,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1474830340;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<? extends V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), (List<V>) values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,extends,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1485782330;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<? extends V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), (List<V>) values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,extends,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1493370460;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1495868221;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1496259743;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1496837955;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1496955179;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1497269532;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1500448076;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1502974979;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1515777832;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1528737477;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1530174524;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map._@since 3.1;@SuppressWarnings("unchecked")_	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<>(map.size())__		map.forEach((key, value) -> {_			List<? extends V> values = Collections.unmodifiableList(value)__			result.put(key, (List<V>) values)__		})__		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map,since,3,1;suppress,warnings,unchecked,public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,map,size,map,for,each,key,value,list,extends,v,values,collections,unmodifiable,list,value,result,put,key,list,v,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static boolean containsInstance(Collection collection, Object element);1328020251;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_<code>true</code> for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return <code>true</code> if found, <code>false</code> else;public static boolean containsInstance(Collection collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,code,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,code,if,found,code,false,code,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection collection, Object element);1356735495;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection collection, Object element);1357119239;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection collection, Object element);1368482696;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean isEmpty(Collection collection);1328020251;Return <code>true</code> if the supplied Collection is <code>null</code>_or empty. Otherwise, return <code>false</code>._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,code,if,the,supplied,collection,is,code,null,code,or,empty,otherwise,return,code,false,code,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection collection);1356735495;Return {@code true} if the supplied Collection is {@code null}_or empty. Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection collection);1357119239;Return {@code true} if the supplied Collection is {@code null}_or empty. Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(Collection collection);1368482696;Return {@code true} if the supplied Collection is {@code null}_or empty. Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(Collection collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1385986241;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1386673232;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1398721027;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1425639171;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1436221591;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1467730834;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1474830340;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1485782330;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(Object source);1493370460;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1398721027;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1425639171;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1436221591;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1467730834;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1474830340;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1485782330;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1493370460;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1495868221;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1496259743;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1496837955;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1496955179;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1497269532;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1500448076;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1502974979;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1515777832;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1528737477;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1530174524;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1495868221;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1496259743;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1496837955;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1496955179;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1497269532;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1500448076;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1502974979;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1515777832;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1528737477;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> @Nullable 	public static Class<?> findCommonElementType(Collection<?> collection);1530174524;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);@Nullable_	public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;nullable,public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static boolean contains(Iterator iterator, Object element);1328020251;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return <code>true</code> if found, <code>false</code> else;public static boolean contains(Iterator iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,code,if,found,code,false,code,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator iterator, Object element);1356735495;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator iterator, Object element);1357119239;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Iterator iterator, Object element);1368482696;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Iterator iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1328020251;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or <code>null</code> if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,code,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1356735495;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1357119239;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1368482696;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1385412762;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1385986241;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1386673232;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1398721027;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1425639171;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1436221591;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1467730834;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1474830340;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1485782330;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static Object findValueOfType(Collection<?> collection, Class<?>[] types);1493370460;Find a single value of one of the given types in the given Collection:_searching the Collection for a value of the first type, then_searching for a value of the second type, etc._@param collection the collection to search_@param types the types to look for, in prioritized order_@return a value of one of the given types found if there is a clear match,_or {@code null} if none or more than one such value found;public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {_		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {_			return null__		}_		for (Class<?> type : types) {_			Object value = findValueOfType(collection, type)__			if (value != null) {_				return value__			}_		}_		return null__	};find,a,single,value,of,one,of,the,given,types,in,the,given,collection,searching,the,collection,for,a,value,of,the,first,type,then,searching,for,a,value,of,the,second,type,etc,param,collection,the,collection,to,search,param,types,the,types,to,look,for,in,prioritized,order,return,a,value,of,one,of,the,given,types,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;public,static,object,find,value,of,type,collection,collection,class,types,if,is,empty,collection,object,utils,is,empty,types,return,null,for,class,type,types,object,value,find,value,of,type,collection,type,if,value,null,return,value,return,null
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1496837955;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1496955179;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1497269532;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1500448076;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1502974979;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1515777832;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1528737477;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Iterator<?> iterator, Object element);1530174524;Check whether the given Iterator contains the given element._@param iterator the Iterator to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean contains(@Nullable Iterator<?> iterator, Object element) {_		if (iterator != null) {_			while (iterator.hasNext()) {_				Object candidate = iterator.next()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,iterator,contains,the,given,element,param,iterator,the,iterator,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,nullable,iterator,iterator,object,element,if,iterator,null,while,iterator,has,next,object,candidate,iterator,next,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1385412762;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1385986241;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1386673232;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1398721027;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1425639171;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1436221591;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1467730834;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1474830340;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1485782330;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1493370460;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1495868221;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> public static boolean containsInstance(Collection<?> collection, Object element);1496259743;Check whether the given Collection contains the given element instance._<p>Enforces the given instance to be present, rather than returning_{@code true} for an equal element as well._@param collection the Collection to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean containsInstance(Collection<?> collection, Object element) {_		if (collection != null) {_			for (Object candidate : collection) {_				if (candidate == element) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,collection,contains,the,given,element,instance,p,enforces,the,given,instance,to,be,present,rather,than,returning,code,true,for,an,equal,element,as,well,param,collection,the,collection,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,instance,collection,collection,object,element,if,collection,null,for,object,candidate,collection,if,candidate,element,return,true,return,false
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1495868221;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1496259743;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1496837955;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1496955179;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1497269532;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1500448076;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1502974979;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1515777832;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1528737477;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @SuppressWarnings("rawtypes") 	public static List arrayToList(@Nullable Object source);1530174524;Convert the supplied array into a List. A primitive array gets converted_into a List of the appropriate wrapper type._<p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method._This {@code arrayToList} method is just meant to deal with an incoming Object_value that might be an {@code Object[]} or a primitive array at runtime._<p>A {@code null} source value will be converted to an empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object)_@see Arrays#asList(Object[]);@SuppressWarnings("rawtypes")_	public static List arrayToList(@Nullable Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,b,note,b,generally,prefer,the,standard,link,arrays,as,list,method,this,code,array,to,list,method,is,just,meant,to,deal,with,an,incoming,object,value,that,might,be,an,code,object,or,a,primitive,array,at,runtime,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object,see,arrays,as,list,object;suppress,warnings,rawtypes,public,static,list,array,to,list,nullable,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> public static boolean containsAny(Collection source, Collection candidates);1328020251;Return <code>true</code> if any element in '<code>candidates</code>' is_contained in '<code>source</code>'_ otherwise returns <code>false</code>._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,code,if,any,element,in,code,candidates,code,is,contained,in,code,source,code,otherwise,returns,code,false,code,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection source, Collection candidates);1356735495;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection source, Collection candidates);1357119239;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection source, Collection candidates);1368482696;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection source, Collection candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1495868221;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1496259743;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1496837955;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1496955179;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1497269532;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1500448076;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1502974979;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1515777832;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1528737477;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1530174524;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	@Nullable_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,nullable,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1496837955;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1496955179;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1497269532;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1500448076;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1502974979;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1515777832;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1528737477;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(@Nullable Enumeration<?> enumeration, Object element);1530174524;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} otherwise;public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,otherwise;public,static,boolean,contains,nullable,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1328020251;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1356735495;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1357119239;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1368482696;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1385412762;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1385986241;Adapts a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}.__@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapts,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1386673232;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}._@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1398721027;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K,V>}._@param map the map_@return the multi-value map;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,map,return,the,multi,value,map;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1425639171;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)___	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1436221591;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<K, V>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,k,v,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1467730834;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1474830340;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1485782330;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1493370460;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1495868221;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1496259743;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1496837955;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1496955179;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1497269532;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1500448076;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1502974979;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1515777832;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1528737477;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map);1530174524;Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}._@param map the original map_@return the multi-value map_@since 3.1;public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {_		return new MultiValueMapAdapter<>(map)__	};adapt,a,code,map,k,list,v,to,an,code,multi,value,map,k,v,param,map,the,original,map,return,the,multi,value,map,since,3,1;public,static,k,v,multi,value,map,k,v,to,multi,value,map,map,k,list,v,map,return,new,multi,value,map,adapter,map
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1495868221;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1496259743;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1328020251;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1356735495;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1357119239;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1368482696;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1385412762;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1385986241;Returns an unmodifiable view of the specified multi-value map.__@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};returns,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1386673232;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map);1398721027;Return an unmodifiable view of the specified multi-value map._@param  map the map for which an unmodifiable view is to be returned._@return an unmodifiable view of the specified multi-value map.;public static <K,V> MultiValueMap<K,V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {_		Assert.notNull(map, "'map' must not be null")__		Map<K, List<V>> result = new LinkedHashMap<K, List<V>>(map.size())__		for (Map.Entry<? extends K, ? extends List<? extends V>> entry : map.entrySet()) {_			List<V> values = Collections.unmodifiableList(entry.getValue())__			result.put(entry.getKey(), values)__		}_		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result)__		return toMultiValueMap(unmodifiableMap)__	};return,an,unmodifiable,view,of,the,specified,multi,value,map,param,map,the,map,for,which,an,unmodifiable,view,is,to,be,returned,return,an,unmodifiable,view,of,the,specified,multi,value,map;public,static,k,v,multi,value,map,k,v,unmodifiable,multi,value,map,multi,value,map,extends,k,extends,v,map,assert,not,null,map,map,must,not,be,null,map,k,list,v,result,new,linked,hash,map,k,list,v,map,size,for,map,entry,extends,k,extends,list,extends,v,entry,map,entry,set,list,v,values,collections,unmodifiable,list,entry,get,value,result,put,entry,get,key,values,map,k,list,v,unmodifiable,map,collections,unmodifiable,map,result,return,to,multi,value,map,unmodifiable,map
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1495868221;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1496259743;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1496837955;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1496955179;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1497269532;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1500448076;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1502974979;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1515777832;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1528737477;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map);1530174524;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,nullable,properties,props,map,k,v,map,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergePropertiesIntoMap(Properties props, Map map);1328020251;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses <code>Properties.propertyNames()</code> to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be <code>null</code>)_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static void mergePropertiesIntoMap(Properties props, Map map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put(key, value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,code,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,code,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,void,merge,properties,into,map,properties,props,map,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,key,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergePropertiesIntoMap(Properties props, Map map);1356735495;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static void mergePropertiesIntoMap(Properties props, Map map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put(key, value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,void,merge,properties,into,map,properties,props,map,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,key,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergePropertiesIntoMap(Properties props, Map map);1357119239;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static void mergePropertiesIntoMap(Properties props, Map map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put(key, value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,void,merge,properties,into,map,properties,props,map,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,key,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static void mergePropertiesIntoMap(Properties props, Map map);1368482696;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static void mergePropertiesIntoMap(Properties props, Map map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put(key, value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,void,merge,properties,into,map,properties,props,map,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,key,value
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1385412762;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1385986241;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1386673232;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1398721027;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1425639171;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1436221591;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1467730834;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1474830340;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1485782330;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection<?> collection);1493370460;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection<?> collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection collection);1328020251;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or <code>null</code> if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,code,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection collection);1356735495;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection collection);1357119239;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static Class<?> findCommonElementType(Collection collection);1368482696;Find the common element type of the given Collection, if any._@param collection the Collection to check_@return the common element type, or {@code null} if no clear_common type has been found (or the collection was empty);public static Class<?> findCommonElementType(Collection collection) {_		if (isEmpty(collection)) {_			return null__		}_		Class<?> candidate = null__		for (Object val : collection) {_			if (val != null) {_				if (candidate == null) {_					candidate = val.getClass()__				}_				else if (candidate != val.getClass()) {_					return null__				}_			}_		}_		return candidate__	};find,the,common,element,type,of,the,given,collection,if,any,param,collection,the,collection,to,check,return,the,common,element,type,or,code,null,if,no,clear,common,type,has,been,found,or,the,collection,was,empty;public,static,class,find,common,element,type,collection,collection,if,is,empty,collection,return,null,class,candidate,null,for,object,val,collection,if,val,null,if,candidate,null,candidate,val,get,class,else,if,candidate,val,get,class,return,null,return,candidate
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1328020251;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1356735495;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1357119239;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1368482696;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1385412762;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1385986241;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array);1386673232;Marshal the elements from the given enumeration into an array of the given type._Enumeration elements must be assignable to the type of the given array. The array_returned will be a different instance than the array given.;public static <A,E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {_		ArrayList<A> elements = new ArrayList<A>()__		while (enumeration.hasMoreElements()) {_			elements.add(enumeration.nextElement())__		}_		return elements.toArray(array)__	};marshal,the,elements,from,the,given,enumeration,into,an,array,of,the,given,type,enumeration,elements,must,be,assignable,to,the,type,of,the,given,array,the,array,returned,will,be,a,different,instance,than,the,array,given;public,static,a,e,extends,a,a,to,array,enumeration,e,enumeration,a,array,array,list,a,elements,new,array,list,a,while,enumeration,has,more,elements,elements,add,enumeration,next,element,return,elements,to,array,array
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1385412762;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1385986241;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1386673232;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1398721027;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1425639171;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1436221591;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1467730834;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1474830340;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1485782330;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates);1493370460;Return the first element in '{@code candidates}' that is contained in_'{@code source}'. If no element in '{@code candidates}' is present in_'{@code source}' returns {@code null}. Iteration order is_{@link Collection} implementation specific._@param source the source Collection_@param candidates the candidates to search for_@return the first present object, or {@code null} if not found;@SuppressWarnings("unchecked")_	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return null__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return (E) candidate__			}_		}_		return null__	};return,the,first,element,in,code,candidates,that,is,contained,in,code,source,if,no,element,in,code,candidates,is,present,in,code,source,returns,code,null,iteration,order,is,link,collection,implementation,specific,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,the,first,present,object,or,code,null,if,not,found;suppress,warnings,unchecked,public,static,e,e,find,first,match,collection,source,collection,e,candidates,if,is,empty,source,is,empty,candidates,return,null,for,object,candidate,candidates,if,source,contains,candidate,return,e,candidate,return,null
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1328020251;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1356735495;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1357119239;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1368482696;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1385412762;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1385986241;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1386673232;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1398721027;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1425639171;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1436221591;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<E>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,e,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1467730834;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1474830340;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1485782330;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1493370460;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1495868221;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1496259743;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1496837955;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1496955179;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1497269532;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1500448076;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1502974979;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1515777832;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1528737477;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static <E> Iterator<E> toIterator(Enumeration<E> enumeration);1530174524;Adapt an enumeration to an iterator._@param enumeration the enumeration_@return the iterator;public static <E> Iterator<E> toIterator(Enumeration<E> enumeration) {_		return new EnumerationIterator<>(enumeration)__	};adapt,an,enumeration,to,an,iterator,param,enumeration,the,enumeration,return,the,iterator;public,static,e,iterator,e,to,iterator,enumeration,e,enumeration,return,new,enumeration,iterator,enumeration
CollectionUtils -> public static boolean isEmpty(Map map);1328020251;Return <code>true</code> if the supplied Map is <code>null</code>_or empty. Otherwise, return <code>false</code>._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map map) {_		return (map == null || map.isEmpty())__	};return,code,true,code,if,the,supplied,map,is,code,null,code,or,empty,otherwise,return,code,false,code,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map map);1356735495;Return {@code true} if the supplied Map is {@code null}_or empty. Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map map);1357119239;Return {@code true} if the supplied Map is {@code null}_or empty. Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map map);1368482696;Return {@code true} if the supplied Map is {@code null}_or empty. Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1385412762;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1385986241;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1386673232;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1398721027;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1425639171;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1436221591;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1467730834;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1474830340;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1485782330;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1493370460;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1495868221;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1496259743;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1496837955;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1496955179;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1497269532;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1500448076;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1502974979;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1515777832;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1528737477;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean containsAny(Collection<?> source, Collection<?> candidates);1530174524;Return {@code true} if any element in '{@code candidates}' is_contained in '{@code source}'_ otherwise returns {@code false}._@param source the source Collection_@param candidates the candidates to search for_@return whether any of the candidates has been found;public static boolean containsAny(Collection<?> source, Collection<?> candidates) {_		if (isEmpty(source) || isEmpty(candidates)) {_			return false__		}_		for (Object candidate : candidates) {_			if (source.contains(candidate)) {_				return true__			}_		}_		return false__	};return,code,true,if,any,element,in,code,candidates,is,contained,in,code,source,otherwise,returns,code,false,param,source,the,source,collection,param,candidates,the,candidates,to,search,for,return,whether,any,of,the,candidates,has,been,found;public,static,boolean,contains,any,collection,source,collection,candidates,if,is,empty,source,is,empty,candidates,return,false,for,object,candidate,candidates,if,source,contains,candidate,return,true,return,false
CollectionUtils -> public static boolean hasUniqueObject(Collection collection);1328020251;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return <code>true</code> if the collection contains a single reference or_multiple references to the same instance, <code>false</code> else;public static boolean hasUniqueObject(Collection collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,code,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,code,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection collection);1356735495;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection collection);1357119239;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection collection);1368482696;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1385412762;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1385986241;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1386673232;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1398721027;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1425639171;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1436221591;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1467730834;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1474830340;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1485782330;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1493370460;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1495868221;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1496259743;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1496837955;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1496955179;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1497269532;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1500448076;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1502974979;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1515777832;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} else;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,else;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1528737477;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} otherwise;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,otherwise;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> public static boolean hasUniqueObject(Collection<?> collection);1530174524;Determine whether the given Collection only contains a single unique object._@param collection the Collection to check_@return {@code true} if the collection contains a single reference or_multiple references to the same instance, {@code false} otherwise;public static boolean hasUniqueObject(Collection<?> collection) {_		if (isEmpty(collection)) {_			return false__		}_		boolean hasCandidate = false__		Object candidate = null__		for (Object elem : collection) {_			if (!hasCandidate) {_				hasCandidate = true__				candidate = elem__			}_			else if (candidate != elem) {_				return false__			}_		}_		return true__	};determine,whether,the,given,collection,only,contains,a,single,unique,object,param,collection,the,collection,to,check,return,code,true,if,the,collection,contains,a,single,reference,or,multiple,references,to,the,same,instance,code,false,otherwise;public,static,boolean,has,unique,object,collection,collection,if,is,empty,collection,return,false,boolean,has,candidate,false,object,candidate,null,for,object,elem,collection,if,has,candidate,has,candidate,true,candidate,elem,else,if,candidate,elem,return,false,return,true
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1328020251;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or <code>null</code> if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,code,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1356735495;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1357119239;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1368482696;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1385412762;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1385986241;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1386673232;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1398721027;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1425639171;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1436221591;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1467730834;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1474830340;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1485782330;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <T> T findValueOfType(Collection<?> collection, Class<T> type);1493370460;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	public static <T> T findValueOfType(Collection<?> collection, Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,public,static,t,t,find,value,of,type,collection,collection,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1385412762;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1385986241;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1386673232;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1398721027;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1425639171;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1436221591;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1467730834;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.getProperty(key)__				if (value == null) {_					_					value = props.get(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,property,key,if,value,null,value,props,get,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1474830340;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1485782330;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map);1493370460;Merge the given Properties instance into the given Map,_copying all properties (key-value pairs) over._<p>Uses {@code Properties.propertyNames()} to even catch_default properties linked into the original Properties instance._@param props the Properties instance to merge (may be {@code null})_@param map the target Map to merge the properties into;@SuppressWarnings("unchecked")_	public static <K, V> void mergePropertiesIntoMap(Properties props, Map<K, V> map) {_		if (map == null) {_			throw new IllegalArgumentException("Map must not be null")__		}_		if (props != null) {_			for (Enumeration<?> en = props.propertyNames()_ en.hasMoreElements()_) {_				String key = (String) en.nextElement()__				Object value = props.get(key)__				if (value == null) {_					_					value = props.getProperty(key)__				}_				map.put((K) key, (V) value)__			}_		}_	};merge,the,given,properties,instance,into,the,given,map,copying,all,properties,key,value,pairs,over,p,uses,code,properties,property,names,to,even,catch,default,properties,linked,into,the,original,properties,instance,param,props,the,properties,instance,to,merge,may,be,code,null,param,map,the,target,map,to,merge,the,properties,into;suppress,warnings,unchecked,public,static,k,v,void,merge,properties,into,map,properties,props,map,k,v,map,if,map,null,throw,new,illegal,argument,exception,map,must,not,be,null,if,props,null,for,enumeration,en,props,property,names,en,has,more,elements,string,key,string,en,next,element,object,value,props,get,key,if,value,null,value,props,get,property,key,map,put,k,key,v,value
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1385412762;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1385986241;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1386673232;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1398721027;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1425639171;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1436221591;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1467730834;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1474830340;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1485782330;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1493370460;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1495868221;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> public static boolean contains(Enumeration<?> enumeration, Object element);1496259743;Check whether the given Enumeration contains the given element._@param enumeration the Enumeration to check_@param element the element to look for_@return {@code true} if found, {@code false} else;public static boolean contains(Enumeration<?> enumeration, Object element) {_		if (enumeration != null) {_			while (enumeration.hasMoreElements()) {_				Object candidate = enumeration.nextElement()__				if (ObjectUtils.nullSafeEquals(candidate, element)) {_					return true__				}_			}_		}_		return false__	};check,whether,the,given,enumeration,contains,the,given,element,param,enumeration,the,enumeration,to,check,param,element,the,element,to,look,for,return,code,true,if,found,code,false,else;public,static,boolean,contains,enumeration,enumeration,object,element,if,enumeration,null,while,enumeration,has,more,elements,object,candidate,enumeration,next,element,if,object,utils,null,safe,equals,candidate,element,return,true,return,false
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1496837955;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1496955179;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1497269532;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1500448076;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1502974979;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1515777832;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1528737477;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type);1530174524;Find a single value of the given type in the given Collection._@param collection the Collection to search_@param type the type to look for_@return a value of the given type found if there is a clear match,_or {@code null} if none or more than one such value found;@SuppressWarnings("unchecked")_	@Nullable_	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {_		if (isEmpty(collection)) {_			return null__		}_		T value = null__		for (Object element : collection) {_			if (type == null || type.isInstance(element)) {_				if (value != null) {_					_					return null__				}_				value = (T) element__			}_		}_		return value__	};find,a,single,value,of,the,given,type,in,the,given,collection,param,collection,the,collection,to,search,param,type,the,type,to,look,for,return,a,value,of,the,given,type,found,if,there,is,a,clear,match,or,code,null,if,none,or,more,than,one,such,value,found;suppress,warnings,unchecked,nullable,public,static,t,t,find,value,of,type,collection,collection,nullable,class,t,type,if,is,empty,collection,return,null,t,value,null,for,object,element,collection,if,type,null,type,is,instance,element,if,value,null,return,null,value,t,element,return,value
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1385412762;Return {@code true} if the supplied Map is {@code null}_or empty. Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1385986241;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1386673232;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1398721027;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1425639171;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1436221591;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1467730834;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1474830340;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1485782330;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(Map<?, ?> map);1493370460;Return {@code true} if the supplied Map is {@code null} or empty._Otherwise, return {@code false}._@param map the Map to check_@return whether the given Map is empty;public static boolean isEmpty(Map<?, ?> map) {_		return (map == null || map.isEmpty())__	};return,code,true,if,the,supplied,map,is,code,null,or,empty,otherwise,return,code,false,param,map,the,map,to,check,return,whether,the,given,map,is,empty;public,static,boolean,is,empty,map,map,return,map,null,map,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1495868221;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1496259743;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1496837955;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1496955179;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1497269532;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1500448076;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1502974979;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1515777832;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1528737477;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static boolean isEmpty(@Nullable Collection<?> collection);1530174524;Return {@code true} if the supplied Collection is {@code null} or empty._Otherwise, return {@code false}._@param collection the Collection to check_@return whether the given Collection is empty;public static boolean isEmpty(@Nullable Collection<?> collection) {_		return (collection == null || collection.isEmpty())__	};return,code,true,if,the,supplied,collection,is,code,null,or,empty,otherwise,return,code,false,param,collection,the,collection,to,check,return,whether,the,given,collection,is,empty;public,static,boolean,is,empty,nullable,collection,collection,return,collection,null,collection,is,empty
CollectionUtils -> public static List arrayToList(Object source);1328020251;Convert the supplied array into a List. A primitive array gets_converted into a List of the appropriate wrapper type._<p>A <code>null</code> source value will be converted to an_empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object);public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,a,code,null,code,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object;public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> public static List arrayToList(Object source);1356735495;Convert the supplied array into a List. A primitive array gets_converted into a List of the appropriate wrapper type._<p>A {@code null} source value will be converted to an_empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object);public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object;public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> public static List arrayToList(Object source);1357119239;Convert the supplied array into a List. A primitive array gets_converted into a List of the appropriate wrapper type._<p>A {@code null} source value will be converted to an_empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object);public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object;public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> public static List arrayToList(Object source);1368482696;Convert the supplied array into a List. A primitive array gets_converted into a List of the appropriate wrapper type._<p>A {@code null} source value will be converted to an_empty List._@param source the (potentially primitive) array_@return the converted List result_@see ObjectUtils#toObjectArray(Object);public static List arrayToList(Object source) {_		return Arrays.asList(ObjectUtils.toObjectArray(source))__	};convert,the,supplied,array,into,a,list,a,primitive,array,gets,converted,into,a,list,of,the,appropriate,wrapper,type,p,a,code,null,source,value,will,be,converted,to,an,empty,list,param,source,the,potentially,primitive,array,return,the,converted,list,result,see,object,utils,to,object,array,object;public,static,list,array,to,list,object,source,return,arrays,as,list,object,utils,to,object,array,source
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable Set<T> set);1515777832;Retrieve the last element of the given Set, using {@link SortedSet#last()}_or otherwise iterating over all elements (assuming a linked set)._@param set the Set to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3_@see SortedSet_@see LinkedHashMap#keySet()_@see java.util.LinkedHashSet;@Nullable_	public static <T> T lastElement(@Nullable Set<T> set) {_		if (isEmpty(set)) {_			return null__		}_		if (set instanceof SortedSet) {_			return ((SortedSet<T>) set).last()__		}__		_		Iterator<T> it = set.iterator()__		T last = null__		while (it.hasNext()) {_			last = it.next()__		}_		return last__	};retrieve,the,last,element,of,the,given,set,using,link,sorted,set,last,or,otherwise,iterating,over,all,elements,assuming,a,linked,set,param,set,the,set,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3,see,sorted,set,see,linked,hash,map,key,set,see,java,util,linked,hash,set;nullable,public,static,t,t,last,element,nullable,set,t,set,if,is,empty,set,return,null,if,set,instanceof,sorted,set,return,sorted,set,t,set,last,iterator,t,it,set,iterator,t,last,null,while,it,has,next,last,it,next,return,last
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable Set<T> set);1528737477;Retrieve the last element of the given Set, using {@link SortedSet#last()}_or otherwise iterating over all elements (assuming a linked set)._@param set the Set to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3_@see SortedSet_@see LinkedHashMap#keySet()_@see java.util.LinkedHashSet;@Nullable_	public static <T> T lastElement(@Nullable Set<T> set) {_		if (isEmpty(set)) {_			return null__		}_		if (set instanceof SortedSet) {_			return ((SortedSet<T>) set).last()__		}__		_		Iterator<T> it = set.iterator()__		T last = null__		while (it.hasNext()) {_			last = it.next()__		}_		return last__	};retrieve,the,last,element,of,the,given,set,using,link,sorted,set,last,or,otherwise,iterating,over,all,elements,assuming,a,linked,set,param,set,the,set,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3,see,sorted,set,see,linked,hash,map,key,set,see,java,util,linked,hash,set;nullable,public,static,t,t,last,element,nullable,set,t,set,if,is,empty,set,return,null,if,set,instanceof,sorted,set,return,sorted,set,t,set,last,iterator,t,it,set,iterator,t,last,null,while,it,has,next,last,it,next,return,last
CollectionUtils -> @Nullable 	public static <T> T lastElement(@Nullable Set<T> set);1530174524;Retrieve the last element of the given Set, using {@link SortedSet#last()}_or otherwise iterating over all elements (assuming a linked set)._@param set the Set to check (may be {@code null} or empty)_@return the last element, or {@code null} if none_@since 5.0.3_@see SortedSet_@see LinkedHashMap#keySet()_@see java.util.LinkedHashSet;@Nullable_	public static <T> T lastElement(@Nullable Set<T> set) {_		if (isEmpty(set)) {_			return null__		}_		if (set instanceof SortedSet) {_			return ((SortedSet<T>) set).last()__		}__		_		Iterator<T> it = set.iterator()__		T last = null__		while (it.hasNext()) {_			last = it.next()__		}_		return last__	};retrieve,the,last,element,of,the,given,set,using,link,sorted,set,last,or,otherwise,iterating,over,all,elements,assuming,a,linked,set,param,set,the,set,to,check,may,be,code,null,or,empty,return,the,last,element,or,code,null,if,none,since,5,0,3,see,sorted,set,see,linked,hash,map,key,set,see,java,util,linked,hash,set;nullable,public,static,t,t,last,element,nullable,set,t,set,if,is,empty,set,return,null,if,set,instanceof,sorted,set,return,sorted,set,t,set,last,iterator,t,it,set,iterator,t,last,null,while,it,has,next,last,it,next,return,last
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1495868221;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1496259743;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		if (collection == null) {_			throw new IllegalArgumentException("Collection must not be null")__		}_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,if,collection,null,throw,new,illegal,argument,exception,collection,must,not,be,null,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1496837955;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1496955179;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1497269532;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1500448076;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1502974979;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1515777832;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1528737477;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
CollectionUtils -> @SuppressWarnings("unchecked") 	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection);1530174524;Merge the given array into the given Collection._@param array the array to merge (may be {@code null})_@param collection the target Collection to merge the array into;@SuppressWarnings("unchecked")_	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {_		Object[] arr = ObjectUtils.toObjectArray(array)__		for (Object elem : arr) {_			collection.add((E) elem)__		}_	};merge,the,given,array,into,the,given,collection,param,array,the,array,to,merge,may,be,code,null,param,collection,the,target,collection,to,merge,the,array,into;suppress,warnings,unchecked,public,static,e,void,merge,array,into,collection,nullable,object,array,collection,e,collection,object,arr,object,utils,to,object,array,array,for,object,elem,arr,collection,add,e,elem
