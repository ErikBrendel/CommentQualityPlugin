commented;modifiers;parameterAmount;loc;comment;code
false;public;6;17;;@Override public void visit(int version, int access, String name, String signature, @Nullable String supername, String[] interfaces) {     this.className = ClassUtils.convertResourcePathToClassName(name).     this.isInterface = ((access & Opcodes.ACC_INTERFACE) != 0).     this.isAnnotation = ((access & Opcodes.ACC_ANNOTATION) != 0).     this.isAbstract = ((access & Opcodes.ACC_ABSTRACT) != 0).     this.isFinal = ((access & Opcodes.ACC_FINAL) != 0).     if (supername != null && !this.isInterface) {         this.superClassName = ClassUtils.convertResourcePathToClassName(supername).     }     this.interfaces = new String[interfaces.length].     for (int i = 0. i < interfaces.length. i++) {         this.interfaces[i] = ClassUtils.convertResourcePathToClassName(interfaces[i]).     } }
false;public;3;4;;@Override public void visitOuterClass(String owner, String name, String desc) {     this.enclosingClassName = ClassUtils.convertResourcePathToClassName(owner). }
false;public;4;14;;@Override public void visitInnerClass(String name, @Nullable String outerName, String innerName, int access) {     if (outerName != null) {         String fqName = ClassUtils.convertResourcePathToClassName(name).         String fqOuterName = ClassUtils.convertResourcePathToClassName(outerName).         if (this.className.equals(fqName)) {             this.enclosingClassName = fqOuterName.             this.independentInnerClass = ((access & Opcodes.ACC_STATIC) != 0).         } else if (this.className.equals(fqOuterName)) {             this.memberClassNames.add(fqName).         }     } }
false;public;2;4;;@Override public void visitSource(String source, String debug) { // no-op }
false;public;2;5;;@Override public AnnotationVisitor visitAnnotation(String desc, boolean visible) {     // no-op     return new EmptyAnnotationVisitor(). }
false;public;1;4;;@Override public void visitAttribute(Attribute attr) { // no-op }
false;public;5;5;;@Override public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {     // no-op     return new EmptyFieldVisitor(). }
false;public;5;5;;@Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {     // no-op     return new EmptyMethodVisitor(). }
false;public;0;4;;@Override public void visitEnd() { // no-op }
false;public;0;4;;@Override public String getClassName() {     return this.className. }
false;public;0;4;;@Override public boolean isInterface() {     return this.isInterface. }
false;public;0;4;;@Override public boolean isAnnotation() {     return this.isAnnotation. }
false;public;0;4;;@Override public boolean isAbstract() {     return this.isAbstract. }
false;public;0;4;;@Override public boolean isConcrete() {     return !(this.isInterface || this.isAbstract). }
false;public;0;4;;@Override public boolean isFinal() {     return this.isFinal. }
false;public;0;4;;@Override public boolean isIndependent() {     return (this.enclosingClassName == null || this.independentInnerClass). }
false;public;0;4;;@Override public boolean hasEnclosingClass() {     return (this.enclosingClassName != null). }
false;public;0;5;;@Override @Nullable public String getEnclosingClassName() {     return this.enclosingClassName. }
false;public;0;4;;@Override public boolean hasSuperClass() {     return (this.superClassName != null). }
false;public;0;5;;@Override @Nullable public String getSuperClassName() {     return this.superClassName. }
false;public;0;4;;@Override public String[] getInterfaceNames() {     return this.interfaces. }
false;public;0;4;;@Override public String[] getMemberClassNames() {     return StringUtils.toStringArray(this.memberClassNames). }
false;public;2;4;;@Override public AnnotationVisitor visitAnnotation(String name, String desc) {     return this. }
false;public;1;4;;@Override public AnnotationVisitor visitArray(String name) {     return this. }
