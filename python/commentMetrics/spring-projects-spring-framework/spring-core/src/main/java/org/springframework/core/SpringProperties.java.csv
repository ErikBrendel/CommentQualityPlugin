commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;8;/**  * Programmatically set a local property, overriding an entry in the  * {@code spring.properties} file (if any).  * @param key the property key  * @param value the associated property value, or {@code null} to reset it  */ ;/**  * Programmatically set a local property, overriding an entry in the  * {@code spring.properties} file (if any).  * @param key the property key  * @param value the associated property value, or {@code null} to reset it  */ public static void setProperty(String key, @Nullable String value) {     if (value != null) {         localProperties.setProperty(key, value).     } else {         localProperties.remove(key).     } }
true;public,static;1;15;/**  * Retrieve the property value for the given key, checking local Spring  * properties first and falling back to JVM-level system properties.  * @param key the property key  * @return the associated property value, or {@code null} if none found  */ ;/**  * Retrieve the property value for the given key, checking local Spring  * properties first and falling back to JVM-level system properties.  * @param key the property key  * @return the associated property value, or {@code null} if none found  */ @Nullable public static String getProperty(String key) {     String value = localProperties.getProperty(key).     if (value == null) {         try {             value = System.getProperty(key).         } catch (Throwable ex) {             if (logger.isDebugEnabled()) {                 logger.debug("Could not retrieve system property '" + key + "': " + ex).             }         }     }     return value. }
true;public,static;1;3;/**  * Programmatically set a local flag to "true", overriding an  * entry in the {@code spring.properties} file (if any).  * @param key the property key  */ ;/**  * Programmatically set a local flag to "true", overriding an  * entry in the {@code spring.properties} file (if any).  * @param key the property key  */ public static void setFlag(String key) {     localProperties.put(key, Boolean.TRUE.toString()). }
true;public,static;1;3;/**  * Retrieve the flag for the given property key.  * @param key the property key  * @return {@code true} if the property is set to "true",  * {@code} false otherwise  */ ;/**  * Retrieve the flag for the given property key.  * @param key the property key  * @return {@code true} if the property is set to "true",  * {@code} false otherwise  */ public static boolean getFlag(String key) {     return Boolean.parseBoolean(getProperty(key)). }
