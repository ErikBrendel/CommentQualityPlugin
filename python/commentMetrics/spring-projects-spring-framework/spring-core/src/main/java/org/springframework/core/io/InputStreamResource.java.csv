commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * This implementation always returns {@code true}.  */ ;/**  * This implementation always returns {@code true}.  */ @Override public boolean exists() {     return true. }
true;public;0;4;/**  * This implementation always returns {@code true}.  */ ;/**  * This implementation always returns {@code true}.  */ @Override public boolean isOpen() {     return true. }
true;public;0;9;/**  * This implementation throws IllegalStateException if attempting to  * read the underlying stream multiple times.  */ ;/**  * This implementation throws IllegalStateException if attempting to  * read the underlying stream multiple times.  */ @Override public InputStream getInputStream() throws IOException, IllegalStateException {     if (this.read) {         throw new IllegalStateException("InputStream has already been read - " + "do not use InputStreamResource if a stream needs to be read multiple times").     }     this.read = true.     return this.inputStream. }
true;public;0;4;/**  * This implementation returns a description that includes the passed-in  * description, if any.  */ ;/**  * This implementation returns a description that includes the passed-in  * description, if any.  */ @Override public String getDescription() {     return "InputStream resource [" + this.description + "]". }
true;public;1;5;/**  * This implementation compares the underlying InputStream.  */ ;/**  * This implementation compares the underlying InputStream.  */ @Override public boolean equals(Object other) {     return (this == other || (other instanceof InputStreamResource && ((InputStreamResource) other).inputStream.equals(this.inputStream))). }
true;public;0;4;/**  * This implementation returns the hash code of the underlying InputStream.  */ ;/**  * This implementation returns the hash code of the underlying InputStream.  */ @Override public int hashCode() {     return this.inputStream.hashCode(). }
