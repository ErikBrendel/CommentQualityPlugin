commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the underlying Method.  */ ;/**  * Return the underlying Method.  */ public final Method getIntrospectedMethod() {     return this.introspectedMethod. }
false;public;0;4;;@Override public String getMethodName() {     return this.introspectedMethod.getName(). }
false;public;0;4;;@Override public String getDeclaringClassName() {     return this.introspectedMethod.getDeclaringClass().getName(). }
false;public;0;4;;@Override public String getReturnTypeName() {     return this.introspectedMethod.getReturnType().getName(). }
false;public;0;4;;@Override public boolean isAbstract() {     return Modifier.isAbstract(this.introspectedMethod.getModifiers()). }
false;public;0;4;;@Override public boolean isStatic() {     return Modifier.isStatic(this.introspectedMethod.getModifiers()). }
false;public;0;4;;@Override public boolean isFinal() {     return Modifier.isFinal(this.introspectedMethod.getModifiers()). }
false;public;0;4;;@Override public boolean isOverridable() {     return (!isStatic() && !isFinal() && !Modifier.isPrivate(this.introspectedMethod.getModifiers())). }
false;public;1;4;;@Override public boolean isAnnotated(String annotationName) {     return AnnotatedElementUtils.isAnnotated(this.introspectedMethod, annotationName). }
false;public;1;5;;@Override @Nullable public Map<String, Object> getAnnotationAttributes(String annotationName) {     return getAnnotationAttributes(annotationName, false). }
false;public;2;6;;@Override @Nullable public Map<String, Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString) {     return AnnotatedElementUtils.getMergedAnnotationAttributes(this.introspectedMethod, annotationName, classValuesAsString, this.nestedAnnotationsAsMap). }
false;public;1;5;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName) {     return getAllAnnotationAttributes(annotationName, false). }
false;public;2;6;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {     return AnnotatedElementUtils.getAllAnnotationAttributes(this.introspectedMethod, annotationName, classValuesAsString, this.nestedAnnotationsAsMap). }
