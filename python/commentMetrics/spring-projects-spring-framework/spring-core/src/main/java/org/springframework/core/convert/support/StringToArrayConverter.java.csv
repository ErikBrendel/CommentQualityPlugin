commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(String.class, Object[].class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), this.conversionService). }
false;public;3;18;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     String string = (String) source.     String[] fields = StringUtils.commaDelimitedListToStringArray(string).     TypeDescriptor targetElementType = targetType.getElementTypeDescriptor().     Assert.state(targetElementType != null, "No target element type").     Object target = Array.newInstance(targetElementType.getType(), fields.length).     for (int i = 0. i < fields.length. i++) {         String sourceElement = fields[i].         Object targetElement = this.conversionService.convert(sourceElement.trim(), sourceType, targetElementType).         Array.set(target, i, targetElement).     }     return target. }
