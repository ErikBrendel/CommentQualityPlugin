commented;modifiers;parameterAmount;loc;comment;code
false;public;1;31;;@Override public String style(@Nullable Object value) {     if (value == null) {         return NULL.     } else if (value instanceof String) {         return "\'" + value + "\'".     } else if (value instanceof Class) {         return ClassUtils.getShortName((Class<?>) value).     } else if (value instanceof Method) {         Method method = (Method) value.         return method.getName() + "@" + ClassUtils.getShortName(method.getDeclaringClass()).     } else if (value instanceof Map) {         return style((Map<?, ?>) value).     } else if (value instanceof Map.Entry) {         return style((Map.Entry<?, ?>) value).     } else if (value instanceof Collection) {         return style((Collection<?>) value).     } else if (value.getClass().isArray()) {         return styleArray(ObjectUtils.toObjectArray(value)).     } else {         return String.valueOf(value).     } }
false;private;1;16;;private <K, V> String style(Map<K, V> value) {     StringBuilder result = new StringBuilder(value.size() * 8 + 16).     result.append(MAP + "[").     for (Iterator<Map.Entry<K, V>> it = value.entrySet().iterator(). it.hasNext(). ) {         Map.Entry<K, V> entry = it.next().         result.append(style(entry)).         if (it.hasNext()) {             result.append(',').append(' ').         }     }     if (value.isEmpty()) {         result.append(EMPTY).     }     result.append("]").     return result.toString(). }
false;private;1;3;;private String style(Map.Entry<?, ?> value) {     return style(value.getKey()) + " -> " + style(value.getValue()). }
false;private;1;15;;private String style(Collection<?> value) {     StringBuilder result = new StringBuilder(value.size() * 8 + 16).     result.append(getCollectionTypeString(value)).append('[').     for (Iterator<?> i = value.iterator(). i.hasNext(). ) {         result.append(style(i.next())).         if (i.hasNext()) {             result.append(',').append(' ').         }     }     if (value.isEmpty()) {         result.append(EMPTY).     }     result.append("]").     return result.toString(). }
false;private;1;11;;private String getCollectionTypeString(Collection<?> value) {     if (value instanceof List) {         return LIST.     } else if (value instanceof Set) {         return SET.     } else {         return COLLECTION.     } }
false;private;1;16;;private String styleArray(Object[] array) {     StringBuilder result = new StringBuilder(array.length * 8 + 16).     result.append(ARRAY + "<").append(ClassUtils.getShortName(array.getClass().getComponentType())).append(">[").     for (int i = 0. i < array.length - 1. i++) {         result.append(style(array[i])).         result.append(',').append(' ').     }     if (array.length > 0) {         result.append(style(array[array.length - 1])).     } else {         result.append(EMPTY).     }     result.append("]").     return result.toString(). }
