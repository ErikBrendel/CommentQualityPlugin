# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1328020251;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractJarFileURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,jar,file,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1329393628;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractJarFileURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,jar,file,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1389888563;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractJarFileURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,jar,file,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1444762049;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1468947211;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1473882375;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1493223420;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1500332081;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1515363508;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1527623253;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1527625907;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> @Override 	protected File getFileForLastModifiedCheck() throws IOException;1539119591;This implementation determines the underlying File_(or jar file, in case of a resource in a jar/zip).;@Override_	protected File getFileForLastModifiedCheck() throws IOException {_		URL url = getURL()__		if (ResourceUtils.isJarURL(url)) {_			URL actualUrl = ResourceUtils.extractArchiveURL(url)__			if (actualUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(actualUrl).getFile()__			}_			return ResourceUtils.getFile(actualUrl, "Jar URL")__		}_		else {_			return getFile()__		}_	};this,implementation,determines,the,underlying,file,or,jar,file,in,case,of,a,resource,in,a,jar,zip;override,protected,file,get,file,for,last,modified,check,throws,ioexception,url,url,get,url,if,resource,utils,is,jar,url,url,url,actual,url,resource,utils,extract,archive,url,url,if,actual,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,actual,url,get,file,return,resource,utils,get,file,actual,url,jar,url,else,return,get,file
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1389888563;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1444762049;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1468947211;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1473882375;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1493223420;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1500332081;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1515363508;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1527623253;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1527625907;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected void customizeConnection(HttpURLConnection con) throws IOException;1539119591;Customize the given {@link HttpURLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Sets request method "HEAD" by default. Can be overridden in subclasses._@param con the HttpURLConnection to customize_@throws IOException if thrown from HttpURLConnection methods;protected void customizeConnection(HttpURLConnection con) throws IOException {_		con.setRequestMethod("HEAD")__	};customize,the,given,link,http,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,sets,request,method,head,by,default,can,be,overridden,in,subclasses,param,con,the,http,urlconnection,to,customize,throws,ioexception,if,thrown,from,http,urlconnection,methods;protected,void,customize,connection,http,urlconnection,con,throws,ioexception,con,set,request,method,head
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1328020251;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1329393628;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1389888563;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1444762049;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1468947211;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1473882375;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1493223420;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1500332081;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1515363508;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1527623253;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1527625907;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> protected File getFile(URI uri) throws IOException;1539119591;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URI, String);protected File getFile(URI uri) throws IOException {_		if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(uri).getFile()__		}_		return ResourceUtils.getFile(uri, getDescription())__	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,uri,string;protected,file,get,file,uri,uri,throws,ioexception,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,get,file,return,resource,utils,get,file,uri,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1328020251;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1329393628;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1389888563;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1444762049;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1468947211;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1473882375;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1493223420;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1500332081;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1515363508;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1527623253;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1527625907;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> @Override 	public File getFile() throws IOException;1539119591;This implementation returns a File reference for the underlying class path_resource, provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		URL url = getURL()__		if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_			return VfsResourceDelegate.getResource(url).getFile()__		}_		return ResourceUtils.getFile(url, getDescription())__	};this,implementation,returns,a,file,reference,for,the,underlying,class,path,resource,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,url,url,get,url,if,url,get,protocol,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,url,get,file,return,resource,utils,get,file,url,get,description
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1389888563;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1444762049;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1468947211;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1473882375;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1493223420;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1500332081;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1515363508;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1527623253;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1527625907;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected void customizeConnection(URLConnection con) throws IOException;1539119591;Customize the given {@link URLConnection}, obtained in the course of an_{@link #exists()}, {@link #contentLength()} or {@link #lastModified()} call._<p>Calls {@link ResourceUtils#useCachesIfNecessary(URLConnection)} and_delegates to {@link #customizeConnection(HttpURLConnection)} if possible._Can be overridden in subclasses._@param con the URLConnection to customize_@throws IOException if thrown from URLConnection methods;protected void customizeConnection(URLConnection con) throws IOException {_		ResourceUtils.useCachesIfNecessary(con)__		if (con instanceof HttpURLConnection) {_			customizeConnection((HttpURLConnection) con)__		}_	};customize,the,given,link,urlconnection,obtained,in,the,course,of,an,link,exists,link,content,length,or,link,last,modified,call,p,calls,link,resource,utils,use,caches,if,necessary,urlconnection,and,delegates,to,link,customize,connection,http,urlconnection,if,possible,can,be,overridden,in,subclasses,param,con,the,urlconnection,to,customize,throws,ioexception,if,thrown,from,urlconnection,methods;protected,void,customize,connection,urlconnection,con,throws,ioexception,resource,utils,use,caches,if,necessary,con,if,con,instanceof,http,urlconnection,customize,connection,http,urlconnection,con
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1468947211;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1473882375;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1493223420;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1500332081;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1515363508;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1527623253;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (Exception ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,exception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1527625907;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> protected boolean isFile(URI uri);1539119591;This implementation returns a File reference for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);protected boolean isFile(URI uri) {_		try {_			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				return VfsResourceDelegate.getResource(uri).isFile()__			}_			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme())__		}_		catch (IOException ex) {_			return false__		}_	};this,implementation,returns,a,file,reference,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;protected,boolean,is,file,uri,uri,try,if,uri,get,scheme,starts,with,resource,utils,return,vfs,resource,delegate,get,resource,uri,is,file,return,resource,utils,equals,uri,get,scheme,catch,ioexception,ex,return,false
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1473882375;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		if (isFile()) {_			return new FileInputStream(getFile()).getChannel()__		}_		else {_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;override,public,readable,byte,channel,readable,channel,throws,ioexception,if,is,file,return,new,file,input,stream,get,file,get,channel,else,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1493223420;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		if (isFile()) {_			return new FileInputStream(getFile()).getChannel()__		}_		else {_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;override,public,readable,byte,channel,readable,channel,throws,ioexception,if,is,file,return,new,file,input,stream,get,file,get,channel,else,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1500332081;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile(URI);@Override_	public ReadableByteChannel readableChannel() throws IOException {_		if (isFile()) {_			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__		}_		else {_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file,uri;override,public,readable,byte,channel,readable,channel,throws,ioexception,if,is,file,return,file,channel,open,get,file,to,path,standard,open,option,read,else,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1515363508;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile();@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			_			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__		}_		catch (FileNotFoundException | NoSuchFileException ex) {_			_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,get,file,to,path,standard,open,option,read,catch,file,not,found,exception,no,such,file,exception,ex,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1527623253;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile();@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			_			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__		}_		catch (FileNotFoundException | NoSuchFileException ex) {_			_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,get,file,to,path,standard,open,option,read,catch,file,not,found,exception,no,such,file,exception,ex,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1527625907;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile();@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			_			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__		}_		catch (FileNotFoundException | NoSuchFileException ex) {_			_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,get,file,to,path,standard,open,option,read,catch,file,not,found,exception,no,such,file,exception,ex,return,super,readable,channel
AbstractFileResolvingResource -> @Override 	public ReadableByteChannel readableChannel() throws IOException;1539119591;This implementation returns a FileChannel for the given URI-identified_resource, provided that it refers to a file in the file system._@since 5.0_@see #getFile();@Override_	public ReadableByteChannel readableChannel() throws IOException {_		try {_			_			return FileChannel.open(getFile().toPath(), StandardOpenOption.READ)__		}_		catch (FileNotFoundException | NoSuchFileException ex) {_			_			return super.readableChannel()__		}_	};this,implementation,returns,a,file,channel,for,the,given,uri,identified,resource,provided,that,it,refers,to,a,file,in,the,file,system,since,5,0,see,get,file;override,public,readable,byte,channel,readable,channel,throws,ioexception,try,return,file,channel,open,get,file,to,path,standard,open,option,read,catch,file,not,found,exception,no,such,file,exception,ex,return,super,readable,channel
