# id;timestamp;commentText;codeText;commentWords;codeWords
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1328020251;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1351285766;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1351584957;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1351630812;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1351793425;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1355352386;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1356202335;Template method to convert a null source._<p>Default implementation returns <code>null</code>._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,code,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1356735495;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1357119239;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1368482696;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1382747217;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1385412762;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1387554265;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1388427184;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1391248381;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1391253301;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1391279080;Template method to convert a null source._<p>Default implementation returns {@code null}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1402942616;Template method to convert a null source._<p>Default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.uti.Optional}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,uti,optional,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1403205946;Template method to convert a null source._<p>Default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.uti.Optional}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,uti,optional,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1407314712;Template method to convert a null source._<p>Default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.uti.Optional}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,uti,optional,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1410535431;Template method to convert a null source._<p>Default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.uti.Optional}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,uti,optional,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1410914141;Template method to convert a null source._<p>Default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.uti.Optional}._Subclasses may override to return custom null objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,null,source,p,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,uti,optional,subclasses,may,override,to,return,custom,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1427240571;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1434376553;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,equals,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1448975504;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType() == javaUtilOptionalEmpty.getClass()) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1453750406;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType() == javaUtilOptionalEmpty.getClass()) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1458999130;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (javaUtilOptionalEmpty != null && targetType.getObjectType() == javaUtilOptionalEmpty.getClass()) {_			return javaUtilOptionalEmpty__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,java,util,optional,empty,null,target,type,get,object,type,java,util,optional,empty,get,class,return,java,util,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1467677340;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1467730834;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1477045452;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1479823020;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the sourceType to convert from_@param targetType the targetType to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1481579380;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1351630812;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1351793425;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1355352386;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1356202335;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1356735495;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1357119239;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1368482696;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1382747217;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1385412762;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1387554265;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1388427184;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1391248381;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1391253301;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1391279080;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1402942616;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1403205946;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1407314712;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1410535431;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1410914141;Returns true if conversion between the sourceType and targetType can be bypassed._More precisely this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if conversion can be bypassed_@throws IllegalArgumentException if targetType is null_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "The targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};returns,true,if,conversion,between,the,source,type,and,target,type,can,be,bypassed,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,conversion,can,be,bypassed,throws,illegal,argument,exception,if,target,type,is,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,the,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1427240571;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1434376553;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1448975504;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1453750406;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1458999130;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1467677340;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1467730834;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1477045452;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1479823020;Return whether conversion between the sourceType and targetType can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the targetType by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "targetType to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType);1481579380;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1495868221;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496242568;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496259743;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496837955;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1502974979;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1530174524;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1532520919;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);@Nullable_	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;nullable,protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> Converters -> private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type);1351584957;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type) {_			if(type.isPrimitive()) {_				type = TypeDescriptor.valueOf(type.getObjectType())__			}_			Set<TypeDescriptor> typeHierarchy = new LinkedHashSet<TypeDescriptor>()__			collectTypeHierarchy(typeHierarchy, type)__			if(type.isArray()) {_				typeHierarchy.add(TypeDescriptor.valueOf(Object[].class))__			}_			typeHierarchy.add(TypeDescriptor.valueOf(Object.class))__			return new ArrayList<TypeDescriptor>(typeHierarchy)__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,type,descriptor,get,type,hierarchy,type,descriptor,type,if,type,is,primitive,type,type,descriptor,value,of,type,get,object,type,set,type,descriptor,type,hierarchy,new,linked,hash,set,type,descriptor,collect,type,hierarchy,type,hierarchy,type,if,type,is,array,type,hierarchy,add,type,descriptor,value,of,object,class,type,hierarchy,add,type,descriptor,value,of,object,class,return,new,array,list,type,descriptor,type,hierarchy
GenericConversionService -> Converters -> private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type);1351630812;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type) {_			if(type.isPrimitive()) {_				type = TypeDescriptor.valueOf(type.getObjectType())__			}_			Set<TypeDescriptor> typeHierarchy = new LinkedHashSet<TypeDescriptor>()__			collectTypeHierarchy(typeHierarchy, type)__			if(type.isArray()) {_				typeHierarchy.add(TypeDescriptor.valueOf(Object[].class))__			}_			typeHierarchy.add(TypeDescriptor.valueOf(Object.class))__			return new ArrayList<TypeDescriptor>(typeHierarchy)__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,type,descriptor,get,type,hierarchy,type,descriptor,type,if,type,is,primitive,type,type,descriptor,value,of,type,get,object,type,set,type,descriptor,type,hierarchy,new,linked,hash,set,type,descriptor,collect,type,hierarchy,type,hierarchy,type,if,type,is,array,type,hierarchy,add,type,descriptor,value,of,object,class,type,hierarchy,add,type,descriptor,value,of,object,class,return,new,array,list,type,descriptor,type,hierarchy
GenericConversionService -> Converters -> private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type);1351793425;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type) {_			if(type.isPrimitive()) {_				type = TypeDescriptor.valueOf(type.getObjectType())__			}_			Set<TypeDescriptor> typeHierarchy = new LinkedHashSet<TypeDescriptor>()__			collectTypeHierarchy(typeHierarchy, type)__			if(type.isArray()) {_				typeHierarchy.add(TypeDescriptor.valueOf(Object[].class))__			}_			typeHierarchy.add(TypeDescriptor.valueOf(Object.class))__			return new ArrayList<TypeDescriptor>(typeHierarchy)__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,type,descriptor,get,type,hierarchy,type,descriptor,type,if,type,is,primitive,type,type,descriptor,value,of,type,get,object,type,set,type,descriptor,type,hierarchy,new,linked,hash,set,type,descriptor,collect,type,hierarchy,type,hierarchy,type,if,type,is,array,type,hierarchy,add,type,descriptor,value,of,object,class,type,hierarchy,add,type,descriptor,value,of,object,class,return,new,array,list,type,descriptor,type,hierarchy
GenericConversionService -> Converters -> private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type);1355352386;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<TypeDescriptor> getTypeHierarchy(TypeDescriptor type) {_			if(type.isPrimitive()) {_				type = TypeDescriptor.valueOf(type.getObjectType())__			}_			Set<TypeDescriptor> typeHierarchy = new LinkedHashSet<TypeDescriptor>()__			collectTypeHierarchy(typeHierarchy, type)__			if(type.isArray()) {_				typeHierarchy.add(TypeDescriptor.valueOf(Object[].class))__			}_			typeHierarchy.add(TypeDescriptor.valueOf(Object.class))__			return new ArrayList<TypeDescriptor>(typeHierarchy)__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,type,descriptor,get,type,hierarchy,type,descriptor,type,if,type,is,primitive,type,type,descriptor,value,of,type,get,object,type,set,type,descriptor,type,hierarchy,new,linked,hash,set,type,descriptor,collect,type,hierarchy,type,hierarchy,type,if,type,is,array,type,hierarchy,add,type,descriptor,value,of,object,class,type,hierarchy,add,type,descriptor,value,of,object,class,return,new,array,list,type,descriptor,type,hierarchy
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1328020251;Convenience operation for converting a source object to the specified targetType, where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and encapsulates the construction of the sourceType descriptor using {@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1351285766;Convenience operation for converting a source object to the specified targetType, where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and encapsulates the construction of the sourceType descriptor using {@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1351584957;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1351630812;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1351793425;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1355352386;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1356202335;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1356735495;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1357119239;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1368482696;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1382747217;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1385412762;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1387554265;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1388427184;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1391248381;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1391253301;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1391279080;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1402942616;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1403205946;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1407314712;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1410535431;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1410914141;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null,_or sourceType is null but source is not null;public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,or,source,type,is,null,but,source,is,not,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1427240571;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1434376553;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1448975504;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1453750406;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1458999130;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1467677340;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1467730834;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1477045452;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1479823020;Convenience operation for converting a source object to the specified targetType,_where the targetType is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the sourceType descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> public Object convert(Object source, TypeDescriptor targetType);1481579380;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};public Object convert(Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;public,object,convert,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1495868221;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType);1496242568;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1495868221;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496242568;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496259743;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1496837955;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1502974979;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1530174524;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1532520919;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;@Nullable_	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;nullable,protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1496259743;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,nullable,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1496837955;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,nullable,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1502974979;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,nullable,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1530174524;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,nullable,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> @Nullable 	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1532520919;Template method to convert a {@code null} source._<p>The default implementation returns {@code null} or the Java 8_{@link java.util.Optional#empty()} instance if the target type is_{@code java.util.Optional}. Subclasses may override this to return_custom {@code null} objects for specific target types._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the converted null object;@Nullable_	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		if (targetType.getObjectType() == Optional.class) {_			return Optional.empty()__		}_		return null__	};template,method,to,convert,a,code,null,source,p,the,default,implementation,returns,code,null,or,the,java,8,link,java,util,optional,empty,instance,if,the,target,type,is,code,java,util,optional,subclasses,may,override,this,to,return,custom,code,null,objects,for,specific,target,types,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,converted,null,object;nullable,protected,object,convert,null,source,nullable,type,descriptor,source,type,type,descriptor,target,type,if,target,type,get,object,type,optional,class,return,optional,empty,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1328020251;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or <code>null</code> if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}_		else {_			converter = findConverterForClassPair(sourceType, targetType)__			if (converter == null) {_				converter = getDefaultConverter(sourceType, targetType)_				_			}_			if (converter != null) {_				this.converterCache.put(key, converter)__				return converter__			}_			else {_				this.converterCache.put(key, NO_MATCH)__				return null__			}_		}_	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,code,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,else,converter,find,converter,for,class,pair,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,else,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351285766;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or <code>null</code> if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}_		else {_			converter = findConverterForClassPair(sourceType, targetType)__			if (converter == null) {_				converter = getDefaultConverter(sourceType, targetType)__			}_			if (converter != null) {_				this.converterCache.put(key, converter)__				return converter__			}_			else {_				this.converterCache.put(key, NO_MATCH)__				return null__			}_		}_	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,code,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,else,converter,find,converter,for,class,pair,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,else,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351584957;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351630812;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351793425;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1355352386;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1356202335;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1356735495;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1357119239;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1368482696;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1382747217;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1385412762;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1387554265;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1388427184;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391248381;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391253301;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391279080;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1402942616;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1403205946;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1407314712;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1410535431;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1410914141;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion, or {@code null} if_no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1427240571;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1434376553;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1448975504;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1453750406;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1458999130;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1467677340;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1467730834;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1477045452;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1479823020;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1481579380;Hook method to lookup the converter for a given sourceType/targetType pair._First queries this ConversionService's converter cache._On a cache miss, then performs an exhaustive search for a matching converter._If no converter matches, returns the default converter._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the generic converter that will perform the conversion,_or {@code null} if no suitable converter was found_@see #getDefaultConverter(TypeDescriptor, TypeDescriptor);protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType)__		GenericConverter converter = this.converterCache.get(key)__		if (converter != null) {_			return (converter != NO_MATCH ? converter : null)__		}__		converter = this.converters.find(sourceType, targetType)__		if (converter == null) {_			converter = getDefaultConverter(sourceType, targetType)__		}__		if (converter != null) {_			this.converterCache.put(key, converter)__			return converter__		}__		this.converterCache.put(key, NO_MATCH)__		return null__	};hook,method,to,lookup,the,converter,for,a,given,source,type,target,type,pair,first,queries,this,conversion,service,s,converter,cache,on,a,cache,miss,then,performs,an,exhaustive,search,for,a,matching,converter,if,no,converter,matches,returns,the,default,converter,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,generic,converter,that,will,perform,the,conversion,or,code,null,if,no,suitable,converter,was,found,see,get,default,converter,type,descriptor,type,descriptor;protected,generic,converter,get,converter,type,descriptor,source,type,type,descriptor,target,type,converter,cache,key,key,new,converter,cache,key,source,type,target,type,generic,converter,converter,this,converter,cache,get,key,if,converter,null,return,converter,converter,null,converter,this,converters,find,source,type,target,type,if,converter,null,converter,get,default,converter,source,type,target,type,if,converter,null,this,converter,cache,put,key,converter,return,converter,this,converter,cache,put,key,return,null
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1495868221;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1496242568;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1496259743;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1496837955;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1502974979;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1530174524;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);1532520919;Return whether conversion between the source type and the target type can be bypassed._<p>More precisely, this method will return true if objects of sourceType can be_converted to the target type by returning the source object unchanged._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if conversion can be bypassed_ {@code false} otherwise_@throws IllegalArgumentException if targetType is {@code null}_@since 3.2;public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {_		Assert.notNull(targetType, "Target type to convert to cannot be null")__		if (sourceType == null) {_			return true__		}_		GenericConverter converter = getConverter(sourceType, targetType)__		return (converter == NO_OP_CONVERTER)__	};return,whether,conversion,between,the,source,type,and,the,target,type,can,be,bypassed,p,more,precisely,this,method,will,return,true,if,objects,of,source,type,can,be,converted,to,the,target,type,by,returning,the,source,object,unchanged,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,conversion,can,be,bypassed,code,false,otherwise,throws,illegal,argument,exception,if,target,type,is,code,null,since,3,2;public,boolean,can,bypass,convert,nullable,type,descriptor,source,type,type,descriptor,target,type,assert,not,null,target,type,target,type,to,convert,to,cannot,be,null,if,source,type,null,return,true,generic,converter,converter,get,converter,source,type,target,type,return,converter
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1495868221;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1496242568;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1496259743;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1496837955;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1502974979;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1530174524;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> @Nullable 	public Object convert(@Nullable Object source, TypeDescriptor targetType);1532520919;Convenience operation for converting a source object to the specified targetType,_where the target type is a descriptor that provides additional conversion context._Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and_encapsulates the construction of the source type descriptor using_{@link TypeDescriptor#forObject(Object)}._@param source the source object_@param targetType the target type_@return the converted value_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or sourceType is {@code null} but source is not {@code null};@Nullable_	public Object convert(@Nullable Object source, TypeDescriptor targetType) {_		return convert(source, TypeDescriptor.forObject(source), targetType)__	};convenience,operation,for,converting,a,source,object,to,the,specified,target,type,where,the,target,type,is,a,descriptor,that,provides,additional,conversion,context,simply,delegates,to,link,convert,object,type,descriptor,type,descriptor,and,encapsulates,the,construction,of,the,source,type,descriptor,using,link,type,descriptor,for,object,object,param,source,the,source,object,param,target,type,the,target,type,return,the,converted,value,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,source,type,is,code,null,but,source,is,not,code,null;nullable,public,object,convert,nullable,object,source,type,descriptor,target,type,return,convert,source,type,descriptor,for,object,source,target,type
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1328020251;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351285766;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351584957;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351630812;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1351793425;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1355352386;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1356202335;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns <code>null</code> otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,code,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1356735495;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1357119239;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1368482696;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1382747217;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1385412762;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1387554265;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1388427184;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391248381;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391253301;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1391279080;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1402942616;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1403205946;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1407314712;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1410535431;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1410914141;Return the default converter if no converter is found for the given sourceType/targetType pair._Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._Subclasses may override._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,subclasses,may,override,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1427240571;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1434376553;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1448975504;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1453750406;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1458999130;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1467677340;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1467730834;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1477045452;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1479823020;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the sourceType is assignable to the targetType._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType);1481579380;Return the default converter if no converter is found for the given sourceType/targetType pair._<p>Returns a NO_OP Converter if the source type is assignable to the target type._Returns {@code null} otherwise, indicating no suitable converter could be found._@param sourceType the source type to convert from_@param targetType the target type to convert to_@return the default generic converter that will perform the conversion;protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {_		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null)__	};return,the,default,converter,if,no,converter,is,found,for,the,given,source,type,target,type,pair,p,returns,a,converter,if,the,source,type,is,assignable,to,the,target,type,returns,code,null,otherwise,indicating,no,suitable,converter,could,be,found,param,source,type,the,source,type,to,convert,from,param,target,type,the,target,type,to,convert,to,return,the,default,generic,converter,that,will,perform,the,conversion;protected,generic,converter,get,default,converter,type,descriptor,source,type,type,descriptor,target,type,return,source,type,is,assignable,to,target,type,null
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1356202335;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1356735495;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1357119239;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1368482696;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1382747217;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1385412762;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1387554265;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1388427184;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or_implements.;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType()_						: ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1391248381;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1391253301;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1391279080;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1402942616;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1403205946;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				for (Class<?> implementedInterface : candidate.getInterfaces()) {_					addToClassHierarchy(hierarchy.size(), implementedInterface, array, hierarchy, visited)__				}_				i++__			}_			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,for,class,implemented,interface,candidate,get,interfaces,add,to,class,hierarchy,hierarchy,size,implemented,interface,array,hierarchy,visited,i,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1407314712;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (candidate.getSuperclass() != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (type.isEnum()) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,candidate,get,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,type,is,enum,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1410535431;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1410914141;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()__			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1427240571;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1434376553;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1448975504;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1453750406;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1458999130;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1467677340;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)__			Set<Class<?>> visited = new HashSet<Class<?>>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,class,20,set,class,visited,new,hash,set,class,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1467730834;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1477045452;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1479823020;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1481579380;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1495868221;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1496242568;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1496259743;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1496837955;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1502974979;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1530174524;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> private List<Class<?>> getClassHierarchy(Class<?> type);1532520919;Returns an ordered class hierarchy for the given type._@param type the type_@return an ordered list of all classes that the given type extends or implements;private List<Class<?>> getClassHierarchy(Class<?> type) {_			List<Class<?>> hierarchy = new ArrayList<>(20)__			Set<Class<?>> visited = new HashSet<>(20)__			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)__			boolean array = type.isArray()___			int i = 0__			while (i < hierarchy.size()) {_				Class<?> candidate = hierarchy.get(i)__				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))__				Class<?> superclass = candidate.getSuperclass()__				if (superclass != null && superclass != Object.class && superclass != Enum.class) {_					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)__				}_				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)__				i++__			}__			if (Enum.class.isAssignableFrom(type)) {_				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)__				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)__				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)__			}__			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)__			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)__			return hierarchy__		};returns,an,ordered,class,hierarchy,for,the,given,type,param,type,the,type,return,an,ordered,list,of,all,classes,that,the,given,type,extends,or,implements;private,list,class,get,class,hierarchy,class,type,list,class,hierarchy,new,array,list,20,set,class,visited,new,hash,set,20,add,to,class,hierarchy,0,class,utils,resolve,primitive,if,necessary,type,false,hierarchy,visited,boolean,array,type,is,array,int,i,0,while,i,hierarchy,size,class,candidate,hierarchy,get,i,candidate,array,candidate,get,component,type,class,utils,resolve,primitive,if,necessary,candidate,class,superclass,candidate,get,superclass,if,superclass,null,superclass,object,class,superclass,enum,class,add,to,class,hierarchy,i,1,candidate,get,superclass,array,hierarchy,visited,add,interfaces,to,class,hierarchy,candidate,array,hierarchy,visited,i,if,enum,class,is,assignable,from,type,add,to,class,hierarchy,hierarchy,size,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,enum,class,false,hierarchy,visited,add,interfaces,to,class,hierarchy,enum,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,array,hierarchy,visited,add,to,class,hierarchy,hierarchy,size,object,class,false,hierarchy,visited,return,hierarchy
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1351584957;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>_@see #getTypeHierarchy(Class);public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<TypeDescriptor> sourceCandidates = getTypeHierarchy(sourceType)__			List<TypeDescriptor> targetCandidates = getTypeHierarchy(targetType)__			for (TypeDescriptor sourceCandidate : sourceCandidates) {_				for (TypeDescriptor targetCandidate : targetCandidates) {_					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, sourceCandidate, targetCandidate)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt,see,get,type,hierarchy,class;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,type,descriptor,source,candidates,get,type,hierarchy,source,type,list,type,descriptor,target,candidates,get,type,hierarchy,target,type,for,type,descriptor,source,candidate,source,candidates,for,type,descriptor,target,candidate,target,candidates,generic,converter,converter,get,registered,converter,source,type,target,type,source,candidate,target,candidate,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1351630812;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>_@see #getTypeHierarchy(Class);public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<TypeDescriptor> sourceCandidates = getTypeHierarchy(sourceType)__			List<TypeDescriptor> targetCandidates = getTypeHierarchy(targetType)__			for (TypeDescriptor sourceCandidate : sourceCandidates) {_				for (TypeDescriptor targetCandidate : targetCandidates) {_					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, sourceCandidate, targetCandidate)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt,see,get,type,hierarchy,class;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,type,descriptor,source,candidates,get,type,hierarchy,source,type,list,type,descriptor,target,candidates,get,type,hierarchy,target,type,for,type,descriptor,source,candidate,source,candidates,for,type,descriptor,target,candidate,target,candidates,generic,converter,converter,get,registered,converter,source,type,target,type,source,candidate,target,candidate,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1351793425;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>_@see #getTypeHierarchy(Class);public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<TypeDescriptor> sourceCandidates = getTypeHierarchy(sourceType)__			List<TypeDescriptor> targetCandidates = getTypeHierarchy(targetType)__			for (TypeDescriptor sourceCandidate : sourceCandidates) {_				for (TypeDescriptor targetCandidate : targetCandidates) {_					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, sourceCandidate, targetCandidate)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt,see,get,type,hierarchy,class;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,type,descriptor,source,candidates,get,type,hierarchy,source,type,list,type,descriptor,target,candidates,get,type,hierarchy,target,type,for,type,descriptor,source,candidate,source,candidates,for,type,descriptor,target,candidate,target,candidates,generic,converter,converter,get,registered,converter,source,type,target,type,source,candidate,target,candidate,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1355352386;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<TypeDescriptor> sourceCandidates = getTypeHierarchy(sourceType)__			List<TypeDescriptor> targetCandidates = getTypeHierarchy(targetType)__			for (TypeDescriptor sourceCandidate : sourceCandidates) {_				for (TypeDescriptor targetCandidate : targetCandidates) {_					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, sourceCandidate, targetCandidate)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,type,descriptor,source,candidates,get,type,hierarchy,source,type,list,type,descriptor,target,candidates,get,type,hierarchy,target,type,for,type,descriptor,source,candidate,source,candidates,for,type,descriptor,target,candidate,target,candidates,generic,converter,converter,get,registered,converter,source,type,target,type,source,candidate,target,candidate,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1356202335;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1356735495;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1357119239;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1368482696;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1382747217;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1385412762;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(_							sourceType, targetType, convertiblePair)__					if(converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1387554265;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1388427184;Find a {@link GenericConverter} given a source and target type.  This method will_attempt to match all possible converters by working though the class and interface_hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,this,method,will,attempt,to,match,all,possible,converters,by,working,though,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1391248381;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a {@link GenericConverter} or <tt>null</tt>;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,link,generic,converter,or,tt,null,tt;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1391253301;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1391279080;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1402942616;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1403205946;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1407314712;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1410535431;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1410914141;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1427240571;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1434376553;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1448975504;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1453750406;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1458999130;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1467677340;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1467730834;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1477045452;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1479823020;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1481579380;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1495868221;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1496242568;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1496259743;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1496837955;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1502974979;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1530174524;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
GenericConversionService -> Converters -> @Nullable 		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType);1532520919;Find a {@link GenericConverter} given a source and target type._<p>This method will attempt to match all possible converters by working_through the class and interface hierarchy of the types._@param sourceType the source type_@param targetType the target type_@return a matching {@link GenericConverter}, or {@code null} if none found;@Nullable_		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {_			_			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType())__			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType())__			for (Class<?> sourceCandidate : sourceCandidates) {_				for (Class<?> targetCandidate : targetCandidates) {_					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate)__					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair)__					if (converter != null) {_						return converter__					}_				}_			}_			return null__		};find,a,link,generic,converter,given,a,source,and,target,type,p,this,method,will,attempt,to,match,all,possible,converters,by,working,through,the,class,and,interface,hierarchy,of,the,types,param,source,type,the,source,type,param,target,type,the,target,type,return,a,matching,link,generic,converter,or,code,null,if,none,found;nullable,public,generic,converter,find,type,descriptor,source,type,type,descriptor,target,type,list,class,source,candidates,get,class,hierarchy,source,type,get,type,list,class,target,candidates,get,class,hierarchy,target,type,get,type,for,class,source,candidate,source,candidates,for,class,target,candidate,target,candidates,convertible,pair,convertible,pair,new,convertible,pair,source,candidate,target,candidate,generic,converter,converter,get,registered,converter,source,type,target,type,convertible,pair,if,converter,null,return,converter,return,null
