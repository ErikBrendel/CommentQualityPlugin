commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return VfsUtils.getInputStream(this.resource). }
false;public;0;4;;@Override public boolean exists() {     return VfsUtils.exists(this.resource). }
false;public;0;4;;@Override public boolean isReadable() {     return VfsUtils.isReadable(this.resource). }
false;public;0;9;;@Override public URL getURL() throws IOException {     try {         return VfsUtils.getURL(this.resource).     } catch (Exception ex) {         throw new NestedIOException("Failed to obtain URL for file " + this.resource, ex).     } }
false;public;0;9;;@Override public URI getURI() throws IOException {     try {         return VfsUtils.getURI(this.resource).     } catch (Exception ex) {         throw new NestedIOException("Failed to obtain URI for " + this.resource, ex).     } }
false;public;0;4;;@Override public File getFile() throws IOException {     return VfsUtils.getFile(this.resource). }
false;public;0;4;;@Override public long contentLength() throws IOException {     return VfsUtils.getSize(this.resource). }
false;public;0;4;;@Override public long lastModified() throws IOException {     return VfsUtils.getLastModified(this.resource). }
false;public;1;13;;@Override public Resource createRelative(String relativePath) throws IOException {     if (!relativePath.startsWith(".") && relativePath.contains("/")) {         try {             return new VfsResource(VfsUtils.getChild(this.resource, relativePath)).         } catch (IOException ex) {         // fall back to getRelative         }     }     return new VfsResource(VfsUtils.getRelative(new URL(getURL(), relativePath))). }
false;public;0;4;;@Override public String getFilename() {     return VfsUtils.getName(this.resource). }
false;public;0;4;;@Override public String getDescription() {     return "VFS resource [" + this.resource + "]". }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof VfsResource && this.resource.equals(((VfsResource) other).resource))). }
false;public;0;4;;@Override public int hashCode() {     return this.resource.hashCode(). }
