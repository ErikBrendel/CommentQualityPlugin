# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1434234880;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		_		AnnotationAttributes results = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<String>(results.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<String>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							_							results.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,string,results,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,string,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1436182516;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		_		AnnotationAttributes results = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<String>(results.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<String>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							_							results.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,string,results,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,string,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1464640767;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		_		AnnotationAttributes results = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<String>(results.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<String>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							results.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,string,results,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,string,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1467730834;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		_		AnnotationAttributes results = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(results.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							results.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,results,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1468583965;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1477860027;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1488897724;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, String annotationType);1395411973;Retrieve the merged attributes of the annotation of the given type, if any,_from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param annotationType the name of the annotation type to look for_@return the merged annotation attributes_ or {@code null} if no matching_annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, String annotationType) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationType)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		AnnotationAttributes results = attributesList.get(0)___		Set<String> overridableAttributeNames = new HashSet<String>(results.keySet())__		overridableAttributeNames.remove(VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<String>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (currentAttributesList != null && !currentAttributesList.isEmpty()) {_				AnnotationAttributes currentAttributes = currentAttributesList.get(0)__				for (String overridableAttributeName : overridableAttributeNames) {_					Object value = currentAttributes.get(overridableAttributeName)__					if (value != null) {_						_						_						_						results.put(overridableAttributeName, value)__					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,annotation,type,the,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,string,annotation,type,list,annotation,attributes,attributes,list,attributes,map,get,annotation,type,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,string,results,key,set,overridable,attribute,names,remove,value,list,string,annotation,types,new,array,list,string,attributes,map,key,set,collections,reverse,annotation,types,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,current,attributes,list,null,current,attributes,list,is,empty,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, String annotationType);1398098798;Retrieve the merged attributes of the annotation of the given type, if any,_from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param annotationType the name of the annotation type to look for_@return the merged annotation attributes_ or {@code null} if no matching_annotation is present in the {@code attributesMap}_@since 4.0.3;public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, String annotationType) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationType)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		_		AnnotationAttributes results = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<String>(results.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<String>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationType)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (currentAttributesList != null && !currentAttributesList.isEmpty()) {_				AnnotationAttributes currentAttributes = currentAttributesList.get(0)__				for (String overridableAttributeName : overridableAttributeNames) {_					Object value = currentAttributes.get(overridableAttributeName)__					if (value != null) {_						_						_						_						results.put(overridableAttributeName, value)__					}_				}_			}_		}__		return results__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,annotation,type,the,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,string,annotation,type,list,annotation,attributes,attributes,list,attributes,map,get,annotation,type,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,results,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,string,results,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,string,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,type,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,current,attributes,list,null,current,attributes,list,is,empty,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,results,put,overridable,attribute,name,value,return,results
AnnotationReadingVisitorUtils -> @Nullable 	public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1495868221;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;@Nullable_	public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;nullable,public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
AnnotationReadingVisitorUtils -> @Nullable 	public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1496837955;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;@Nullable_	public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (attributesList == null || attributesList.isEmpty()) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;nullable,public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,attributes,list,null,attributes,list,is,empty,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
AnnotationReadingVisitorUtils -> @Nullable 	public static AnnotationAttributes getMergedAnnotationAttributes( 			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap, 			Map<String, Set<String>> metaAnnotationMap, String annotationName);1549958959;Retrieve the merged attributes of the annotation of the given type,_if any, from the supplied {@code attributesMap}._<p>Annotation attribute values appearing <em>lower</em> in the annotation_hierarchy (i.e., closer to the declaring class) will override those_defined <em>higher</em> in the annotation hierarchy._@param attributesMap the map of annotation attribute lists, keyed by_annotation type name_@param metaAnnotationMap the map of meta annotation relationships,_keyed by annotation type name_@param annotationName the fully qualified class name of the annotation_type to look for_@return the merged annotation attributes, or {@code null} if no_matching annotation is present in the {@code attributesMap}_@since 4.0.3;@Nullable_	public static AnnotationAttributes getMergedAnnotationAttributes(_			LinkedMultiValueMap<String, AnnotationAttributes> attributesMap,_			Map<String, Set<String>> metaAnnotationMap, String annotationName) {__		_		List<AnnotationAttributes> attributesList = attributesMap.get(annotationName)__		if (CollectionUtils.isEmpty(attributesList)) {_			return null__		}__		_		_		_		AnnotationAttributes result = new AnnotationAttributes(attributesList.get(0))___		Set<String> overridableAttributeNames = new HashSet<>(result.keySet())__		overridableAttributeNames.remove(AnnotationUtils.VALUE)___		_		_		_		List<String> annotationTypes = new ArrayList<>(attributesMap.keySet())__		Collections.reverse(annotationTypes)___		_		annotationTypes.remove(annotationName)___		for (String currentAnnotationType : annotationTypes) {_			List<AnnotationAttributes> currentAttributesList = attributesMap.get(currentAnnotationType)__			if (!ObjectUtils.isEmpty(currentAttributesList)) {_				Set<String> metaAnns = metaAnnotationMap.get(currentAnnotationType)__				if (metaAnns != null && metaAnns.contains(annotationName)) {_					AnnotationAttributes currentAttributes = currentAttributesList.get(0)__					for (String overridableAttributeName : overridableAttributeNames) {_						Object value = currentAttributes.get(overridableAttributeName)__						if (value != null) {_							_							_							result.put(overridableAttributeName, value)__						}_					}_				}_			}_		}__		return result__	};retrieve,the,merged,attributes,of,the,annotation,of,the,given,type,if,any,from,the,supplied,code,attributes,map,p,annotation,attribute,values,appearing,em,lower,em,in,the,annotation,hierarchy,i,e,closer,to,the,declaring,class,will,override,those,defined,em,higher,em,in,the,annotation,hierarchy,param,attributes,map,the,map,of,annotation,attribute,lists,keyed,by,annotation,type,name,param,meta,annotation,map,the,map,of,meta,annotation,relationships,keyed,by,annotation,type,name,param,annotation,name,the,fully,qualified,class,name,of,the,annotation,type,to,look,for,return,the,merged,annotation,attributes,or,code,null,if,no,matching,annotation,is,present,in,the,code,attributes,map,since,4,0,3;nullable,public,static,annotation,attributes,get,merged,annotation,attributes,linked,multi,value,map,string,annotation,attributes,attributes,map,map,string,set,string,meta,annotation,map,string,annotation,name,list,annotation,attributes,attributes,list,attributes,map,get,annotation,name,if,collection,utils,is,empty,attributes,list,return,null,annotation,attributes,result,new,annotation,attributes,attributes,list,get,0,set,string,overridable,attribute,names,new,hash,set,result,key,set,overridable,attribute,names,remove,annotation,utils,value,list,string,annotation,types,new,array,list,attributes,map,key,set,collections,reverse,annotation,types,annotation,types,remove,annotation,name,for,string,current,annotation,type,annotation,types,list,annotation,attributes,current,attributes,list,attributes,map,get,current,annotation,type,if,object,utils,is,empty,current,attributes,list,set,string,meta,anns,meta,annotation,map,get,current,annotation,type,if,meta,anns,null,meta,anns,contains,annotation,name,annotation,attributes,current,attributes,current,attributes,list,get,0,for,string,overridable,attribute,name,overridable,attribute,names,object,value,current,attributes,get,overridable,attribute,name,if,value,null,result,put,overridable,attribute,name,value,return,result
