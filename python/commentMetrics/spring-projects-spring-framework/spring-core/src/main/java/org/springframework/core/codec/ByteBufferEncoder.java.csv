commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {     Class<?> clazz = elementType.toClass().     return super.canEncode(elementType, mimeType) && ByteBuffer.class.isAssignableFrom(clazz). }
false;public;5;14;;@Override public Flux<DataBuffer> encode(Publisher<? extends ByteBuffer> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     return Flux.from(inputStream).map(byteBuffer -> {         DataBuffer dataBuffer = bufferFactory.wrap(byteBuffer).         if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {             String logPrefix = Hints.getLogPrefix(hints).             logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes").         }         return dataBuffer.     }). }
