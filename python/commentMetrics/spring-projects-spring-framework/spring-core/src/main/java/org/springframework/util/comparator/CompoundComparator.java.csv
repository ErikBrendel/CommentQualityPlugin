commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Add a Comparator to the end of the chain.  * <p>The Comparator will default to ascending sort order,  * unless it is a InvertibleComparator.  * @param comparator the Comparator to add to the end of the chain  * @see InvertibleComparator  */ ;/**  * Add a Comparator to the end of the chain.  * <p>The Comparator will default to ascending sort order,  * unless it is a InvertibleComparator.  * @param comparator the Comparator to add to the end of the chain  * @see InvertibleComparator  */ @SuppressWarnings("unchecked") public void addComparator(Comparator<? extends T> comparator) {     if (comparator instanceof InvertibleComparator) {         this.comparators.add((InvertibleComparator) comparator).     } else {         this.comparators.add(new InvertibleComparator(comparator)).     } }
true;public;2;4;/**  * Add a Comparator to the end of the chain using the provided sort order.  * @param comparator the Comparator to add to the end of the chain  * @param ascending the sort order: ascending (true) or descending (false)  */ ;/**  * Add a Comparator to the end of the chain using the provided sort order.  * @param comparator the Comparator to add to the end of the chain  * @param ascending the sort order: ascending (true) or descending (false)  */ @SuppressWarnings("unchecked") public void addComparator(Comparator<? extends T> comparator, boolean ascending) {     this.comparators.add(new InvertibleComparator(comparator, ascending)). }
true;public;2;9;/**  * Replace the Comparator at the given index.  * <p>The Comparator will default to ascending sort order,  * unless it is a InvertibleComparator.  * @param index the index of the Comparator to replace  * @param comparator the Comparator to place at the given index  * @see InvertibleComparator  */ ;/**  * Replace the Comparator at the given index.  * <p>The Comparator will default to ascending sort order,  * unless it is a InvertibleComparator.  * @param index the index of the Comparator to replace  * @param comparator the Comparator to place at the given index  * @see InvertibleComparator  */ @SuppressWarnings("unchecked") public void setComparator(int index, Comparator<? extends T> comparator) {     if (comparator instanceof InvertibleComparator) {         this.comparators.set(index, (InvertibleComparator) comparator).     } else {         this.comparators.set(index, new InvertibleComparator(comparator)).     } }
true;public;3;3;/**  * Replace the Comparator at the given index using the given sort order.  * @param index the index of the Comparator to replace  * @param comparator the Comparator to place at the given index  * @param ascending the sort order: ascending (true) or descending (false)  */ ;/**  * Replace the Comparator at the given index using the given sort order.  * @param index the index of the Comparator to replace  * @param comparator the Comparator to place at the given index  * @param ascending the sort order: ascending (true) or descending (false)  */ public void setComparator(int index, Comparator<T> comparator, boolean ascending) {     this.comparators.set(index, new InvertibleComparator<>(comparator, ascending)). }
true;public;0;5;/**  * Invert the sort order of each sort definition contained by this compound  * comparator.  */ ;/**  * Invert the sort order of each sort definition contained by this compound  * comparator.  */ public void invertOrder() {     for (InvertibleComparator comparator : this.comparators) {         comparator.invertOrder().     } }
true;public;1;3;/**  * Invert the sort order of the sort definition at the specified index.  * @param index the index of the comparator to invert  */ ;/**  * Invert the sort order of the sort definition at the specified index.  * @param index the index of the comparator to invert  */ public void invertOrder(int index) {     this.comparators.get(index).invertOrder(). }
true;public;1;3;/**  * Change the sort order at the given index to ascending.  * @param index the index of the comparator to change  */ ;/**  * Change the sort order at the given index to ascending.  * @param index the index of the comparator to change  */ public void setAscendingOrder(int index) {     this.comparators.get(index).setAscending(true). }
true;public;1;3;/**  * Change the sort order at the given index to descending sort.  * @param index the index of the comparator to change  */ ;/**  * Change the sort order at the given index to descending sort.  * @param index the index of the comparator to change  */ public void setDescendingOrder(int index) {     this.comparators.get(index).setAscending(false). }
true;public;0;3;/**  * Returns the number of aggregated comparators.  */ ;/**  * Returns the number of aggregated comparators.  */ public int getComparatorCount() {     return this.comparators.size(). }
false;public;2;13;;@Override @SuppressWarnings("unchecked") public int compare(T o1, T o2) {     Assert.state(!this.comparators.isEmpty(), "No sort definitions have been added to this CompoundComparator to compare").     for (InvertibleComparator comparator : this.comparators) {         int result = comparator.compare(o1, o2).         if (result != 0) {             return result.         }     }     return 0. }
false;public;1;6;;@Override @SuppressWarnings("unchecked") public boolean equals(Object other) {     return (this == other || (other instanceof CompoundComparator && this.comparators.equals(((CompoundComparator<T>) other).comparators))). }
false;public;0;4;;@Override public int hashCode() {     return this.comparators.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "CompoundComparator: " + this.comparators. }
