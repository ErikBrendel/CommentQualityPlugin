# id;timestamp;commentText;codeText;commentWords;codeWords
CompoundComparator -> public void setDescendingOrder(int index);1328020251;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1346940376;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1356735495;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1357119239;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1368482696;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1385412762;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1408349786;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1461047077;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1467730834;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1484857261;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1487178332;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1530174524;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> public void setDescendingOrder(int index);1530190293;Change the sort order at the given index to descending sort._@param index the index of the comparator to change;public void setDescendingOrder(int index) {_		this.comparators.get(index).setAscending(false)__	};change,the,sort,order,at,the,given,index,to,descending,sort,param,index,the,index,of,the,comparator,to,change;public,void,set,descending,order,int,index,this,comparators,get,index,set,ascending,false
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1408349786;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1461047077;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1467730834;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1484857261;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<>(comparators.length)__		for (Comparator comparator : comparators) {_			addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,comparators,length,for,comparator,comparator,comparators,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1487178332;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<>(comparators.length)__		for (Comparator comparator : comparators) {_			addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,comparators,length,for,comparator,comparator,comparators,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1530174524;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<>(comparators.length)__		for (Comparator comparator : comparators) {_			addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,comparators,length,for,comparator,comparator,comparators,add,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public CompoundComparator(Comparator... comparators);1530190293;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<>(comparators.length)__		for (Comparator comparator : comparators) {_			addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,comparators,length,for,comparator,comparator,comparators,add,comparator,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator);1328020251;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;public void addComparator(Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator<T>(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;public,void,add,comparator,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,t,comparator,else,this,comparators,add,new,invertible,comparator,t,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator);1346940376;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;public void addComparator(Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator<T>(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;public,void,add,comparator,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,t,comparator,else,this,comparators,add,new,invertible,comparator,t,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator);1356735495;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;public void addComparator(Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator<T>(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;public,void,add,comparator,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,t,comparator,else,this,comparators,add,new,invertible,comparator,t,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator);1357119239;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;public void addComparator(Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator<T>(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;public,void,add,comparator,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,t,comparator,else,this,comparators,add,new,invertible,comparator,t,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator);1368482696;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;public void addComparator(Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator<T>(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;public,void,add,comparator,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,t,comparator,else,this,comparators,add,new,invertible,comparator,t,comparator
CompoundComparator -> public void addComparator(Comparator<T> comparator, boolean ascending);1328020251;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);public void addComparator(Comparator<T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator<T>(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,add,comparator,comparator,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void addComparator(Comparator<T> comparator, boolean ascending);1346940376;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);public void addComparator(Comparator<T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator<T>(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,add,comparator,comparator,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void addComparator(Comparator<T> comparator, boolean ascending);1356735495;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);public void addComparator(Comparator<T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator<T>(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,add,comparator,comparator,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void addComparator(Comparator<T> comparator, boolean ascending);1357119239;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);public void addComparator(Comparator<T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator<T>(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,add,comparator,comparator,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void addComparator(Comparator<T> comparator, boolean ascending);1368482696;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);public void addComparator(Comparator<T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator<T>(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,add,comparator,comparator,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1385412762;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1408349786;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1461047077;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1467730834;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1484857261;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1487178332;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1530174524;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator, boolean ascending);1530190293;Add a Comparator to the end of the chain using the provided sort order._@param comparator the Comparator to add to the end of the chain_@param ascending the sort order: ascending (true) or descending (false);@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {_		this.comparators.add(new InvertibleComparator(comparator, ascending))__	};add,a,comparator,to,the,end,of,the,chain,using,the,provided,sort,order,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,param,ascending,the,sort,order,ascending,true,or,descending,false;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,boolean,ascending,this,comparators,add,new,invertible,comparator,comparator,ascending
CompoundComparator -> public void invertOrder();1328020251;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1346940376;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator<T> comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,t,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1356735495;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator<T> comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,t,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1357119239;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator<T> comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,t,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1368482696;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator<T> comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,t,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1385412762;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1408349786;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1461047077;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1467730834;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1484857261;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1487178332;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1530174524;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public void invertOrder();1530190293;Invert the sort order of each sort definition contained by this compound_comparator.;public void invertOrder() {_		for (InvertibleComparator comparator : this.comparators) {_			comparator.invertOrder()__		}_	};invert,the,sort,order,of,each,sort,definition,contained,by,this,compound,comparator;public,void,invert,order,for,invertible,comparator,comparator,this,comparators,comparator,invert,order
CompoundComparator -> public int getComparatorCount();1328020251;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1346940376;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1356735495;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1357119239;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1368482696;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1385412762;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1408349786;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1461047077;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1467730834;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1484857261;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1487178332;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1530174524;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> public int getComparatorCount();1530190293;Returns the number of aggregated comparators.;public int getComparatorCount() {_		return this.comparators.size()__	};returns,the,number,of,aggregated,comparators;public,int,get,comparator,count,return,this,comparators,size
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1385412762;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1408349786;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1461047077;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1467730834;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1484857261;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1487178332;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1530174524;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void addComparator(Comparator<? extends T> comparator);1530190293;Add a Comparator to the end of the chain._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param comparator the Comparator to add to the end of the chain_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void addComparator(Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.add((InvertibleComparator) comparator)__		}_		else {_			this.comparators.add(new InvertibleComparator(comparator))__		}_	};add,a,comparator,to,the,end,of,the,chain,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,comparator,the,comparator,to,add,to,the,end,of,the,chain,see,invertible,comparator;suppress,warnings,unchecked,public,void,add,comparator,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,add,invertible,comparator,comparator,else,this,comparators,add,new,invertible,comparator,comparator
CompoundComparator -> public void invertOrder(int index);1328020251;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1346940376;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1356735495;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1357119239;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1368482696;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1385412762;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1408349786;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1461047077;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1467730834;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1484857261;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1487178332;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1530174524;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> public void invertOrder(int index);1530190293;Invert the sort order of the sort definition at the specified index._@param index the index of the comparator to invert;public void invertOrder(int index) {_		this.comparators.get(index).invertOrder()__	};invert,the,sort,order,of,the,sort,definition,at,the,specified,index,param,index,the,index,of,the,comparator,to,invert;public,void,invert,order,int,index,this,comparators,get,index,invert,order
CompoundComparator -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public CompoundComparator(Comparator... comparators);1346940376;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings({ "unchecked", "rawtypes" })_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator<T>>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,rawtypes,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,t,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public CompoundComparator(Comparator... comparators);1356735495;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings({ "unchecked", "rawtypes" })_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator<T>>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,rawtypes,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,t,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public CompoundComparator(Comparator... comparators);1357119239;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings({ "unchecked", "rawtypes" })_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator<T>>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,rawtypes,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,t,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public CompoundComparator(Comparator... comparators);1368482696;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings({ "unchecked", "rawtypes" })_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator<T>>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,rawtypes,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,t,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	public CompoundComparator(Comparator... comparators);1385412762;Construct a CompoundComparator from the Comparators in the provided array._<p>All Comparators will default to ascending sort order,_unless they are InvertibleComparators._@param comparators the comparators to build into a compound comparator_@see InvertibleComparator;@SuppressWarnings({ "unchecked", "rawtypes" })_	public CompoundComparator(Comparator... comparators) {_		Assert.notNull(comparators, "Comparators must not be null")__		this.comparators = new ArrayList<InvertibleComparator>(comparators.length)__		for (Comparator comparator : comparators) {_			this.addComparator(comparator)__		}_	};construct,a,compound,comparator,from,the,comparators,in,the,provided,array,p,all,comparators,will,default,to,ascending,sort,order,unless,they,are,invertible,comparators,param,comparators,the,comparators,to,build,into,a,compound,comparator,see,invertible,comparator;suppress,warnings,unchecked,rawtypes,public,compound,comparator,comparator,comparators,assert,not,null,comparators,comparators,must,not,be,null,this,comparators,new,array,list,invertible,comparator,comparators,length,for,comparator,comparator,comparators,this,add,comparator,comparator
CompoundComparator -> public CompoundComparator();1328020251;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator<T>>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator,t
CompoundComparator -> public CompoundComparator();1346940376;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator<T>>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator,t
CompoundComparator -> public CompoundComparator();1356735495;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator<T>>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator,t
CompoundComparator -> public CompoundComparator();1357119239;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator<T>>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator,t
CompoundComparator -> public CompoundComparator();1368482696;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator<T>>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator,t
CompoundComparator -> public CompoundComparator();1385412762;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator
CompoundComparator -> public CompoundComparator();1408349786;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator
CompoundComparator -> public CompoundComparator();1461047077;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<InvertibleComparator>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list,invertible,comparator
CompoundComparator -> public CompoundComparator();1467730834;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list
CompoundComparator -> public CompoundComparator();1484857261;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list
CompoundComparator -> public CompoundComparator();1487178332;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list
CompoundComparator -> public CompoundComparator();1530174524;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list
CompoundComparator -> public CompoundComparator();1530190293;Construct a CompoundComparator with initially no Comparators. Clients_must add at least one Comparator before calling the compare method or an_IllegalStateException is thrown.;public CompoundComparator() {_		this.comparators = new ArrayList<>()__	};construct,a,compound,comparator,with,initially,no,comparators,clients,must,add,at,least,one,comparator,before,calling,the,compare,method,or,an,illegal,state,exception,is,thrown;public,compound,comparator,this,comparators,new,array,list
CompoundComparator -> public void setAscendingOrder(int index);1328020251;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1346940376;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1356735495;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1357119239;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1368482696;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1385412762;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1408349786;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1461047077;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1467730834;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1484857261;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1487178332;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1530174524;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setAscendingOrder(int index);1530190293;Change the sort order at the given index to ascending._@param index the index of the comparator to change;public void setAscendingOrder(int index) {_		this.comparators.get(index).setAscending(true)__	};change,the,sort,order,at,the,given,index,to,ascending,param,index,the,index,of,the,comparator,to,change;public,void,set,ascending,order,int,index,this,comparators,get,index,set,ascending,true
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator);1328020251;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;public void setComparator(int index, Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator<T>(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;public,void,set,comparator,int,index,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,t,comparator,else,this,comparators,set,index,new,invertible,comparator,t,comparator
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator);1346940376;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;public void setComparator(int index, Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator<T>(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;public,void,set,comparator,int,index,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,t,comparator,else,this,comparators,set,index,new,invertible,comparator,t,comparator
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator);1356735495;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;public void setComparator(int index, Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator<T>(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;public,void,set,comparator,int,index,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,t,comparator,else,this,comparators,set,index,new,invertible,comparator,t,comparator
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator);1357119239;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;public void setComparator(int index, Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator<T>(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;public,void,set,comparator,int,index,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,t,comparator,else,this,comparators,set,index,new,invertible,comparator,t,comparator
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator);1368482696;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;public void setComparator(int index, Comparator<T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator<T>) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator<T>(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;public,void,set,comparator,int,index,comparator,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,t,comparator,else,this,comparators,set,index,new,invertible,comparator,t,comparator
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1328020251;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1346940376;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1356735495;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1357119239;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1368482696;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1385412762;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1408349786;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1461047077;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<T>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,t,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1467730834;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1484857261;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1487178332;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1530174524;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,comparator,ascending
CompoundComparator -> public void setComparator(int index, Comparator<T> comparator, boolean ascending);1530190293;Replace the Comparator at the given index using the given sort order._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@param ascending the sort order: ascending (true) or descending (false);public void setComparator(int index, Comparator<T> comparator, boolean ascending) {_		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending))__	};replace,the,comparator,at,the,given,index,using,the,given,sort,order,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,param,ascending,the,sort,order,ascending,true,or,descending,false;public,void,set,comparator,int,index,comparator,t,comparator,boolean,ascending,this,comparators,set,index,new,invertible,comparator,comparator,ascending
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1385412762;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1408349786;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1461047077;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1467730834;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1484857261;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1487178332;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1530174524;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
CompoundComparator -> @SuppressWarnings("unchecked") 	public void setComparator(int index, Comparator<? extends T> comparator);1530190293;Replace the Comparator at the given index._<p>The Comparator will default to ascending sort order,_unless it is a InvertibleComparator._@param index the index of the Comparator to replace_@param comparator the Comparator to place at the given index_@see InvertibleComparator;@SuppressWarnings("unchecked")_	public void setComparator(int index, Comparator<? extends T> comparator) {_		if (comparator instanceof InvertibleComparator) {_			this.comparators.set(index, (InvertibleComparator) comparator)__		}_		else {_			this.comparators.set(index, new InvertibleComparator(comparator))__		}_	};replace,the,comparator,at,the,given,index,p,the,comparator,will,default,to,ascending,sort,order,unless,it,is,a,invertible,comparator,param,index,the,index,of,the,comparator,to,replace,param,comparator,the,comparator,to,place,at,the,given,index,see,invertible,comparator;suppress,warnings,unchecked,public,void,set,comparator,int,index,comparator,extends,t,comparator,if,comparator,instanceof,invertible,comparator,this,comparators,set,index,invertible,comparator,comparator,else,this,comparators,set,index,new,invertible,comparator,comparator
