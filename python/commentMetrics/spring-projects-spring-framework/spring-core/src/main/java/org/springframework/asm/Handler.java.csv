commented;modifiers;parameterAmount;loc;comment;code
true;static;3;32;/**  * Removes the range between start and end from the Handler list that begins with the given  * element.  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @param start the start of the range to be removed.  * @param end the end of the range to be removed. Maybe {@literal null}.  * @return the exception handler list with the start-end range removed.  */ ;/**  * Removes the range between start and end from the Handler list that begins with the given  * element.  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @param start the start of the range to be removed.  * @param end the end of the range to be removed. Maybe {@literal null}.  * @return the exception handler list with the start-end range removed.  */ static Handler removeRange(final Handler firstHandler, final Label start, final Label end) {     if (firstHandler == null) {         return null.     } else {         firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end).     }     int handlerStart = firstHandler.startPc.bytecodeOffset.     int handlerEnd = firstHandler.endPc.bytecodeOffset.     int rangeStart = start.bytecodeOffset.     int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset.     // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect.     if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) {         return firstHandler.     }     if (rangeStart <= handlerStart) {         if (rangeEnd >= handlerEnd) {             // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler.             return firstHandler.nextHandler.         } else {             // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[             return new Handler(firstHandler, end, firstHandler.endPc).         }     } else if (rangeEnd >= handlerEnd) {         // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[         return new Handler(firstHandler, firstHandler.startPc, start).     } else {         // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ =         // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[         firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc).         return new Handler(firstHandler, firstHandler.startPc, start).     } }
true;static;1;9;/**  * Returns the number of elements of the Handler list that begins with the given element.  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @return the number of elements of the Handler list that begins with 'handler'.  */ ;/**  * Returns the number of elements of the Handler list that begins with the given element.  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @return the number of elements of the Handler list that begins with 'handler'.  */ static int getExceptionTableLength(final Handler firstHandler) {     int length = 0.     Handler handler = firstHandler.     while (handler != null) {         length++.         handler = handler.nextHandler.     }     return length. }
true;static;1;3;/**  * Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that  * begins with the given element. <i>This includes the exception_table_length field.</i>  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @return the size in bytes of the exception_table_length and exception_table structures.  */ ;/**  * Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that  * begins with the given element. <i>This includes the exception_table_length field.</i>  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @return the size in bytes of the exception_table_length and exception_table structures.  */ static int getExceptionTableSize(final Handler firstHandler) {     return 2 + 8 * getExceptionTableLength(firstHandler). }
true;static;2;12;/**  * Puts the JVMS exception_table corresponding to the Handler list that begins with the given  * element. <i>This includes the exception_table_length field.</i>  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @param output where the exception_table_length and exception_table structures must be put.  */ ;/**  * Puts the JVMS exception_table corresponding to the Handler list that begins with the given  * element. <i>This includes the exception_table_length field.</i>  *  * @param firstHandler the beginning of a Handler list. May be {@literal null}.  * @param output where the exception_table_length and exception_table structures must be put.  */ static void putExceptionTable(final Handler firstHandler, final ByteVector output) {     output.putShort(getExceptionTableLength(firstHandler)).     Handler handler = firstHandler.     while (handler != null) {         output.putShort(handler.startPc.bytecodeOffset).putShort(handler.endPc.bytecodeOffset).putShort(handler.handlerPc.bytecodeOffset).putShort(handler.catchType).         handler = handler.nextHandler.     } }
