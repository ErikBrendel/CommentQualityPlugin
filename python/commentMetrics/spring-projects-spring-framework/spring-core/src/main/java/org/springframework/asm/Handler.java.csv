# id;timestamp;commentText;codeText;commentWords;codeWords
Handler -> static Handler removeRange(final Handler firstHandler, final Label start, final Label end);1531241461;Removes the range between start and end from the Handler list that begins with the given_element.__@param firstHandler the beginning of a Handler list. May be <tt>null</tt>._@param start the start of the range to be removed._@param end the end of the range to be removed. Maybe <tt>null</tt>._@return the exception handler list with the start-end range removed.;static Handler removeRange(final Handler firstHandler, final Label start, final Label end) {_    if (firstHandler == null) {_      return null__    } else {_      firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end)__    }_    int handlerStart = firstHandler.startPc.bytecodeOffset__    int handlerEnd = firstHandler.endPc.bytecodeOffset__    int rangeStart = start.bytecodeOffset__    int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset__    _    if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) {_      return firstHandler__    }_    if (rangeStart <= handlerStart) {_      if (rangeEnd >= handlerEnd) {_        _        return firstHandler.nextHandler__      } else {_        _        return new Handler(firstHandler, end, firstHandler.endPc)__      }_    } else if (rangeEnd >= handlerEnd) {_      _      return new Handler(firstHandler, firstHandler.startPc, start)__    } else {_      _      _      firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc)__      return new Handler(firstHandler, firstHandler.startPc, start)__    }_  };removes,the,range,between,start,and,end,from,the,handler,list,that,begins,with,the,given,element,param,first,handler,the,beginning,of,a,handler,list,may,be,tt,null,tt,param,start,the,start,of,the,range,to,be,removed,param,end,the,end,of,the,range,to,be,removed,maybe,tt,null,tt,return,the,exception,handler,list,with,the,start,end,range,removed;static,handler,remove,range,final,handler,first,handler,final,label,start,final,label,end,if,first,handler,null,return,null,else,first,handler,next,handler,remove,range,first,handler,next,handler,start,end,int,handler,start,first,handler,start,pc,bytecode,offset,int,handler,end,first,handler,end,pc,bytecode,offset,int,range,start,start,bytecode,offset,int,range,end,end,null,integer,end,bytecode,offset,if,range,start,handler,end,range,end,handler,start,return,first,handler,if,range,start,handler,start,if,range,end,handler,end,return,first,handler,next,handler,else,return,new,handler,first,handler,end,first,handler,end,pc,else,if,range,end,handler,end,return,new,handler,first,handler,first,handler,start,pc,start,else,first,handler,next,handler,new,handler,first,handler,end,first,handler,end,pc,return,new,handler,first,handler,first,handler,start,pc,start
Handler -> static Handler removeRange(final Handler firstHandler, final Label start, final Label end);1536664245;Removes the range between start and end from the Handler list that begins with the given_element.__@param firstHandler the beginning of a Handler list. May be {@literal null}._@param start the start of the range to be removed._@param end the end of the range to be removed. Maybe {@literal null}._@return the exception handler list with the start-end range removed.;static Handler removeRange(final Handler firstHandler, final Label start, final Label end) {_    if (firstHandler == null) {_      return null__    } else {_      firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end)__    }_    int handlerStart = firstHandler.startPc.bytecodeOffset__    int handlerEnd = firstHandler.endPc.bytecodeOffset__    int rangeStart = start.bytecodeOffset__    int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset__    _    if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) {_      return firstHandler__    }_    if (rangeStart <= handlerStart) {_      if (rangeEnd >= handlerEnd) {_        _        return firstHandler.nextHandler__      } else {_        _        return new Handler(firstHandler, end, firstHandler.endPc)__      }_    } else if (rangeEnd >= handlerEnd) {_      _      return new Handler(firstHandler, firstHandler.startPc, start)__    } else {_      _      _      firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc)__      return new Handler(firstHandler, firstHandler.startPc, start)__    }_  };removes,the,range,between,start,and,end,from,the,handler,list,that,begins,with,the,given,element,param,first,handler,the,beginning,of,a,handler,list,may,be,literal,null,param,start,the,start,of,the,range,to,be,removed,param,end,the,end,of,the,range,to,be,removed,maybe,literal,null,return,the,exception,handler,list,with,the,start,end,range,removed;static,handler,remove,range,final,handler,first,handler,final,label,start,final,label,end,if,first,handler,null,return,null,else,first,handler,next,handler,remove,range,first,handler,next,handler,start,end,int,handler,start,first,handler,start,pc,bytecode,offset,int,handler,end,first,handler,end,pc,bytecode,offset,int,range,start,start,bytecode,offset,int,range,end,end,null,integer,end,bytecode,offset,if,range,start,handler,end,range,end,handler,start,return,first,handler,if,range,start,handler,start,if,range,end,handler,end,return,first,handler,next,handler,else,return,new,handler,first,handler,end,first,handler,end,pc,else,if,range,end,handler,end,return,new,handler,first,handler,first,handler,start,pc,start,else,first,handler,next,handler,new,handler,first,handler,end,first,handler,end,pc,return,new,handler,first,handler,first,handler,start,pc,start
Handler -> static int getExceptionTableLength(final Handler firstHandler);1531241461;Returns the number of elements of the Handler list that begins with the given element.__@param firstHandler the beginning of a Handler list. May be <tt>null</tt>._@return the number of elements of the Handler list that begins with 'handler'.;static int getExceptionTableLength(final Handler firstHandler) {_    int length = 0__    Handler handler = firstHandler__    while (handler != null) {_      length++__      handler = handler.nextHandler__    }_    return length__  };returns,the,number,of,elements,of,the,handler,list,that,begins,with,the,given,element,param,first,handler,the,beginning,of,a,handler,list,may,be,tt,null,tt,return,the,number,of,elements,of,the,handler,list,that,begins,with,handler;static,int,get,exception,table,length,final,handler,first,handler,int,length,0,handler,handler,first,handler,while,handler,null,length,handler,handler,next,handler,return,length
Handler -> static int getExceptionTableLength(final Handler firstHandler);1536664245;Returns the number of elements of the Handler list that begins with the given element.__@param firstHandler the beginning of a Handler list. May be {@literal null}._@return the number of elements of the Handler list that begins with 'handler'.;static int getExceptionTableLength(final Handler firstHandler) {_    int length = 0__    Handler handler = firstHandler__    while (handler != null) {_      length++__      handler = handler.nextHandler__    }_    return length__  };returns,the,number,of,elements,of,the,handler,list,that,begins,with,the,given,element,param,first,handler,the,beginning,of,a,handler,list,may,be,literal,null,return,the,number,of,elements,of,the,handler,list,that,begins,with,handler;static,int,get,exception,table,length,final,handler,first,handler,int,length,0,handler,handler,first,handler,while,handler,null,length,handler,handler,next,handler,return,length
Handler -> static void putExceptionTable(final Handler firstHandler, final ByteVector output);1531241461;Puts the JVMS exception_table corresponding to the Handler list that begins with the given_element. <i>This includes the exception_table_length field.</i>__@param firstHandler the beginning of a Handler list. May be <tt>null</tt>._@param output where the exception_table_length and exception_table structures must be put.;static void putExceptionTable(final Handler firstHandler, final ByteVector output) {_    output.putShort(getExceptionTableLength(firstHandler))__    Handler handler = firstHandler__    while (handler != null) {_      output_          .putShort(handler.startPc.bytecodeOffset)_          .putShort(handler.endPc.bytecodeOffset)_          .putShort(handler.handlerPc.bytecodeOffset)_          .putShort(handler.catchType)__      handler = handler.nextHandler__    }_  };puts,the,jvms,corresponding,to,the,handler,list,that,begins,with,the,given,element,i,this,includes,the,field,i,param,first,handler,the,beginning,of,a,handler,list,may,be,tt,null,tt,param,output,where,the,and,structures,must,be,put;static,void,put,exception,table,final,handler,first,handler,final,byte,vector,output,output,put,short,get,exception,table,length,first,handler,handler,handler,first,handler,while,handler,null,output,put,short,handler,start,pc,bytecode,offset,put,short,handler,end,pc,bytecode,offset,put,short,handler,handler,pc,bytecode,offset,put,short,handler,catch,type,handler,handler,next,handler
Handler -> static void putExceptionTable(final Handler firstHandler, final ByteVector output);1536664245;Puts the JVMS exception_table corresponding to the Handler list that begins with the given_element. <i>This includes the exception_table_length field.</i>__@param firstHandler the beginning of a Handler list. May be {@literal null}._@param output where the exception_table_length and exception_table structures must be put.;static void putExceptionTable(final Handler firstHandler, final ByteVector output) {_    output.putShort(getExceptionTableLength(firstHandler))__    Handler handler = firstHandler__    while (handler != null) {_      output_          .putShort(handler.startPc.bytecodeOffset)_          .putShort(handler.endPc.bytecodeOffset)_          .putShort(handler.handlerPc.bytecodeOffset)_          .putShort(handler.catchType)__      handler = handler.nextHandler__    }_  };puts,the,jvms,corresponding,to,the,handler,list,that,begins,with,the,given,element,i,this,includes,the,field,i,param,first,handler,the,beginning,of,a,handler,list,may,be,literal,null,param,output,where,the,and,structures,must,be,put;static,void,put,exception,table,final,handler,first,handler,final,byte,vector,output,output,put,short,get,exception,table,length,first,handler,handler,handler,first,handler,while,handler,null,output,put,short,handler,start,pc,bytecode,offset,put,short,handler,end,pc,bytecode,offset,put,short,handler,handler,pc,bytecode,offset,put,short,handler,catch,type,handler,handler,next,handler
Handler -> Handler(       final Label startPc,       final Label endPc,       final Label handlerPc,       final int catchType,       final String catchTypeDescriptor);1531241461;Constructs a new Handler.__@param startPc the start_pc field of this JVMS exception_table entry._@param endPc the end_pc field of this JVMS exception_table entry._@param handlerPc the handler_pc field of this JVMS exception_table entry._@param catchType The catch_type field of this JVMS exception_table entry._@param catchTypeDescriptor The internal name of the type of exceptions handled by this handler,_or <tt>null</tt> to catch any exceptions.;Handler(_      final Label startPc,_      final Label endPc,_      final Label handlerPc,_      final int catchType,_      final String catchTypeDescriptor) {_    this.startPc = startPc__    this.endPc = endPc__    this.handlerPc = handlerPc__    this.catchType = catchType__    this.catchTypeDescriptor = catchTypeDescriptor__  };constructs,a,new,handler,param,start,pc,the,field,of,this,jvms,entry,param,end,pc,the,field,of,this,jvms,entry,param,handler,pc,the,field,of,this,jvms,entry,param,catch,type,the,field,of,this,jvms,entry,param,catch,type,descriptor,the,internal,name,of,the,type,of,exceptions,handled,by,this,handler,or,tt,null,tt,to,catch,any,exceptions;handler,final,label,start,pc,final,label,end,pc,final,label,handler,pc,final,int,catch,type,final,string,catch,type,descriptor,this,start,pc,start,pc,this,end,pc,end,pc,this,handler,pc,handler,pc,this,catch,type,catch,type,this,catch,type,descriptor,catch,type,descriptor
Handler -> Handler(       final Label startPc,       final Label endPc,       final Label handlerPc,       final int catchType,       final String catchTypeDescriptor);1536664245;Constructs a new Handler.__@param startPc the start_pc field of this JVMS exception_table entry._@param endPc the end_pc field of this JVMS exception_table entry._@param handlerPc the handler_pc field of this JVMS exception_table entry._@param catchType The catch_type field of this JVMS exception_table entry._@param catchTypeDescriptor The internal name of the type of exceptions handled by this handler,_or {@literal null} to catch any exceptions.;Handler(_      final Label startPc,_      final Label endPc,_      final Label handlerPc,_      final int catchType,_      final String catchTypeDescriptor) {_    this.startPc = startPc__    this.endPc = endPc__    this.handlerPc = handlerPc__    this.catchType = catchType__    this.catchTypeDescriptor = catchTypeDescriptor__  };constructs,a,new,handler,param,start,pc,the,field,of,this,jvms,entry,param,end,pc,the,field,of,this,jvms,entry,param,handler,pc,the,field,of,this,jvms,entry,param,catch,type,the,field,of,this,jvms,entry,param,catch,type,descriptor,the,internal,name,of,the,type,of,exceptions,handled,by,this,handler,or,literal,null,to,catch,any,exceptions;handler,final,label,start,pc,final,label,end,pc,final,label,handler,pc,final,int,catch,type,final,string,catch,type,descriptor,this,start,pc,start,pc,this,end,pc,end,pc,this,handler,pc,handler,pc,this,catch,type,catch,type,this,catch,type,descriptor,catch,type,descriptor
Handler -> static int getExceptionTableSize(final Handler firstHandler);1531241461;Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that_begins with the given element. <i>This includes the exception_table_length field.</i>__@param firstHandler the beginning of a Handler list. May be <tt>null</tt>._@return the size in bytes of the exception_table_length and exception_table structures.;static int getExceptionTableSize(final Handler firstHandler) {_    return 2 + 8 * getExceptionTableLength(firstHandler)__  };returns,the,size,in,bytes,of,the,jvms,corresponding,to,the,handler,list,that,begins,with,the,given,element,i,this,includes,the,field,i,param,first,handler,the,beginning,of,a,handler,list,may,be,tt,null,tt,return,the,size,in,bytes,of,the,and,structures;static,int,get,exception,table,size,final,handler,first,handler,return,2,8,get,exception,table,length,first,handler
Handler -> static int getExceptionTableSize(final Handler firstHandler);1536664245;Returns the size in bytes of the JVMS exception_table corresponding to the Handler list that_begins with the given element. <i>This includes the exception_table_length field.</i>__@param firstHandler the beginning of a Handler list. May be {@literal null}._@return the size in bytes of the exception_table_length and exception_table structures.;static int getExceptionTableSize(final Handler firstHandler) {_    return 2 + 8 * getExceptionTableLength(firstHandler)__  };returns,the,size,in,bytes,of,the,jvms,corresponding,to,the,handler,list,that,begins,with,the,given,element,i,this,includes,the,field,i,param,first,handler,the,beginning,of,a,handler,list,may,be,literal,null,return,the,size,in,bytes,of,the,and,structures;static,int,get,exception,table,size,final,handler,first,handler,return,2,8,get,exception,table,length,first,handler
Handler -> Handler(final Handler handler, final Label startPc, final Label endPc);1531241461;Constructs a new Handler from the given one, with a different scope.__@param handler an existing Handler._@param startPc the start_pc field of this JVMS exception_table entry._@param endPc the end_pc field of this JVMS exception_table entry.;Handler(final Handler handler, final Label startPc, final Label endPc) {_    this(startPc, endPc, handler.handlerPc, handler.catchType, handler.catchTypeDescriptor)__    this.nextHandler = handler.nextHandler__  };constructs,a,new,handler,from,the,given,one,with,a,different,scope,param,handler,an,existing,handler,param,start,pc,the,field,of,this,jvms,entry,param,end,pc,the,field,of,this,jvms,entry;handler,final,handler,handler,final,label,start,pc,final,label,end,pc,this,start,pc,end,pc,handler,handler,pc,handler,catch,type,handler,catch,type,descriptor,this,next,handler,handler,next,handler
Handler -> Handler(final Handler handler, final Label startPc, final Label endPc);1536664245;Constructs a new Handler from the given one, with a different scope.__@param handler an existing Handler._@param startPc the start_pc field of this JVMS exception_table entry._@param endPc the end_pc field of this JVMS exception_table entry.;Handler(final Handler handler, final Label startPc, final Label endPc) {_    this(startPc, endPc, handler.handlerPc, handler.catchType, handler.catchTypeDescriptor)__    this.nextHandler = handler.nextHandler__  };constructs,a,new,handler,from,the,given,one,with,a,different,scope,param,handler,an,existing,handler,param,start,pc,the,field,of,this,jvms,entry,param,end,pc,the,field,of,this,jvms,entry;handler,final,handler,handler,final,label,start,pc,final,label,end,pc,this,start,pc,end,pc,handler,handler,pc,handler,catch,type,handler,catch,type,descriptor,this,next,handler,handler,next,handler
