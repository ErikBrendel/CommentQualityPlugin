commented;modifiers;parameterAmount;loc;comment;code
true;public;2;6;/**  * Visits an annotation of the field.  *  * @param descriptor the class descriptor of the annotation class.  * @param visible {@literal true} if the annotation is visible at runtime.  * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not  *     interested in visiting this annotation.  */ ;/**  * Visits an annotation of the field.  *  * @param descriptor the class descriptor of the annotation class.  * @param visible {@literal true} if the annotation is visible at runtime.  * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not  *     interested in visiting this annotation.  */ public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {     if (fv != null) {         return fv.visitAnnotation(descriptor, visible).     }     return null. }
true;public;4;10;/**  * Visits an annotation on the type of the field.  *  * @param typeRef a reference to the annotated type. The sort of this type reference must be  *     {@link TypeReference#FIELD}. See {@link TypeReference}.  * @param typePath the path to the annotated type argument, wildcard bound, array element type, or  *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets  *     'typeRef' as a whole.  * @param descriptor the class descriptor of the annotation class.  * @param visible {@literal true} if the annotation is visible at runtime.  * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not  *     interested in visiting this annotation.  */ ;/**  * Visits an annotation on the type of the field.  *  * @param typeRef a reference to the annotated type. The sort of this type reference must be  *     {@link TypeReference#FIELD}. See {@link TypeReference}.  * @param typePath the path to the annotated type argument, wildcard bound, array element type, or  *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets  *     'typeRef' as a whole.  * @param descriptor the class descriptor of the annotation class.  * @param visible {@literal true} if the annotation is visible at runtime.  * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not  *     interested in visiting this annotation.  */ public AnnotationVisitor visitTypeAnnotation(final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {     if (api < Opcodes.ASM5) {         throw new UnsupportedOperationException("This feature requires ASM5").     }     if (fv != null) {         return fv.visitTypeAnnotation(typeRef, typePath, descriptor, visible).     }     return null. }
true;public;1;5;/**  * Visits a non standard attribute of the field.  *  * @param attribute an attribute.  */ ;/**  * Visits a non standard attribute of the field.  *  * @param attribute an attribute.  */ public void visitAttribute(final Attribute attribute) {     if (fv != null) {         fv.visitAttribute(attribute).     } }
true;public;0;5;/**  * Visits the end of the field. This method, which is the last one to be called, is used to inform  * the visitor that all the annotations and attributes of the field have been visited.  */ ;/**  * Visits the end of the field. This method, which is the last one to be called, is used to inform  * the visitor that all the annotations and attributes of the field have been visited.  */ public void visitEnd() {     if (fv != null) {         fv.visitEnd().     } }
