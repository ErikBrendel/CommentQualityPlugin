# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultSerializer -> public void serialize(Object object, OutputStream outputStream) throws IOException;1328020251;Writes the source object to an output stream using Java Serialization._The source object must implement {@link Serializable}.;public void serialize(Object object, OutputStream outputStream) throws IOException {_		if (!(object instanceof Serializable)) {_			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +_					"but received an object of type [" + object.getClass().getName() + "]")__		}_		ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)__		objectOutputStream.writeObject(object)__		objectOutputStream.flush()__	};writes,the,source,object,to,an,output,stream,using,java,serialization,the,source,object,must,implement,link,serializable;public,void,serialize,object,object,output,stream,output,stream,throws,ioexception,if,object,instanceof,serializable,throw,new,illegal,argument,exception,get,class,get,simple,name,requires,a,serializable,payload,but,received,an,object,of,type,object,get,class,get,name,object,output,stream,object,output,stream,new,object,output,stream,output,stream,object,output,stream,write,object,object,object,output,stream,flush
DefaultSerializer -> public void serialize(Object object, OutputStream outputStream) throws IOException;1357119239;Writes the source object to an output stream using Java Serialization._The source object must implement {@link Serializable}.;public void serialize(Object object, OutputStream outputStream) throws IOException {_		if (!(object instanceof Serializable)) {_			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +_					"but received an object of type [" + object.getClass().getName() + "]")__		}_		ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)__		objectOutputStream.writeObject(object)__		objectOutputStream.flush()__	};writes,the,source,object,to,an,output,stream,using,java,serialization,the,source,object,must,implement,link,serializable;public,void,serialize,object,object,output,stream,output,stream,throws,ioexception,if,object,instanceof,serializable,throw,new,illegal,argument,exception,get,class,get,simple,name,requires,a,serializable,payload,but,received,an,object,of,type,object,get,class,get,name,object,output,stream,object,output,stream,new,object,output,stream,output,stream,object,output,stream,write,object,object,object,output,stream,flush
DefaultSerializer -> @Override 	public void serialize(Object object, OutputStream outputStream) throws IOException;1356735495;Writes the source object to an output stream using Java Serialization._The source object must implement {@link Serializable}.;@Override_	public void serialize(Object object, OutputStream outputStream) throws IOException {_		if (!(object instanceof Serializable)) {_			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +_					"but received an object of type [" + object.getClass().getName() + "]")__		}_		ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)__		objectOutputStream.writeObject(object)__		objectOutputStream.flush()__	};writes,the,source,object,to,an,output,stream,using,java,serialization,the,source,object,must,implement,link,serializable;override,public,void,serialize,object,object,output,stream,output,stream,throws,ioexception,if,object,instanceof,serializable,throw,new,illegal,argument,exception,get,class,get,simple,name,requires,a,serializable,payload,but,received,an,object,of,type,object,get,class,get,name,object,output,stream,object,output,stream,new,object,output,stream,output,stream,object,output,stream,write,object,object,object,output,stream,flush
DefaultSerializer -> @Override 	public void serialize(Object object, OutputStream outputStream) throws IOException;1368482696;Writes the source object to an output stream using Java Serialization._The source object must implement {@link Serializable}.;@Override_	public void serialize(Object object, OutputStream outputStream) throws IOException {_		if (!(object instanceof Serializable)) {_			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +_					"but received an object of type [" + object.getClass().getName() + "]")__		}_		ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)__		objectOutputStream.writeObject(object)__		objectOutputStream.flush()__	};writes,the,source,object,to,an,output,stream,using,java,serialization,the,source,object,must,implement,link,serializable;override,public,void,serialize,object,object,output,stream,output,stream,throws,ioexception,if,object,instanceof,serializable,throw,new,illegal,argument,exception,get,class,get,simple,name,requires,a,serializable,payload,but,received,an,object,of,type,object,get,class,get,name,object,output,stream,object,output,stream,new,object,output,stream,output,stream,object,output,stream,write,object,object,object,output,stream,flush
DefaultSerializer -> @Override 	public void serialize(Object object, OutputStream outputStream) throws IOException;1441035153;Writes the source object to an output stream using Java serialization._The source object must implement {@link Serializable}._@see ObjectOutputStream#writeObject(Object);@Override_	public void serialize(Object object, OutputStream outputStream) throws IOException {_		if (!(object instanceof Serializable)) {_			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +_					"but received an object of type [" + object.getClass().getName() + "]")__		}_		ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)__		objectOutputStream.writeObject(object)__		objectOutputStream.flush()__	};writes,the,source,object,to,an,output,stream,using,java,serialization,the,source,object,must,implement,link,serializable,see,object,output,stream,write,object,object;override,public,void,serialize,object,object,output,stream,output,stream,throws,ioexception,if,object,instanceof,serializable,throw,new,illegal,argument,exception,get,class,get,simple,name,requires,a,serializable,payload,but,received,an,object,of,type,object,get,class,get,name,object,output,stream,object,output,stream,new,object,output,stream,output,stream,object,output,stream,write,object,object,object,output,stream,flush
