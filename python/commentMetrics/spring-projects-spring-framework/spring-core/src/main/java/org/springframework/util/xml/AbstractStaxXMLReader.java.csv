commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {     if (NAMESPACES_FEATURE_NAME.equals(name)) {         return this.namespacesFeature.     } else if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {         return this.namespacePrefixesFeature.     } else if (IS_STANDALONE_FEATURE_NAME.equals(name)) {         if (this.isStandalone != null) {             return this.isStandalone.         } else {             throw new SAXNotSupportedException("startDocument() callback not completed yet").         }     } else {         return super.getFeature(name).     } }
false;public;2;12;;@Override public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {     if (NAMESPACES_FEATURE_NAME.equals(name)) {         this.namespacesFeature = value.     } else if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {         this.namespacePrefixesFeature = value.     } else {         super.setFeature(name, value).     } }
false;protected;1;3;;protected void setStandalone(boolean standalone) {     this.isStandalone = standalone. }
true;protected;0;3;/**  * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces} is turned on.  */ ;/**  * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces} is turned on.  */ protected boolean hasNamespacesFeature() {     return this.namespacesFeature. }
true;protected;0;3;/**  * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces-prefixes} is turned on.  */ ;/**  * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces-prefixes} is turned on.  */ protected boolean hasNamespacePrefixesFeature() {     return this.namespacePrefixesFeature. }
true;protected;1;9;/**  * Convert a {@code QName} to a qualified name, as used by DOM and SAX.  * The returned string has a format of {@code prefix:localName} if the  * prefix is set, or just {@code localName} if not.  * @param qName the {@code QName}  * @return the qualified name  */ ;/**  * Convert a {@code QName} to a qualified name, as used by DOM and SAX.  * The returned string has a format of {@code prefix:localName} if the  * prefix is set, or just {@code localName} if not.  * @param qName the {@code QName}  * @return the qualified name  */ protected String toQualifiedName(QName qName) {     String prefix = qName.getPrefix().     if (!StringUtils.hasLength(prefix)) {         return qName.getLocalPart().     } else {         return prefix + ":" + qName.getLocalPart().     } }
true;public,final;1;4;/**  * Parse the StAX XML reader passed at construction-time.  * <p><b>NOTE:</b>: The given {@code InputSource} is not read, but ignored.  * @param ignored is ignored  * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}  */ ;/**  * Parse the StAX XML reader passed at construction-time.  * <p><b>NOTE:</b>: The given {@code InputSource} is not read, but ignored.  * @param ignored is ignored  * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}  */ @Override public final void parse(InputSource ignored) throws SAXException {     parse(). }
true;public,final;1;4;/**  * Parse the StAX XML reader passed at construction-time.  * <p><b>NOTE:</b>: The given system identifier is not read, but ignored.  * @param ignored is ignored  * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}  */ ;/**  * Parse the StAX XML reader passed at construction-time.  * <p><b>NOTE:</b>: The given system identifier is not read, but ignored.  * @param ignored is ignored  * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}  */ @Override public final void parse(String ignored) throws SAXException {     parse(). }
false;private;0;18;;private void parse() throws SAXException {     try {         parseInternal().     } catch (XMLStreamException ex) {         Locator locator = null.         if (ex.getLocation() != null) {             locator = new StaxLocator(ex.getLocation()).         }         SAXParseException saxException = new SAXParseException(ex.getMessage(), locator, ex).         if (getErrorHandler() != null) {             getErrorHandler().fatalError(saxException).         } else {             throw saxException.         }     } }
true;protected,abstract;0;1;/**  * Template method that parses the StAX reader passed at construction-time.  */ ;/**  * Template method that parses the StAX reader passed at construction-time.  */ protected abstract void parseInternal() throws SAXException, XMLStreamException.
true;protected;2;11;/**  * Start the prefix mapping for the given prefix.  * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)  */ ;/**  * Start the prefix mapping for the given prefix.  * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)  */ protected void startPrefixMapping(@Nullable String prefix, String namespace) throws SAXException {     if (getContentHandler() != null && StringUtils.hasLength(namespace)) {         if (prefix == null) {             prefix = "".         }         if (!namespace.equals(this.namespaces.get(prefix))) {             getContentHandler().startPrefixMapping(prefix, namespace).             this.namespaces.put(prefix, namespace).         }     } }
true;protected;1;6;/**  * End the prefix mapping for the given prefix.  * @see org.xml.sax.ContentHandler#endPrefixMapping(String)  */ ;/**  * End the prefix mapping for the given prefix.  * @see org.xml.sax.ContentHandler#endPrefixMapping(String)  */ protected void endPrefixMapping(String prefix) throws SAXException {     if (getContentHandler() != null && this.namespaces.containsKey(prefix)) {         getContentHandler().endPrefixMapping(prefix).         this.namespaces.remove(prefix).     } }
false;public;0;4;;@Override public String getPublicId() {     return this.location.getPublicId(). }
false;public;0;4;;@Override public String getSystemId() {     return this.location.getSystemId(). }
false;public;0;4;;@Override public int getLineNumber() {     return this.location.getLineNumber(). }
false;public;0;4;;@Override public int getColumnNumber() {     return this.location.getColumnNumber(). }
