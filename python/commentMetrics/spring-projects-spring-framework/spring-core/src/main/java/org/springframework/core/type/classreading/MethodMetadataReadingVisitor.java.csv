commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public AnnotationVisitor visitAnnotation(final String desc, boolean visible) {     this.methodMetadataSet.add(this).     String className = Type.getType(desc).getClassName().     return new AnnotationAttributesReadingVisitor(className, this.attributesMap, this.metaAnnotationMap, this.classLoader). }
false;public;0;4;;@Override public String getMethodName() {     return this.methodName. }
false;public;0;4;;@Override public boolean isAbstract() {     return ((this.access & Opcodes.ACC_ABSTRACT) != 0). }
false;public;0;4;;@Override public boolean isStatic() {     return ((this.access & Opcodes.ACC_STATIC) != 0). }
false;public;0;4;;@Override public boolean isFinal() {     return ((this.access & Opcodes.ACC_FINAL) != 0). }
false;public;0;4;;@Override public boolean isOverridable() {     return (!isStatic() && !isFinal() && ((this.access & Opcodes.ACC_PRIVATE) == 0)). }
false;public;1;4;;@Override public boolean isAnnotated(String annotationName) {     return this.attributesMap.containsKey(annotationName). }
false;public;1;5;;@Override @Nullable public AnnotationAttributes getAnnotationAttributes(String annotationName) {     return getAnnotationAttributes(annotationName, false). }
false;public;2;11;;@Override @Nullable public AnnotationAttributes getAnnotationAttributes(String annotationName, boolean classValuesAsString) {     AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(this.attributesMap, this.metaAnnotationMap, annotationName).     if (raw == null) {         return null.     }     return AnnotationReadingVisitorUtils.convertClassValues("method '" + getMethodName() + "'", this.classLoader, raw, classValuesAsString). }
false;public;1;5;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName) {     return getAllAnnotationAttributes(annotationName, false). }
false;public;2;17;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {     if (!this.attributesMap.containsKey(annotationName)) {         return null.     }     MultiValueMap<String, Object> allAttributes = new LinkedMultiValueMap<>().     List<AnnotationAttributes> attributesList = this.attributesMap.get(annotationName).     if (attributesList != null) {         for (AnnotationAttributes annotationAttributes : attributesList) {             AnnotationAttributes convertedAttributes = AnnotationReadingVisitorUtils.convertClassValues("method '" + getMethodName() + "'", this.classLoader, annotationAttributes, classValuesAsString).             convertedAttributes.forEach(allAttributes::add).         }     }     return allAttributes. }
false;public;0;4;;@Override public String getDeclaringClassName() {     return this.declaringClassName. }
false;public;0;4;;@Override public String getReturnTypeName() {     return this.returnTypeName. }
