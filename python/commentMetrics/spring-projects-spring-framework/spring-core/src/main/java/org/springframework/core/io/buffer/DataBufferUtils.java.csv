# id;timestamp;commentText;codeText;commentWords;codeWords
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1474380862;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1489064920;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1489155640;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1490061437;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1490798514;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1491927184;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1496837955;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1498780456;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500045239;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500051325;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500287125;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1501071048;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1508402332;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515579242;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515749769;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515749769;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1516379894;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1516614667;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1517583561;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1518559218;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1518561130;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1520542144;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if(currentCount < 0) {_						return true__					} else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1528737477;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if (currentCount < 0) {_						return true__					}_					else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1530174524;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				skipUntil(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.addAndGet(delta)__					if (currentCount < 0) {_						return true__					}_					else {_						DataBufferUtils.release(dataBuffer)__						return false__					}_				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					_					if (currentCount < 0) {_						int skip = (int) (currentCount + dataBuffer.readableByteCount())__						byteCountDown.set(0)__						return dataBuffer.slice(skip, dataBuffer.readableByteCount() - skip)__					}_					return dataBuffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,add,and,get,delta,if,current,count,0,return,true,else,data,buffer,utils,release,data,buffer,return,false,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,int,skip,int,current,count,data,buffer,readable,byte,count,byte,count,down,set,0,return,data,buffer,slice,skip,data,buffer,readable,byte,count,skip,return,data,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1533233962;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1533233962;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536138477;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536665804;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536665804;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1537356285;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.skipUntil(buffer -> {_					int delta = -buffer.readableByteCount()__					if (byteCountDown.addAndGet(delta) >= 0) {_						DataBufferUtils.release(buffer)__						return false__					}_					return true__				})_				.map(buffer -> {_					long count = byteCountDown.get()__					if (count < 0) {_						int skipCount = buffer.readableByteCount() + (int) count__						byteCountDown.set(0)__						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount)__					}_					return buffer__				})__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,int,delta,buffer,readable,byte,count,if,byte,count,down,add,and,get,delta,0,data,buffer,utils,release,buffer,return,false,return,true,map,buffer,long,count,byte,count,down,get,if,count,0,int,skip,count,buffer,readable,byte,count,int,count,byte,count,down,set,0,return,buffer,slice,skip,count,buffer,readable,byte,count,skip,count,return,buffer
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1539944178;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540305708;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540391301;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540574693;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1544108037;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1544609813;Skip buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux with the remaining part of the given publisher;public static Flux<DataBuffer> skipUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)__			return Flux.from(publisher)_					.skipUntil(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						return remainder < 0__					})_					.map(buffer -> {_						long remainder = countDown.get()__						if (remainder < 0) {_							countDown.set(0)__							int start = buffer.readableByteCount() + (int)remainder__							int length = (int) -remainder__							return buffer.slice(start, length)__						}_						else {_							return buffer__						}_					})__		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};skip,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,with,the,remaining,part,of,the,given,publisher;public,static,flux,data,buffer,skip,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,skip,until,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,return,remainder,0,map,buffer,long,remainder,count,down,get,if,remainder,0,count,down,set,0,int,start,buffer,readable,byte,count,int,remainder,int,length,int,remainder,return,buffer,slice,start,length,else,return,buffer,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1489064920;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.setCancellation(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,set,cancellation,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1489155640;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,on,dispose,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1490061437;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.setCancellation(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,set,cancellation,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1500045239;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelReadCompletionHandler completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(sink, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,sink,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1500051325;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelReadCompletionHandler completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(sink, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,sink,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelReadCompletionHandler completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(sink, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,sink,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelReadCompletionHandler completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(sink, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,sink,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			CompletionHandler<Integer, DataBuffer> completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(channel, sink, position,_							dataBufferFactory, bufferSize)__			channel.read(byteBuffer, position, dataBuffer, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			CompletionHandler<Integer, DataBuffer> completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(channel, sink, position,_							dataBufferFactory, bufferSize)__			channel.read(byteBuffer, position, dataBuffer, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			CompletionHandler<Integer, DataBuffer> completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(channel, sink, position,_							dataBufferFactory, bufferSize)__			channel.read(byteBuffer, position, dataBuffer, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.create(sink -> {_			sink.onDispose(() -> closeChannel(channel))__			CompletionHandler<Integer, DataBuffer> completionHandler =_					new AsynchronousFileChannelReadCompletionHandler(channel, sink, position,_							dataBufferFactory, bufferSize)__			channel.read(byteBuffer, position, dataBuffer, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,create,sink,sink,on,dispose,close,channel,channel,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1489064920;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1489155640;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1490061437;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1490798514;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1491927184;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1496837955;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1498780456;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500045239;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500051325;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return read(channel, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,channel,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1518561130;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1520542144;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1528737477;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1530174524;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1536138477;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1537356285;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1539944178;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1540305708;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1540391301;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1540574693;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1544108037;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream);1544609813;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1469540372;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				CLOSE_CONSUMER)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1470688950;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				CLOSE_CONSUMER)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1473700995;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				CLOSE_CONSUMER)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1474380862;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				CLOSE_CONSUMER)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1489064920;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1489155640;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1490061437;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1490798514;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1491927184;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1496837955;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1498780456;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500045239;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500051325;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code ReadableByteChannel} into a {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "ReadableByteChannel must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.generate(() -> channel,_				new ReadableByteChannelGenerator(dataBufferFactory, bufferSize),_				DataBufferUtils::closeChannel)__	};read,the,given,code,readable,byte,channel,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,readable,byte,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,generate,channel,new,readable,byte,channel,generator,data,buffer,factory,buffer,size,data,buffer,utils,close,channel
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1469540372;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1470688950;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1473700995;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1474380862;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1489064920;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1489155640;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1490061437;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1490798514;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1491927184;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1496837955;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1498780456;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500045239;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500051325;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1500287125;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1501071048;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1508402332;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515579242;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515749769;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1515749769;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1516379894;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1516614667;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1517583561;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1518559218;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1518561130;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1520542144;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1528737477;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1530174524;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong byteCountDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)._				takeWhile(dataBuffer -> {_					int delta = -dataBuffer.readableByteCount()__					long currentCount = byteCountDown.getAndAdd(delta)__					return currentCount >= 0__				})._				map(dataBuffer -> {_					long currentCount = byteCountDown.get()__					if (currentCount >= 0) {_						return dataBuffer__					}_					else {_						_						int size = (int) (currentCount + dataBuffer.readableByteCount())__						return dataBuffer.slice(0, size)__					}_				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,byte,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,data,buffer,int,delta,data,buffer,readable,byte,count,long,current,count,byte,count,down,get,and,add,delta,return,current,count,0,map,data,buffer,long,current,count,byte,count,down,get,if,current,count,0,return,data,buffer,else,int,size,int,current,count,data,buffer,readable,byte,count,return,data,buffer,slice,0,size
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1533233962;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.takeWhile(buffer -> {_					int delta = -buffer.readableByteCount()__					return countDown.getAndAdd(delta) >= 0__				})_				.map(buffer -> {_					long count = countDown.get()__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,take,while,buffer,int,delta,buffer,readable,byte,count,return,count,down,get,and,add,delta,0,map,buffer,long,count,count,down,get,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1533233962;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.map(buffer -> {_					long count = countDown.addAndGet(-buffer.readableByteCount())__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})_				.takeUntil(buffer -> countDown.get() <= 0)__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,count,count,down,add,and,get,buffer,readable,byte,count,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536138477;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.map(buffer -> {_					long count = countDown.addAndGet(-buffer.readableByteCount())__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})_				.takeUntil(buffer -> countDown.get() <= 0)__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,count,count,down,add,and,get,buffer,readable,byte,count,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536665804;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.map(buffer -> {_					long count = countDown.addAndGet(-buffer.readableByteCount())__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})_				.takeUntil(buffer -> countDown.get() <= 0)__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,count,count,down,add,and,get,buffer,readable,byte,count,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1536665804;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.map(buffer -> {_					long count = countDown.addAndGet(-buffer.readableByteCount())__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})_				.takeUntil(buffer -> countDown.get() <= 0)__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,count,count,down,add,and,get,buffer,readable,byte,count,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1537356285;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")__		AtomicLong countDown = new AtomicLong(maxByteCount)___		return Flux.from(publisher)_				.map(buffer -> {_					long count = countDown.addAndGet(-buffer.readableByteCount())__					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count)__				})_				.takeUntil(buffer -> countDown.get() <= 0)__	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,count,count,down,add,and,get,buffer,readable,byte,count,return,count,0,buffer,buffer,slice,0,buffer,readable,byte,count,int,count,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1539944178;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540305708;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540391301;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1540574693;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1544108037;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)___			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount);1544609813;Relay buffers from the given {@link Publisher} until the total_{@linkplain DataBuffer#readableByteCount() byte count} reaches_the given maximum byte count, or until the publisher is complete._@param publisher the publisher to filter_@param maxByteCount the maximum byte count_@return a flux whose maximum byte count is {@code maxByteCount};public static Flux<DataBuffer> takeUntilByteCount(Publisher<DataBuffer> publisher, long maxByteCount) {_		Assert.notNull(publisher, "Publisher must not be null")__		Assert.isTrue(maxByteCount >= 0, "'maxByteCount' must be a positive number")___		return Flux.defer(() -> {_			AtomicLong countDown = new AtomicLong(maxByteCount)__			return Flux.from(publisher)_					.map(buffer -> {_						long remainder = countDown.addAndGet(-buffer.readableByteCount())__						if (remainder < 0) {_							int length = buffer.readableByteCount() + (int) remainder__							return buffer.slice(0, length)__						}_						else {_							return buffer__						}_					})_					.takeUntil(buffer -> countDown.get() <= 0)__		})_ _	};relay,buffers,from,the,given,link,publisher,until,the,total,linkplain,data,buffer,readable,byte,count,byte,count,reaches,the,given,maximum,byte,count,or,until,the,publisher,is,complete,param,publisher,the,publisher,to,filter,param,max,byte,count,the,maximum,byte,count,return,a,flux,whose,maximum,byte,count,is,code,max,byte,count;public,static,flux,data,buffer,take,until,byte,count,publisher,data,buffer,publisher,long,max,byte,count,assert,not,null,publisher,publisher,must,not,be,null,assert,is,true,max,byte,count,0,max,byte,count,must,be,a,positive,number,return,flux,defer,atomic,long,count,down,new,atomic,long,max,byte,count,return,flux,from,publisher,map,buffer,long,remainder,count,down,add,and,get,buffer,readable,byte,count,if,remainder,0,int,length,buffer,readable,byte,count,int,remainder,return,buffer,slice,0,length,else,return,buffer,take,until,buffer,count,down,get,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1518561130;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position))__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1520542144;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1528737477;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1530174524;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1536138477;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1537356285;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1539944178;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1540305708;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,new,asynchronous,file,channel,write,completion,handler,sink,channel,position
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1540391301;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			AsynchronousFileChannelWriteCompletionHandler completionHandler =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			sink.onDispose(completionHandler)__			flux.subscribe(completionHandler)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,asynchronous,file,channel,write,completion,handler,completion,handler,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,sink,on,dispose,completion,handler,flux,subscribe,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1540574693;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			AsynchronousFileChannelWriteCompletionHandler completionHandler =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			sink.onDispose(completionHandler)__			flux.subscribe(completionHandler)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,asynchronous,file,channel,write,completion,handler,completion,handler,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,sink,on,dispose,completion,handler,flux,subscribe,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1544108037;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			AsynchronousFileChannelWriteCompletionHandler completionHandler =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			sink.onDispose(completionHandler)__			flux.subscribe(completionHandler)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,asynchronous,file,channel,write,completion,handler,completion,handler,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,sink,on,dispose,completion,handler,flux,subscribe,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position);1544609813;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@param position the file position at which the write is to begin_ must be non-negative_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			AsynchronousFileChannelWriteCompletionHandler completionHandler =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			sink.onDispose(completionHandler)__			flux.subscribe(completionHandler)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,param,position,the,file,position,at,which,the,write,is,to,begin,must,be,non,negative,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,asynchronous,file,channel,write,completion,handler,completion,handler,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,sink,on,dispose,completion,handler,flux,subscribe,completion,handler
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the channel when_the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the channel when_the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the channel when_the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the channel when_the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1518561130;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1520542144;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1528737477;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1530174524;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1533233962;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1536138477;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.next(dataBuffer)__								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,next,data,buffer,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.next(dataBuffer)__								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,next,data,buffer,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1537356285;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.next(dataBuffer)__								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,next,data,buffer,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1539944178;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.next(dataBuffer)__								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,next,data,buffer,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1540305708;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.next(dataBuffer)__								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,next,data,buffer,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1540391301;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			WritableByteChannelSubscriber subscriber =_					new WritableByteChannelSubscriber(sink, channel)__			sink.onDispose(subscriber)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,writable,byte,channel,subscriber,subscriber,new,writable,byte,channel,subscriber,sink,channel,sink,on,dispose,subscriber,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1540574693;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			WritableByteChannelSubscriber subscriber =_					new WritableByteChannelSubscriber(sink, channel)__			sink.onDispose(subscriber)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,writable,byte,channel,subscriber,subscriber,new,writable,byte,channel,subscriber,sink,channel,sink,on,dispose,subscriber,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1544108037;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			WritableByteChannelSubscriber subscriber =_					new WritableByteChannelSubscriber(sink, channel)__			sink.onDispose(subscriber)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,writable,byte,channel,subscriber,subscriber,new,writable,byte,channel,subscriber,sink,channel,sink,on,dispose,subscriber,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel);1544609813;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {_		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)__		return Flux.create(sink -> {_			WritableByteChannelSubscriber subscriber =_					new WritableByteChannelSubscriber(sink, channel)__			sink.onDispose(subscriber)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,writable,byte,channel,subscriber,subscriber,new,writable,byte,channel,subscriber,sink,channel,sink,on,dispose,subscriber,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)} closes_the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1500051325;Returns a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};returns,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1500287125;Returns a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};returns,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1501071048;Returns a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};returns,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1508402332;Returns a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};returns,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1515579242;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1515749769;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1515749769;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1516379894;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1516614667;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1517583561;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1518559218;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1518561130;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1520542144;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1528737477;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1530174524;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1533233962;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1533233962;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1536138477;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1536665804;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1536665804;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1537356285;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1539944178;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1540305708;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1540391301;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1540574693;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1544108037;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Consumer<DataBuffer> releaseConsumer();1544609813;Return a consumer that calls {@link #release(DataBuffer)} on all_passed data buffers.;public static Consumer<DataBuffer> releaseConsumer() {_		return RELEASE_CONSUMER__	};return,a,consumer,that,calls,link,release,data,buffer,on,all,passed,data,buffers;public,static,consumer,data,buffer,release,consumer,return
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #read(AsynchronousFileChannel, DataBufferFactory, int)} or else_fall back on {@link #read(InputStream, DataBufferFactory, int)}. Closes_the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()__				AsynchronousFileChannel channel =_						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)__				return DataBufferUtils.read(channel, position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		try {_			ReadableByteChannel channel = resource.readableChannel()__			Flux<DataBuffer> in = DataBufferUtils.read(channel, dataBufferFactory, bufferSize)__			return DataBufferUtils.skipUntilByteCount(in, position)__		}_		catch (IOException ex) {_			return Flux.error(ex)__		}_	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,data,buffer,factory,int,or,else,fall,back,on,link,read,input,stream,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,asynchronous,file,channel,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,return,data,buffer,utils,read,channel,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,try,readable,byte,channel,channel,resource,readable,channel,flux,data,buffer,in,data,buffer,utils,read,channel,data,buffer,factory,buffer,size,return,data,buffer,utils,skip,until,byte,count,in,position,catch,ioexception,ex,return,flux,error,ex
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()___				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()___				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()___				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> read(Resource resource, long position, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s_starting at the given position._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(Resource resource, long position,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		try {_			if (resource.isFile()) {_				File file = resource.getFile()___				return readAsynchronousFileChannel(_						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),_						position, dataBufferFactory, bufferSize)__			}_		}_		catch (IOException ignore) {_			_		}__		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, dataBufferFactory, bufferSize)__		return position == 0 ? result : skipUntilByteCount(result, position)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,on,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,try,if,resource,is,file,file,file,resource,get,file,return,read,asynchronous,file,channel,asynchronous,file,channel,open,file,to,path,standard,open,option,read,position,data,buffer,factory,buffer,size,catch,ioexception,ignore,flux,data,buffer,result,read,byte,channel,resource,readable,channel,data,buffer,factory,buffer,size,return,position,0,result,skip,until,byte,count,result,position
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel( 			Callable<AsynchronousFileChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(_			Callable<AsynchronousFileChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,supplier,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1469540372;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1470688950;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1473700995;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1474380862;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1489064920;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1489155640;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1490061437;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1490798514;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1491927184;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(DataBuffer dataBuffer);1496837955;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(ReadableByteChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(ReadableByteChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1469540372;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1470688950;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1473700995;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1474380862;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1489064920;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1489155640;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1490061437;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1490798514;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1491927184;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1496837955;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1498780456;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1500045239;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1500051325;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1500287125;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1501071048;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")__		Assert.notNull(dataBufferFactory, "DataBufferFactory must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1508402332;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1515579242;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1515749769;Read the given {@code InputStream} into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStream, "InputStream must not be null")___		ReadableByteChannel channel = Channels.newChannel(inputStream)__		return read(channel, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,input,stream,must,not,be,null,readable,byte,channel,channel,channels,new,channel,input,stream,return,read,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel( 			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(_			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel)_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1500051325;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1500287125;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1501071048;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1508402332;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1515579242;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1516379894;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1516614667;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1517583561;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			OutputStream outputStream);1518559218;Write the given stream of {@link DataBuffer}s to the given {@code OutputStream}. Does_<strong>not</strong> close the output stream when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param outputStream the output stream to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			OutputStream outputStream) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(outputStream, "'outputStream' must not be null")___		WritableByteChannel channel = Channels.newChannel(outputStream)__		return write(source, channel)__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,output,stream,does,strong,not,strong,close,the,output,stream,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,output,stream,the,output,stream,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,output,stream,output,stream,assert,not,null,source,source,must,not,be,null,assert,not,null,output,stream,output,stream,must,not,be,null,writable,byte,channel,channel,channels,new,channel,output,stream,return,write,source,channel
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1500051325;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1500287125;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1501071048;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1508402332;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1515579242;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1516379894;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1516614667;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1517583561;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, 			WritableByteChannel channel);1518559218;Write the given stream of {@link DataBuffer}s to the given {@code WritableByteChannel}. Does_<strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source,_			WritableByteChannel channel) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink ->_				flux.subscribe(dataBuffer -> {_							try {_								ByteBuffer byteBuffer = dataBuffer.asByteBuffer()__								while (byteBuffer.hasRemaining()) {_									channel.write(byteBuffer)__								}_								sink.next(dataBuffer)__							}_							catch (IOException ex) {_								sink.error(ex)__							}__						},_						sink::error,_						sink::complete))__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,writable,byte,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,writable,byte,channel,channel,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,flux,subscribe,data,buffer,try,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,while,byte,buffer,has,remaining,channel,write,byte,buffer,sink,next,data,buffer,catch,ioexception,ex,sink,error,ex,sink,error,sink,complete
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(InputStream inputStream, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param inputStream the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(InputStream inputStream,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize)__	};read,the,given,code,input,stream,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,input,stream,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,input,stream,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,input,stream,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,input,stream,input,stream,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,input,stream,input,stream,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream( 			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}_of {@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(_			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static BinaryOperator<DataBuffer> writeAggregator();1515579242;Return an aggregator function that can be used to {@linkplain Flux#reduce(BiFunction) reduce}_a {@code Flux} of data buffers into a single data buffer by writing all subsequent buffers_into the first buffer. All buffers except the first buffer are_{@linkplain #release(DataBuffer) released}._<p>For example:_<pre class="code">_Flux&lt_DataBuffer&gt_ flux = ..._Mono&lt_DataBuffer&gt_ mono = flux.reduce(DataBufferUtils.writeAggregator())__</pre>_@see Flux#reduce(BiFunction);public static BinaryOperator<DataBuffer> writeAggregator() {_		return WRITE_AGGREGATOR__	};return,an,aggregator,function,that,can,be,used,to,linkplain,flux,reduce,bi,function,reduce,a,code,flux,of,data,buffers,into,a,single,data,buffer,by,writing,all,subsequent,buffers,into,the,first,buffer,all,buffers,except,the,first,buffer,are,linkplain,release,data,buffer,released,p,for,example,pre,class,code,flux,lt,data,buffer,gt,flux,mono,lt,data,buffer,gt,mono,flux,reduce,data,buffer,utils,write,aggregator,pre,see,flux,reduce,bi,function;public,static,binary,operator,data,buffer,write,aggregator,return
DataBufferUtils -> public static BinaryOperator<DataBuffer> writeAggregator();1515749769;Return an aggregator function that can be used to {@linkplain Flux#reduce(BiFunction) reduce}_a {@code Flux} of data buffers into a single data buffer by writing all subsequent buffers_into the first buffer. All buffers except the first buffer are_{@linkplain #release(DataBuffer) released}._<p>For example:_<pre class="code">_Flux&lt_DataBuffer&gt_ flux = ..._Mono&lt_DataBuffer&gt_ mono = flux.reduce(DataBufferUtils.writeAggregator())__</pre>_@see Flux#reduce(BiFunction);public static BinaryOperator<DataBuffer> writeAggregator() {_		return WRITE_AGGREGATOR__	};return,an,aggregator,function,that,can,be,used,to,linkplain,flux,reduce,bi,function,reduce,a,code,flux,of,data,buffers,into,a,single,data,buffer,by,writing,all,subsequent,buffers,into,the,first,buffer,all,buffers,except,the,first,buffer,are,linkplain,release,data,buffer,released,p,for,example,pre,class,code,flux,lt,data,buffer,gt,flux,mono,lt,data,buffer,gt,mono,flux,reduce,data,buffer,utils,write,aggregator,pre,see,flux,reduce,bi,function;public,static,binary,operator,data,buffer,write,aggregator,return
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		return Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_							CompletionHandler<Integer, DataBuffer> completionHandler =_									new AsynchronousFileChannelReadCompletionHandler(channel,_											sink, position, dataBufferFactory, bufferSize)__							channel.read(byteBuffer, position, dataBuffer, completionHandler)__						}),_				DataBufferUtils::closeChannel)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,return,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					CompletionHandler<Integer, DataBuffer> completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					CompletionHandler<Integer, DataBuffer> completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,completion,handler,integer,data,buffer,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)____		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					AsynchronousFileChannelReadCompletionHandler completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__					sink.onDispose(completionHandler::dispose)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,sink,on,dispose,completion,handler,dispose,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)____		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					AsynchronousFileChannelReadCompletionHandler completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__					sink.onDispose(completionHandler::dispose)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,sink,on,dispose,completion,handler,dispose,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)____		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					AsynchronousFileChannelReadCompletionHandler completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__					sink.onDispose(completionHandler::dispose)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,sink,on,dispose,completion,handler,dispose,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)____		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					AsynchronousFileChannelReadCompletionHandler completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__					sink.onDispose(completionHandler::dispose)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,sink,on,dispose,completion,handler,dispose,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the_channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		DataBuffer dataBuffer = dataBufferFactory.allocateBuffer(bufferSize)__		ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, bufferSize)___		Flux<DataBuffer> result = Flux.using(channelSupplier,_				channel -> Flux.create(sink -> {_					AsynchronousFileChannelReadCompletionHandler completionHandler =_							new AsynchronousFileChannelReadCompletionHandler(channel,_									sink, position, dataBufferFactory, bufferSize)__					channel.read(byteBuffer, position, dataBuffer, completionHandler)__					sink.onDispose(completionHandler::dispose)__				}),_				DataBufferUtils::closeChannel)___		return result.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)__	};obtain,a,code,asynchronous,file,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,asynchronous,file,channel,callable,asynchronous,file,channel,channel,supplier,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,assert,is,true,buffer,size,0,buffer,size,must,be,0,data,buffer,data,buffer,data,buffer,factory,allocate,buffer,buffer,size,byte,buffer,byte,buffer,data,buffer,as,byte,buffer,0,buffer,size,flux,data,buffer,result,flux,using,channel,supplier,channel,flux,create,sink,asynchronous,file,channel,read,completion,handler,completion,handler,new,asynchronous,file,channel,read,completion,handler,channel,sink,position,data,buffer,factory,buffer,size,channel,read,byte,buffer,position,data,buffer,completion,handler,sink,on,dispose,completion,handler,dispose,data,buffer,utils,close,channel,return,result,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports_multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readByteChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,readable,byte,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,byte,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,byte,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,readable,byte,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,byte,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read( 			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s. Closes the channel when the flux is terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that_supports multiple subscriptions._@param channel the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in_Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(_			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {__		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a_{@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated._@param channelSupplier the supplier for the channel to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channelSupplier, "'channelSupplier' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0")___		return Flux.using(channelSupplier,_				channel -> {_					ReadableByteChannelGenerator generator =_							new ReadableByteChannelGenerator(channel, dataBufferFactory,_									bufferSize)__					return Flux.generate(generator)__				},_				DataBufferUtils::closeChannel_		)__	};obtain,a,link,readable,byte,channel,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,channel,when,the,flux,is,terminated,param,channel,supplier,the,supplier,for,the,channel,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,byte,channel,callable,readable,byte,channel,channel,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,supplier,channel,supplier,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,buffer,size,0,buffer,size,must,be,0,return,flux,using,channel,supplier,channel,readable,byte,channel,generator,generator,new,readable,byte,channel,generator,channel,data,buffer,factory,buffer,size,return,flux,generate,generator,data,buffer,utils,close,channel
DataBufferUtils -> public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()),_				dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()),_				dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()),_				dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier, 			DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux} of_{@code DataBuffer}s. Closes the input stream when the flux is terminated._@param inputStreamSupplier the supplier for the input stream to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier,_			DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null")___		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()),_				dataBufferFactory, bufferSize)__	};obtain,a,link,input,stream,from,the,given,supplier,and,read,it,into,a,code,flux,of,code,data,buffer,s,closes,the,input,stream,when,the,flux,is,terminated,param,input,stream,supplier,the,supplier,for,the,input,stream,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,input,stream,callable,input,stream,input,stream,supplier,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,input,stream,supplier,input,stream,supplier,must,not,be,null,return,read,byte,channel,channels,new,channel,input,stream,supplier,call,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1516379894;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1516614667;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1517583561;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> @Deprecated 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1518559218;Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}_of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._<p>The resulting {@code Flux} can only be subscribed to once. See_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant_that supports multiple subscriptions._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel_@deprecated as of Spring 5.0.3, in favor of_{@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed_in Spring 5.1;@Deprecated_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {_		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize)__	};read,the,given,code,asynchronous,file,channel,into,a,strong,read,once,strong,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,p,the,resulting,code,flux,can,only,be,subscribed,to,once,see,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,for,a,variant,that,supports,multiple,subscriptions,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel,deprecated,as,of,spring,5,0,3,in,favor,of,link,read,asynchronous,file,channel,callable,long,data,buffer,factory,int,to,be,removed,in,spring,5,1;deprecated,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,asynchronous,file,channel,channel,position,data,buffer,factory,buffer,size
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1517583561;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1518559218;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1518561130;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1520542144;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1528737477;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1530174524;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1533233962;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1533233962;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1536138477;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.onErrorResume(DataBufferUtils::exceptionDataBuffer)_				.collectList()_				.filter(list -> !list.isEmpty())_				.flatMap(list -> {_					for (int i = 0_ i < list.size()_ i++) {_						DataBuffer dataBuffer = list.get(i)__						if (dataBuffer instanceof ExceptionDataBuffer) {_							list.subList(0, i).forEach(DataBufferUtils::release)__							return Mono.error(((ExceptionDataBuffer) dataBuffer).throwable())__						}_					}_					DataBufferFactory bufferFactory = list.get(0).factory()__					return Mono.just(bufferFactory.join(list))__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,on,error,resume,data,buffer,utils,exception,data,buffer,collect,list,filter,list,list,is,empty,flat,map,list,for,int,i,0,i,list,size,i,data,buffer,data,buffer,list,get,i,if,data,buffer,instanceof,exception,data,buffer,list,sub,list,0,i,for,each,data,buffer,utils,release,return,mono,error,exception,data,buffer,data,buffer,throwable,data,buffer,factory,buffer,factory,list,get,0,factory,return,mono,just,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1536665804;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.onErrorResume(DataBufferUtils::exceptionDataBuffer)_				.collectList()_				.filter(list -> !list.isEmpty())_				.flatMap(list -> {_					for (int i = 0_ i < list.size()_ i++) {_						DataBuffer dataBuffer = list.get(i)__						if (dataBuffer instanceof ExceptionDataBuffer) {_							list.subList(0, i).forEach(DataBufferUtils::release)__							return Mono.error(((ExceptionDataBuffer) dataBuffer).throwable())__						}_					}_					DataBufferFactory bufferFactory = list.get(0).factory()__					return Mono.just(bufferFactory.join(list))__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,on,error,resume,data,buffer,utils,exception,data,buffer,collect,list,filter,list,list,is,empty,flat,map,list,for,int,i,0,i,list,size,i,data,buffer,data,buffer,list,get,i,if,data,buffer,instanceof,exception,data,buffer,list,sub,list,0,i,for,each,data,buffer,utils,release,return,mono,error,exception,data,buffer,data,buffer,throwable,data,buffer,factory,buffer,factory,list,get,0,factory,return,mono,just,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1536665804;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.onErrorResume(DataBufferUtils::exceptionDataBuffer)_				.collectList()_				.filter(list -> !list.isEmpty())_				.flatMap(list -> {_					for (int i = 0_ i < list.size()_ i++) {_						DataBuffer dataBuffer = list.get(i)__						if (dataBuffer instanceof ExceptionDataBuffer) {_							list.subList(0, i).forEach(DataBufferUtils::release)__							return Mono.error(((ExceptionDataBuffer) dataBuffer).throwable())__						}_					}_					DataBufferFactory bufferFactory = list.get(0).factory()__					return Mono.just(bufferFactory.join(list))__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,on,error,resume,data,buffer,utils,exception,data,buffer,collect,list,filter,list,list,is,empty,flat,map,list,for,int,i,0,i,list,size,i,data,buffer,data,buffer,list,get,i,if,data,buffer,instanceof,exception,data,buffer,list,sub,list,0,i,for,each,data,buffer,utils,release,return,mono,error,exception,data,buffer,data,buffer,throwable,data,buffer,factory,buffer,factory,list,get,0,factory,return,mono,just,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1537356285;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.onErrorResume(DataBufferUtils::exceptionDataBuffer)_				.collectList()_				.filter(list -> !list.isEmpty())_				.flatMap(list -> {_					for (int i = 0_ i < list.size()_ i++) {_						DataBuffer dataBuffer = list.get(i)__						if (dataBuffer instanceof ExceptionDataBuffer) {_							list.subList(0, i).forEach(DataBufferUtils::release)__							return Mono.error(((ExceptionDataBuffer) dataBuffer).throwable())__						}_					}_					DataBufferFactory bufferFactory = list.get(0).factory()__					return Mono.just(bufferFactory.join(list))__				})__	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,on,error,resume,data,buffer,utils,exception,data,buffer,collect,list,filter,list,list,is,empty,flat,map,list,for,int,i,0,i,list,size,i,data,buffer,data,buffer,list,get,i,if,data,buffer,instanceof,exception,data,buffer,list,sub,list,0,i,for,each,data,buffer,utils,release,return,mono,error,exception,data,buffer,data,buffer,throwable,data,buffer,factory,buffer,factory,list,get,0,factory,return,mono,just,buffer,factory,join,list
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1539944178;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1540305708;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1540391301;Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together._Depending on the {@link DataBuffer} implementation, the returned buffer may be a single_buffer containing all data of the provided buffers, or it may be a true composite that_contains references to the buffers._<p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error_will be {@linkplain #release(DataBuffer) released}, and the error is stored in the_returned {@code Mono}._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> {_					DataBufferFactory bufferFactory = list.get(0).factory()__					return bufferFactory.join(list)__				})_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,of,the,code,data,buffers,elements,joined,together,depending,on,the,link,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,p,if,code,data,buffers,contains,an,error,signal,then,all,buffers,that,preceded,the,error,will,be,linkplain,release,data,buffer,released,and,the,error,is,stored,in,the,returned,code,mono,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,data,buffer,factory,buffer,factory,list,get,0,factory,return,buffer,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1540574693;Return a new {@code DataBuffer} composed from joining together the given_{@code dataBuffers} elements. Depending on the {@link DataBuffer} type,_the returned buffer may be a single buffer containing all data of the_provided buffers, or it may be a zero-copy, composite with references to_the given buffers._<p>If {@code dataBuffers} produces an error or if there is a cancel_signal, then all accumulated buffers will be_{@linkplain #release(DataBuffer) released}._<p>Note that the given data buffers do <strong>not</strong> have to be_released. They will be released as part of the returned composite._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> list.get(0).factory().join(list))_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,from,joining,together,the,given,code,data,buffers,elements,depending,on,the,link,data,buffer,type,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,zero,copy,composite,with,references,to,the,given,buffers,p,if,code,data,buffers,produces,an,error,or,if,there,is,a,cancel,signal,then,all,accumulated,buffers,will,be,linkplain,release,data,buffer,released,p,note,that,the,given,data,buffers,do,strong,not,strong,have,to,be,released,they,will,be,released,as,part,of,the,returned,composite,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,list,get,0,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1544108037;Return a new {@code DataBuffer} composed from joining together the given_{@code dataBuffers} elements. Depending on the {@link DataBuffer} type,_the returned buffer may be a single buffer containing all data of the_provided buffers, or it may be a zero-copy, composite with references to_the given buffers._<p>If {@code dataBuffers} produces an error or if there is a cancel_signal, then all accumulated buffers will be_{@linkplain #release(DataBuffer) released}._<p>Note that the given data buffers do <strong>not</strong> have to be_released. They will be released as part of the returned composite._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> list.get(0).factory().join(list))_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,from,joining,together,the,given,code,data,buffers,elements,depending,on,the,link,data,buffer,type,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,zero,copy,composite,with,references,to,the,given,buffers,p,if,code,data,buffers,produces,an,error,or,if,there,is,a,cancel,signal,then,all,accumulated,buffers,will,be,linkplain,release,data,buffer,released,p,note,that,the,given,data,buffers,do,strong,not,strong,have,to,be,released,they,will,be,released,as,part,of,the,returned,composite,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,list,get,0,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers);1544609813;Return a new {@code DataBuffer} composed from joining together the given_{@code dataBuffers} elements. Depending on the {@link DataBuffer} type,_the returned buffer may be a single buffer containing all data of the_provided buffers, or it may be a zero-copy, composite with references to_the given buffers._<p>If {@code dataBuffers} produces an error or if there is a cancel_signal, then all accumulated buffers will be_{@linkplain #release(DataBuffer) released}._<p>Note that the given data buffers do <strong>not</strong> have to be_released. They will be released as part of the returned composite._@param dataBuffers the data buffers that are to be composed_@return a buffer that is composed from the {@code dataBuffers} argument_@since 5.0.3;public static Mono<DataBuffer> join(Publisher<DataBuffer> dataBuffers) {_		Assert.notNull(dataBuffers, "'dataBuffers' must not be null")___		return Flux.from(dataBuffers)_				.collectList()_				.filter(list -> !list.isEmpty())_				.map(list -> list.get(0).factory().join(list))_				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)___	};return,a,new,code,data,buffer,composed,from,joining,together,the,given,code,data,buffers,elements,depending,on,the,link,data,buffer,type,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,zero,copy,composite,with,references,to,the,given,buffers,p,if,code,data,buffers,produces,an,error,or,if,there,is,a,cancel,signal,then,all,accumulated,buffers,will,be,linkplain,release,data,buffer,released,p,note,that,the,given,data,buffers,do,strong,not,strong,have,to,be,released,they,will,be,released,as,part,of,the,returned,composite,param,data,buffers,the,data,buffers,that,are,to,be,composed,return,a,buffer,that,is,composed,from,the,code,data,buffers,argument,since,5,0,3;public,static,mono,data,buffer,join,publisher,data,buffer,data,buffers,assert,not,null,data,buffers,data,buffers,must,not,be,null,return,flux,from,data,buffers,collect,list,filter,list,list,is,empty,map,list,list,get,0,factory,join,list,do,on,discard,pooled,data,buffer,class,data,buffer,utils,release
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1500051325;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1500287125;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1501071048;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1508402332;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1515579242;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1515749769;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1516379894;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1516614667;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1517583561;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel, 			long position);1518559218;Write the given stream of {@link DataBuffer}s to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed_to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel,_			long position) {__		Assert.notNull(source, "'source' must not be null")__		Assert.notNull(channel, "'channel' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		Flux<DataBuffer> flux = Flux.from(source)___		return Flux.create(sink -> {_			BaseSubscriber<DataBuffer> subscriber =_					new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position)__			flux.subscribe(subscriber)__		})__	};write,the,given,stream,of,link,data,buffer,s,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,long,position,assert,not,null,source,source,must,not,be,null,assert,not,null,channel,channel,must,not,be,null,assert,is,true,position,0,position,must,be,0,flux,data,buffer,flux,flux,from,source,return,flux,create,sink,base,subscriber,data,buffer,subscriber,new,asynchronous,file,channel,write,completion,handler,sink,channel,position,flux,subscribe,subscriber
DataBufferUtils -> @SuppressWarnings("deprecation") 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1490798514;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;@SuppressWarnings("deprecation")_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.setCancellation(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;suppress,warnings,deprecation,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,set,cancellation,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> @SuppressWarnings("deprecation") 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1491927184;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;@SuppressWarnings("deprecation")_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;suppress,warnings,deprecation,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,on,dispose,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> @SuppressWarnings("deprecation") 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1496837955;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;@SuppressWarnings("deprecation")_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;suppress,warnings,deprecation,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,on,dispose,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> @SuppressWarnings("deprecation") 	public static Flux<DataBuffer> read(AsynchronousFileChannel channel, 			long position, DataBufferFactory dataBufferFactory, int bufferSize);1498780456;Read the given {@code AsynchronousFileChannel} into a {@code Flux} of_{@code DataBuffer}s, starting at the given position. Closes the channel when the flux is_terminated._@param channel the channel to read from_@param position the position to start reading from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;@SuppressWarnings("deprecation")_	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,_			long position, DataBufferFactory dataBufferFactory, int bufferSize) {__		Assert.notNull(channel, "'channel' must not be null")__		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null")__		Assert.isTrue(position >= 0, "'position' must be >= 0")___		ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize)___		return Flux.create(emitter -> {_			emitter.onDispose(() -> closeChannel(channel))__			AsynchronousFileChannelCompletionHandler completionHandler =_					new AsynchronousFileChannelCompletionHandler(emitter, position,_							dataBufferFactory, byteBuffer)__			channel.read(byteBuffer, position, channel, completionHandler)__		})__	};read,the,given,code,asynchronous,file,channel,into,a,code,flux,of,code,data,buffer,s,starting,at,the,given,position,closes,the,channel,when,the,flux,is,terminated,param,channel,the,channel,to,read,from,param,position,the,position,to,start,reading,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;suppress,warnings,deprecation,public,static,flux,data,buffer,read,asynchronous,file,channel,channel,long,position,data,buffer,factory,data,buffer,factory,int,buffer,size,assert,not,null,channel,channel,must,not,be,null,assert,not,null,data,buffer,factory,data,buffer,factory,must,not,be,null,assert,is,true,position,0,position,must,be,0,byte,buffer,byte,buffer,byte,buffer,allocate,buffer,size,return,flux,create,emitter,emitter,on,dispose,close,channel,channel,asynchronous,file,channel,completion,handler,completion,handler,new,asynchronous,file,channel,completion,handler,emitter,position,data,buffer,factory,byte,buffer,channel,read,byte,buffer,position,channel,completion,handler
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1469540372;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1470688950;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1473700995;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1474380862;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1489064920;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1489155640;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1490061437;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1490798514;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1491927184;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1496837955;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1498780456;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1500045239;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1500051325;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1500287125;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1501071048;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1508402332;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1515579242;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1515749769;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1515749769;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1516379894;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1516614667;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1517583561;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1518559218;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1518561130;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1520542144;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1528737477;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1530174524;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1533233962;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1533233962;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1536138477;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1536665804;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1536665804;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1537356285;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1539944178;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1540305708;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1540391301;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1540574693;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1544108037;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> @SuppressWarnings("unchecked") 	public static <T extends DataBuffer> T retain(T dataBuffer);1544609813;Retain the given data buffer, it it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to retain_@return the retained buffer;@SuppressWarnings("unchecked")_	public static <T extends DataBuffer> T retain(T dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return (T) ((PooledDataBuffer) dataBuffer).retain()__		}_		else {_			return dataBuffer__		}_	};retain,the,given,data,buffer,it,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,retain,return,the,retained,buffer;suppress,warnings,unchecked,public,static,t,extends,data,buffer,t,retain,t,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,t,pooled,data,buffer,data,buffer,retain,else,return,data,buffer
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1498780456;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1500045239;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1500051325;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1500287125;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1501071048;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1508402332;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1515579242;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1515749769;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1515749769;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1516379894;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1516614667;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1517583561;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1518559218;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			return ((PooledDataBuffer) dataBuffer).release()__		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,return,pooled,data,buffer,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1518561130;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1520542144;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1528737477;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1530174524;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1533233962;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1533233962;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1536138477;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1536665804;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1536665804;Release the given data buffer, if it is a {@link PooledDataBuffer}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release())__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,return,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,data,buffer,release
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1537356285;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1539944178;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1540305708;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1540391301;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1540574693;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1544108037;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static boolean release(@Nullable DataBuffer dataBuffer);1544609813;Release the given data buffer, if it is a {@link PooledDataBuffer} and_has been {@linkplain PooledDataBuffer#isAllocated() allocated}._@param dataBuffer the data buffer to release_@return {@code true} if the buffer was released_ {@code false} otherwise.;public static boolean release(@Nullable DataBuffer dataBuffer) {_		if (dataBuffer instanceof PooledDataBuffer) {_			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer__			if (pooledDataBuffer.isAllocated()) {_				return pooledDataBuffer.release()__			}_		}_		return false__	};release,the,given,data,buffer,if,it,is,a,link,pooled,data,buffer,and,has,been,linkplain,pooled,data,buffer,is,allocated,allocated,param,data,buffer,the,data,buffer,to,release,return,code,true,if,the,buffer,was,released,code,false,otherwise;public,static,boolean,release,nullable,data,buffer,data,buffer,if,data,buffer,instanceof,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,pooled,data,buffer,data,buffer,if,pooled,data,buffer,is,allocated,return,pooled,data,buffer,release,return,false
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1518561130;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1520542144;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1528737477;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1530174524;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1533233962;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1536138477;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1536665804;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1537356285;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1539944178;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1540305708;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1540391301;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1540574693;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1544108037;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> read( 			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize);1544609813;Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s._<p>If the resource is a file, it is read into an_{@code AsynchronousFileChannel} and turned to {@code Flux} via_{@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else_fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}._Closes the channel when the flux is terminated._@param resource the resource to read from_@param dataBufferFactory the factory to create data buffers with_@param bufferSize the maximum size of the data buffers_@return a flux of data buffers read from the given channel;public static Flux<DataBuffer> read(_			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {__		return read(resource, 0, dataBufferFactory, bufferSize)__	};read,the,given,code,resource,into,a,code,flux,of,code,data,buffer,s,p,if,the,resource,is,a,file,it,is,read,into,an,code,asynchronous,file,channel,and,turned,to,code,flux,via,link,read,asynchronous,file,channel,callable,data,buffer,factory,int,or,else,fall,back,to,link,read,byte,channel,callable,data,buffer,factory,int,closes,the,channel,when,the,flux,is,terminated,param,resource,the,resource,to,read,from,param,data,buffer,factory,the,factory,to,create,data,buffers,with,param,buffer,size,the,maximum,size,of,the,data,buffers,return,a,flux,of,data,buffers,read,from,the,given,channel;public,static,flux,data,buffer,read,resource,resource,data,buffer,factory,data,buffer,factory,int,buffer,size,return,read,resource,0,data,buffer,factory,buffer,size
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel);1544108037;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel);1544609813;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.0.10;public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,0,10;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher);1515749769;Composes the buffers in the given {@link Publisher} into a single data buffer. Depending on_the {@code DataBuffer} implementation, the returned buffer may be a single buffer containing_all data of the provided buffers, or it may be a true composite that contains references to_the buffers._@param publisher the data buffers that are to be composed_@return the composed data buffer;public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher) {_		Assert.notNull(publisher, "'publisher' must not be null")___		Flux<DataBuffer> source = Flux.from(publisher)___		return source.collectList()_				.filter(dataBuffers -> !dataBuffers.isEmpty())_				.map(dataBuffers -> {_					DataBufferFactory bufferFactory = dataBuffers.get(0).factory()__					return bufferFactory.compose(dataBuffers)__				})__	};composes,the,buffers,in,the,given,link,publisher,into,a,single,data,buffer,depending,on,the,code,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,publisher,the,data,buffers,that,are,to,be,composed,return,the,composed,data,buffer;public,static,mono,data,buffer,compose,publisher,data,buffer,publisher,assert,not,null,publisher,publisher,must,not,be,null,flux,data,buffer,source,flux,from,publisher,return,source,collect,list,filter,data,buffers,data,buffers,is,empty,map,data,buffers,data,buffer,factory,buffer,factory,data,buffers,get,0,factory,return,buffer,factory,compose,data,buffers
DataBufferUtils -> public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher);1515749769;Composes the buffers in the given {@link Publisher} into a single data buffer. Depending on_the {@code DataBuffer} implementation, the returned buffer may be a single buffer containing_all data of the provided buffers, or it may be a true composite that contains references to_the buffers._@param publisher the data buffers that are to be composed_@return the composed data buffer;public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher) {_		Assert.notNull(publisher, "'publisher' must not be null")___		Flux<DataBuffer> source = Flux.from(publisher)___		return source.collectList()_				.filter(dataBuffers -> !dataBuffers.isEmpty())_				.map(dataBuffers -> {_					DataBufferFactory bufferFactory = dataBuffers.get(0).factory()__					return bufferFactory.compose(dataBuffers)__				})__	};composes,the,buffers,in,the,given,link,publisher,into,a,single,data,buffer,depending,on,the,code,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,publisher,the,data,buffers,that,are,to,be,composed,return,the,composed,data,buffer;public,static,mono,data,buffer,compose,publisher,data,buffer,publisher,assert,not,null,publisher,publisher,must,not,be,null,flux,data,buffer,source,flux,from,publisher,return,source,collect,list,filter,data,buffers,data,buffers,is,empty,map,data,buffers,data,buffer,factory,buffer,factory,data,buffers,get,0,factory,return,buffer,factory,compose,data,buffers
DataBufferUtils -> public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher);1516379894;Composes the buffers in the given {@link Publisher} into a single data buffer. Depending on_the {@code DataBuffer} implementation, the returned buffer may be a single buffer containing_all data of the provided buffers, or it may be a true composite that contains references to_the buffers._@param publisher the data buffers that are to be composed_@return the composed data buffer;public static Mono<DataBuffer> compose(Publisher<DataBuffer> publisher) {_		Assert.notNull(publisher, "'publisher' must not be null")___		Flux<DataBuffer> source = Flux.from(publisher)___		return source.collectList()_				.filter(dataBuffers -> !dataBuffers.isEmpty())_				.map(dataBuffers -> {_					DataBufferFactory bufferFactory = dataBuffers.get(0).factory()__					return bufferFactory.compose(dataBuffers)__				})__	};composes,the,buffers,in,the,given,link,publisher,into,a,single,data,buffer,depending,on,the,code,data,buffer,implementation,the,returned,buffer,may,be,a,single,buffer,containing,all,data,of,the,provided,buffers,or,it,may,be,a,true,composite,that,contains,references,to,the,buffers,param,publisher,the,data,buffers,that,are,to,be,composed,return,the,composed,data,buffer;public,static,mono,data,buffer,compose,publisher,data,buffer,publisher,assert,not,null,publisher,publisher,must,not,be,null,flux,data,buffer,source,flux,from,publisher,return,source,collect,list,filter,data,buffers,data,buffers,is,empty,map,data,buffers,data,buffer,factory,buffer,factory,data,buffers,get,0,factory,return,buffer,factory,compose,data,buffers
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1536665804;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1537356285;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1539944178;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1540305708;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1540391301;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
DataBufferUtils -> public static Flux<DataBuffer> write( 			Publisher<DataBuffer> source, AsynchronousFileChannel channel);1540574693;Write the given stream of {@link DataBuffer DataBuffers} to the given {@code AsynchronousFileChannel}._Does <strong>not</strong> close the channel when the flux is terminated, and does_<strong>not</strong> {@linkplain #release(DataBuffer) release} the data buffers in the_source. If releasing is required, then subscribe to the returned {@code Flux} with a_{@link #releaseConsumer()}._<p>Note that the writing process does not start until the returned {@code Flux} is subscribed to._@param source the stream of data buffers to be written_@param channel the channel to write to_@return a flux containing the same buffers as in {@code source}, that starts the writing_process when subscribed to, and that publishes any writing errors and the completion signal_@since 5.1;public static Flux<DataBuffer> write(_			Publisher<DataBuffer> source, AsynchronousFileChannel channel) {_		return write(source, channel, 0)__	};write,the,given,stream,of,link,data,buffer,data,buffers,to,the,given,code,asynchronous,file,channel,does,strong,not,strong,close,the,channel,when,the,flux,is,terminated,and,does,strong,not,strong,linkplain,release,data,buffer,release,the,data,buffers,in,the,source,if,releasing,is,required,then,subscribe,to,the,returned,code,flux,with,a,link,release,consumer,p,note,that,the,writing,process,does,not,start,until,the,returned,code,flux,is,subscribed,to,param,source,the,stream,of,data,buffers,to,be,written,param,channel,the,channel,to,write,to,return,a,flux,containing,the,same,buffers,as,in,code,source,that,starts,the,writing,process,when,subscribed,to,and,that,publishes,any,writing,errors,and,the,completion,signal,since,5,1;public,static,flux,data,buffer,write,publisher,data,buffer,source,asynchronous,file,channel,channel,return,write,source,channel,0
