commented;modifiers;parameterAmount;loc;comment;code
true;public;0;20;/**  * Get the shared singleton instance for this supplier.  * @return the singleton instance (or {@code null} if none)  */ ;/**  * Get the shared singleton instance for this supplier.  * @return the singleton instance (or {@code null} if none)  */ @Override @Nullable public T get() {     T instance = this.singletonInstance.     if (instance == null) {         synchronized (this) {             instance = this.singletonInstance.             if (instance == null) {                 if (this.instanceSupplier != null) {                     instance = this.instanceSupplier.get().                 }                 if (instance == null && this.defaultSupplier != null) {                     instance = this.defaultSupplier.get().                 }                 this.singletonInstance = instance.             }         }     }     return instance. }
true;public;0;5;/**  * Obtain the shared singleton instance for this supplier.  * @return the singleton instance (never {@code null})  * @throws IllegalStateException in case of no instance  */ ;/**  * Obtain the shared singleton instance for this supplier.  * @return the singleton instance (never {@code null})  * @throws IllegalStateException in case of no instance  */ public T obtain() {     T instance = get().     Assert.state(instance != null, "No instance from Supplier").     return instance. }
true;public,static;1;3;/**  * Build a {@code SingletonSupplier} with the given singleton instance.  * @param instance the singleton instance (never {@code null})  * @return the singleton supplier (never {@code null})  */ ;/**  * Build a {@code SingletonSupplier} with the given singleton instance.  * @param instance the singleton instance (never {@code null})  * @return the singleton supplier (never {@code null})  */ public static <T> SingletonSupplier<T> of(T instance) {     return new SingletonSupplier<>(instance). }
true;public,static;1;4;/**  * Build a {@code SingletonSupplier} with the given singleton instance.  * @param instance the singleton instance (potentially {@code null})  * @return the singleton supplier, or {@code null} if the instance was {@code null}  */ ;/**  * Build a {@code SingletonSupplier} with the given singleton instance.  * @param instance the singleton instance (potentially {@code null})  * @return the singleton supplier, or {@code null} if the instance was {@code null}  */ @Nullable public static <T> SingletonSupplier<T> ofNullable(@Nullable T instance) {     return (instance != null ? new SingletonSupplier<>(instance) : null). }
true;public,static;1;3;/**  * Build a {@code SingletonSupplier} with the given supplier.  * @param supplier the instance supplier (never {@code null})  * @return the singleton supplier (never {@code null})  */ ;/**  * Build a {@code SingletonSupplier} with the given supplier.  * @param supplier the instance supplier (never {@code null})  * @return the singleton supplier (never {@code null})  */ public static <T> SingletonSupplier<T> of(Supplier<T> supplier) {     return new SingletonSupplier<>(supplier). }
true;public,static;1;4;/**  * Build a {@code SingletonSupplier} with the given supplier.  * @param supplier the instance supplier (potentially {@code null})  * @return the singleton supplier, or {@code null} if the instance supplier was {@code null}  */ ;/**  * Build a {@code SingletonSupplier} with the given supplier.  * @param supplier the instance supplier (potentially {@code null})  * @return the singleton supplier, or {@code null} if the instance supplier was {@code null}  */ @Nullable public static <T> SingletonSupplier<T> ofNullable(@Nullable Supplier<T> supplier) {     return (supplier != null ? new SingletonSupplier<>(supplier) : null). }
