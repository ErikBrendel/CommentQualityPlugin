commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void add(int index, E element) {     this.backingList.add(index, element). }
false;public;1;4;;@Override public boolean add(E o) {     return this.backingList.add(o). }
false;public;1;4;;@Override public boolean addAll(Collection<? extends E> c) {     return this.backingList.addAll(c). }
false;public;2;4;;@Override public boolean addAll(int index, Collection<? extends E> c) {     return this.backingList.addAll(index, c). }
false;public;0;4;;@Override public void clear() {     this.backingList.clear(). }
false;public;1;4;;@Override public boolean contains(Object o) {     return this.backingList.contains(o). }
false;public;1;4;;@Override public boolean containsAll(Collection<?> c) {     return this.backingList.containsAll(c). }
true;public;1;20;/**  * Get the element at the supplied index, creating it if there is  * no element at that index.  */ ;/**  * Get the element at the supplied index, creating it if there is  * no element at that index.  */ @Override public E get(int index) {     int backingListSize = this.backingList.size().     E element = null.     if (index < backingListSize) {         element = this.backingList.get(index).         if (element == null) {             element = this.elementFactory.createElement(index).             this.backingList.set(index, element).         }     } else {         for (int x = backingListSize. x < index. x++) {             this.backingList.add(null).         }         element = this.elementFactory.createElement(index).         this.backingList.add(element).     }     return element. }
false;public;1;4;;@Override public int indexOf(Object o) {     return this.backingList.indexOf(o). }
false;public;0;4;;@Override public boolean isEmpty() {     return this.backingList.isEmpty(). }
false;public;0;4;;@Override public Iterator<E> iterator() {     return this.backingList.iterator(). }
false;public;1;4;;@Override public int lastIndexOf(Object o) {     return this.backingList.lastIndexOf(o). }
false;public;0;4;;@Override public ListIterator<E> listIterator() {     return this.backingList.listIterator(). }
false;public;1;4;;@Override public ListIterator<E> listIterator(int index) {     return this.backingList.listIterator(index). }
false;public;1;4;;@Override public E remove(int index) {     return this.backingList.remove(index). }
false;public;1;4;;@Override public boolean remove(Object o) {     return this.backingList.remove(o). }
false;public;1;4;;@Override public boolean removeAll(Collection<?> c) {     return this.backingList.removeAll(c). }
false;public;1;4;;@Override public boolean retainAll(Collection<?> c) {     return this.backingList.retainAll(c). }
false;public;2;4;;@Override public E set(int index, E element) {     return this.backingList.set(index, element). }
false;public;0;4;;@Override public int size() {     return this.backingList.size(). }
false;public;2;4;;@Override public List<E> subList(int fromIndex, int toIndex) {     return this.backingList.subList(fromIndex, toIndex). }
false;public;0;4;;@Override public Object[] toArray() {     return this.backingList.toArray(). }
false;public;1;4;;@Override public <T> T[] toArray(T[] a) {     return this.backingList.toArray(a). }
false;public;1;4;;@Override public boolean equals(Object other) {     return this.backingList.equals(other). }
false;public;0;4;;@Override public int hashCode() {     return this.backingList.hashCode(). }
true;;1;1;/**  * Create the element for the supplied index.  * @return the element object  * @throws ElementInstantiationException if the instantiation process failed  * (any exception thrown by a target constructor should be propagated as-is)  */ ;/**  * Create the element for the supplied index.  * @return the element object  * @throws ElementInstantiationException if the instantiation process failed  * (any exception thrown by a target constructor should be propagated as-is)  */ E createElement(int index) throws ElementInstantiationException.
false;public;1;22;;@Override public E createElement(int index) {     try {         return ReflectionUtils.accessibleConstructor(this.elementClass).newInstance().     } catch (NoSuchMethodException ex) {         throw new ElementInstantiationException("No default constructor on element class: " + this.elementClass.getName(), ex).     } catch (InstantiationException ex) {         throw new ElementInstantiationException("Unable to instantiate element class: " + this.elementClass.getName(), ex).     } catch (IllegalAccessException ex) {         throw new ElementInstantiationException("Could not access element constructor: " + this.elementClass.getName(), ex).     } catch (InvocationTargetException ex) {         throw new ElementInstantiationException("Failed to invoke element constructor: " + this.elementClass.getName(), ex.getTargetException()).     } }
