commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Append a byte field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a byte field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, byte value) {     return append(fieldName, Byte.valueOf(value)). }
true;public;2;3;/**  * Append a short field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a short field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, short value) {     return append(fieldName, Short.valueOf(value)). }
true;public;2;3;/**  * Append a integer field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a integer field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, int value) {     return append(fieldName, Integer.valueOf(value)). }
true;public;2;3;/**  * Append a long field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a long field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, long value) {     return append(fieldName, Long.valueOf(value)). }
true;public;2;3;/**  * Append a float field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a float field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, float value) {     return append(fieldName, Float.valueOf(value)). }
true;public;2;3;/**  * Append a double field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a double field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, double value) {     return append(fieldName, Double.valueOf(value)). }
true;public;2;3;/**  * Append a boolean field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a boolean field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, boolean value) {     return append(fieldName, Boolean.valueOf(value)). }
true;public;2;5;/**  * Append a field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ ;/**  * Append a field value.  * @param fieldName the name of the field, usually the member variable name  * @param value the field value  * @return this, to support call-chaining  */ public ToStringCreator append(String fieldName, @Nullable Object value) {     printFieldSeparatorIfNecessary().     this.styler.styleField(this.buffer, fieldName, value).     return this. }
false;private;0;8;;private void printFieldSeparatorIfNecessary() {     if (this.styledFirstField) {         this.styler.styleFieldSeparator(this.buffer).     } else {         this.styledFirstField = true.     } }
true;public;1;4;/**  * Append the provided value.  * @param value the value to append  * @return this, to support call-chaining.  */ ;/**  * Append the provided value.  * @param value the value to append  * @return this, to support call-chaining.  */ public ToStringCreator append(Object value) {     this.styler.styleValue(this.buffer, value).     return this. }
true;public;0;5;/**  * Return the String representation that this ToStringCreator built.  */ ;/**  * Return the String representation that this ToStringCreator built.  */ @Override public String toString() {     this.styler.styleEnd(this.buffer, this.object).     return this.buffer.toString(). }
