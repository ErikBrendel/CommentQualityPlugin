# id;timestamp;commentText;codeText;commentWords;codeWords
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, 		ConversionService conversionService, Class<? extends T> targetType);1346940376;Create a new {@link ComparableComparator} instance.__@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(Comparator<T> comparator,_		ConversionService conversionService, Class<? extends T> targetType) {_		this(comparator, new ConversionServiceConverter<S, T>(_				conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, 		ConversionService conversionService, Class<? extends T> targetType);1355313310;Create a new {@link ComparableComparator} instance.__@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(Comparator<T> comparator,_		ConversionService conversionService, Class<? extends T> targetType) {_		this(comparator, new ConversionServiceConverter<S, T>(_				conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, 		ConversionService conversionService, Class<? extends T> targetType);1356735495;Create a new {@link ComparableComparator} instance.__@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(Comparator<T> comparator,_		ConversionService conversionService, Class<? extends T> targetType) {_		this(comparator, new ConversionServiceConverter<S, T>(_				conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, 		ConversionService conversionService, Class<? extends T> targetType);1357119239;Create a new {@link ComparableComparator} instance.__@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(Comparator<T> comparator,_		ConversionService conversionService, Class<? extends T> targetType) {_		this(comparator, new ConversionServiceConverter<S, T>(_				conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, 		ConversionService conversionService, Class<? extends T> targetType);1368482696;Create a new {@link ComparableComparator} instance.__@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(Comparator<T> comparator,_		ConversionService conversionService, Class<? extends T> targetType) {_		this(comparator, new ConversionServiceConverter<S, T>(_				conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1427240641;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {_			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1467730834;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, K>() {_			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1484857261;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, K>() {_			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1487178332;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, K>() {_			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1497341397;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, source -> source.getKey())__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,source,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1502974979;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, source -> source.getKey())__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,source,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator);1518260986;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}._@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {_		return new ConvertingComparator<>(comparator, Map.Entry::getKey)__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,comparator,map,entry,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues( 			Comparator<V> comparator);1346940376;Create a new {@link ConvertingComparator} that compares {@link Map.Entry map_entries} based on their {@link Map.Entry#getValue() values}.__@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(_			Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {__			public V convert(Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,map,entry,map,entries,based,on,their,link,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,public,v,convert,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues( 			Comparator<V> comparator);1355313310;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}.__@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(_			Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {__			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues( 			Comparator<V> comparator);1356735495;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}.__@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(_			Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {__			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues( 			Comparator<V> comparator);1357119239;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}.__@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(_			Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {__			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues( 			Comparator<V> comparator);1368482696;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}.__@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(_			Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {__			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys( 			Comparator<K> comparator);1346940376;Create a new {@link ConvertingComparator} that compares {@link Map.Entry map_entries} based on their {@link Map.Entry#getKey() keys}.__@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(_			Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {__			public K convert(Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,map,entry,map,entries,based,on,their,link,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,public,k,convert,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys( 			Comparator<K> comparator);1355313310;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.__@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(_			Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {__			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys( 			Comparator<K> comparator);1356735495;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.__@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(_			Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {__			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys( 			Comparator<K> comparator);1357119239;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.__@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(_			Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {__			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys( 			Comparator<K> comparator);1368482696;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.__@param comparator the underlying comparator used to compare keys_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(_			Comparator<K> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, K>(comparator, new Converter<Map.Entry<K, V>, K>() {__			@Override_			public K convert(Map.Entry<K, V> source) {_				return source.getKey()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,key,keys,param,comparator,the,underlying,comparator,used,to,compare,keys,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,k,map,entry,keys,comparator,k,comparator,return,new,converting,comparator,map,entry,k,v,k,comparator,new,converter,map,entry,k,v,k,override,public,k,convert,map,entry,k,v,source,return,source,get,key
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1346940376;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1355313310;Create a new {@link ConvertingComparator} instance.__@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1356735495;Create a new {@link ConvertingComparator} instance.__@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1357119239;Create a new {@link ConvertingComparator} instance.__@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1368482696;Create a new {@link ConvertingComparator} instance.__@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1427240641;Create a new {@link ConvertingComparator} instance._@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1467730834;Create a new {@link ConvertingComparator} instance._@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> @SuppressWarnings("unchecked") 	public ConvertingComparator(Converter<S, T> converter);1484857261;Create a new {@link ConvertingComparator} instance._@param converter the converter;@SuppressWarnings("unchecked")_	public ConvertingComparator(Converter<S, T> converter) {_		this(ComparableComparator.INSTANCE, converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;suppress,warnings,unchecked,public,converting,comparator,converter,s,t,converter,this,comparable,comparator,instance,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1346940376;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1355313310;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1356735495;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1357119239;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1368482696;Create a new {@link ConvertingComparator} instance.__@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1427240641;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1467730834;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1484857261;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1487178332;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1497341397;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1502974979;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter);1518260986;Create a new {@link ConvertingComparator} instance._@param comparator the underlying comparator used to compare the converted values_@param converter the converter;public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {_		Assert.notNull(comparator, "Comparator must not be null")__		Assert.notNull(converter, "Converter must not be null")__		this.comparator = comparator__		this.converter = converter__	};create,a,new,link,converting,comparator,instance,param,comparator,the,underlying,comparator,used,to,compare,the,converted,values,param,converter,the,converter;public,converting,comparator,comparator,t,comparator,converter,s,t,converter,assert,not,null,comparator,comparator,must,not,be,null,assert,not,null,converter,converter,must,not,be,null,this,comparator,comparator,this,converter,converter
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1427240641;Create a new {@link ComparableComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<S, T>(conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,s,t,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1467730834;Create a new {@link ComparableComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1484857261;Create a new {@link ComparableComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,link,comparable,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1487178332;Create a new {@code ConvertingComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,code,converting,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1497341397;Create a new {@code ConvertingComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,code,converting,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1502974979;Create a new {@code ConvertingComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,code,converting,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public ConvertingComparator( 			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType);1518260986;Create a new {@code ConvertingComparator} instance._@param comparator the underlying comparator_@param conversionService the conversion service_@param targetType the target type;public ConvertingComparator(_			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {__		this(comparator, new ConversionServiceConverter<>(conversionService, targetType))__	};create,a,new,code,converting,comparator,instance,param,comparator,the,underlying,comparator,param,conversion,service,the,conversion,service,param,target,type,the,target,type;public,converting,comparator,comparator,t,comparator,conversion,service,conversion,service,class,extends,t,target,type,this,comparator,new,conversion,service,converter,conversion,service,target,type
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1427240641;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<Map.Entry<K,V>, V>(comparator, new Converter<Map.Entry<K, V>, V>() {_			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,map,entry,k,v,v,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1467730834;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, V>() {_			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1484857261;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, V>() {_			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1487178332;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, new Converter<Map.Entry<K, V>, V>() {_			@Override_			public V convert(Map.Entry<K, V> source) {_				return source.getValue()__			}_		})__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,new,converter,map,entry,k,v,v,override,public,v,convert,map,entry,k,v,source,return,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1497341397;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, source -> source.getValue())__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,source,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1502974979;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, source -> source.getValue())__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,source,source,get,value
ConvertingComparator -> public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator);1518260986;Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry_map entries} based on their {@link java.util.Map.Entry#getValue() values}._@param comparator the underlying comparator used to compare values_@return a new {@link ConvertingComparator} instance;public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {_		return new ConvertingComparator<>(comparator, Map.Entry::getValue)__	};create,a,new,link,converting,comparator,that,compares,link,java,util,map,entry,map,entries,based,on,their,link,java,util,map,entry,get,value,values,param,comparator,the,underlying,comparator,used,to,compare,values,return,a,new,link,converting,comparator,instance;public,static,k,v,converting,comparator,map,entry,k,v,v,map,entry,values,comparator,v,comparator,return,new,converting,comparator,comparator,map,entry,get,value
ConvertingComparator -> public ConvertingComparator(Converter<S, T> converter);1487178332;Create a new {@link ConvertingComparator} instance._@param converter the converter;public ConvertingComparator(Converter<S, T> converter) {_		this(Comparators.comparable(), converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;public,converting,comparator,converter,s,t,converter,this,comparators,comparable,converter
ConvertingComparator -> public ConvertingComparator(Converter<S, T> converter);1497341397;Create a new {@link ConvertingComparator} instance._@param converter the converter;public ConvertingComparator(Converter<S, T> converter) {_		this(Comparators.comparable(), converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;public,converting,comparator,converter,s,t,converter,this,comparators,comparable,converter
ConvertingComparator -> public ConvertingComparator(Converter<S, T> converter);1502974979;Create a new {@link ConvertingComparator} instance._@param converter the converter;public ConvertingComparator(Converter<S, T> converter) {_		this(Comparators.comparable(), converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;public,converting,comparator,converter,s,t,converter,this,comparators,comparable,converter
ConvertingComparator -> public ConvertingComparator(Converter<S, T> converter);1518260986;Create a new {@link ConvertingComparator} instance._@param converter the converter;public ConvertingComparator(Converter<S, T> converter) {_		this(Comparators.comparable(), converter)__	};create,a,new,link,converting,comparator,instance,param,converter,the,converter;public,converting,comparator,converter,s,t,converter,this,comparators,comparable,converter
