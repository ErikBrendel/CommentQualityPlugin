commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public int compare(S o1, S o2) {     T c1 = this.converter.convert(o1).     T c2 = this.converter.convert(o2).     return this.comparator.compare(c1, c2). }
true;public,static;1;3;/**  * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry  * map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.  * @param comparator the underlying comparator used to compare keys  * @return a new {@link ConvertingComparator} instance  */ ;/**  * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry  * map * entries} based on their {@link java.util.Map.Entry#getKey() keys}.  * @param comparator the underlying comparator used to compare keys  * @return a new {@link ConvertingComparator} instance  */ public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {     return new ConvertingComparator<>(comparator, Map.Entry::getKey). }
true;public,static;1;3;/**  * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry  * map entries} based on their {@link java.util.Map.Entry#getValue() values}.  * @param comparator the underlying comparator used to compare values  * @return a new {@link ConvertingComparator} instance  */ ;/**  * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry  * map entries} based on their {@link java.util.Map.Entry#getValue() values}.  * @param comparator the underlying comparator used to compare values  * @return a new {@link ConvertingComparator} instance  */ public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {     return new ConvertingComparator<>(comparator, Map.Entry::getValue). }
false;public;1;5;;@Override @Nullable public T convert(S source) {     return this.conversionService.convert(source, this.targetType). }
