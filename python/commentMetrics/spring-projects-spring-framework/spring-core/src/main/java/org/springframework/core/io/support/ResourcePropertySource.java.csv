commented;modifiers;parameterAmount;loc;comment;code
true;public;1;18;/**  * Return a potentially adapted variant of this {@link ResourcePropertySource},  * overriding the previously given (or derived) name with the specified name.  * @since 4.0.4  */ ;/**  * Return a potentially adapted variant of this {@link ResourcePropertySource},  * overriding the previously given (or derived) name with the specified name.  * @since 4.0.4  */ public ResourcePropertySource withName(String name) {     if (this.name.equals(name)) {         return this.     }     // Store the original resource name if necessary...     if (this.resourceName != null) {         if (this.resourceName.equals(name)) {             return new ResourcePropertySource(this.resourceName, null, this.source).         } else {             return new ResourcePropertySource(name, this.resourceName, this.source).         }     } else {         // Current name is resource name -> preserve it in the extra field...         return new ResourcePropertySource(name, this.name, this.source).     } }
true;public;0;6;/**  * Return a potentially adapted variant of this {@link ResourcePropertySource},  * overriding the previously given name (if any) with the original resource name  * (equivalent to the name generated by the name-less constructor variants).  * @since 4.1  */ ;/**  * Return a potentially adapted variant of this {@link ResourcePropertySource},  * overriding the previously given name (if any) with the original resource name  * (equivalent to the name generated by the name-less constructor variants).  * @since 4.1  */ public ResourcePropertySource withResourceName() {     if (this.resourceName == null) {         return this.     }     return new ResourcePropertySource(this.resourceName, null, this.source). }
true;private,static;1;7;/**  * Return the description for the given Resource. if the description is  * empty, return the class name of the resource plus its identity hash code.  * @see org.springframework.core.io.Resource#getDescription()  */ ;/**  * Return the description for the given Resource. if the description is  * empty, return the class name of the resource plus its identity hash code.  * @see org.springframework.core.io.Resource#getDescription()  */ private static String getNameForResource(Resource resource) {     String name = resource.getDescription().     if (!StringUtils.hasText(name)) {         name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource).     }     return name. }
