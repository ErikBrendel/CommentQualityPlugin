# id;timestamp;commentText;codeText;commentWords;codeWords
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1362408075;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		this(getNameForResource(resource.getResource()), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,this,get,name,for,resource,resource,get,resource,resource
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1398720297;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		this(getNameForResource(resource.getResource()), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,this,get,name,for,resource,resource,get,resource,resource
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1408681275;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		this(getNameForResource(resource.getResource()), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,this,get,name,for,resource,resource,get,resource,resource
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1408708479;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,super,get,name,for,resource,resource,get,resource,properties,loader,utils,load,properties,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1425069697;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,super,get,name,for,resource,resource,get,resource,properties,loader,utils,load,properties,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1496259743;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,super,get,name,for,resource,resource,get,resource,properties,loader,utils,load,properties,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1498780456;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,super,get,name,for,resource,resource,get,resource,properties,loader,utils,load,properties,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(EncodedResource resource) throws IOException;1530174524;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(EncodedResource resource) throws IOException {_		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,encoded,resource,resource,throws,ioexception,super,get,name,for,resource,resource,get,resource,properties,loader,utils,load,properties,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource withResourceName();1408708479;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given name (if any) with the original resource name_(equivalent to the name generated by the name-less constructor variants)._@since 4.1;public ResourcePropertySource withResourceName() {_		if (this.resourceName == null) {_			return this__		}_		return new ResourcePropertySource(this.resourceName, null, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,name,if,any,with,the,original,resource,name,equivalent,to,the,name,generated,by,the,name,less,constructor,variants,since,4,1;public,resource,property,source,with,resource,name,if,this,resource,name,null,return,this,return,new,resource,property,source,this,resource,name,null,this,source
ResourcePropertySource -> public ResourcePropertySource withResourceName();1425069697;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given name (if any) with the original resource name_(equivalent to the name generated by the name-less constructor variants)._@since 4.1;public ResourcePropertySource withResourceName() {_		if (this.resourceName == null) {_			return this__		}_		return new ResourcePropertySource(this.resourceName, null, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,name,if,any,with,the,original,resource,name,equivalent,to,the,name,generated,by,the,name,less,constructor,variants,since,4,1;public,resource,property,source,with,resource,name,if,this,resource,name,null,return,this,return,new,resource,property,source,this,resource,name,null,this,source
ResourcePropertySource -> public ResourcePropertySource withResourceName();1496259743;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given name (if any) with the original resource name_(equivalent to the name generated by the name-less constructor variants)._@since 4.1;public ResourcePropertySource withResourceName() {_		if (this.resourceName == null) {_			return this__		}_		return new ResourcePropertySource(this.resourceName, null, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,name,if,any,with,the,original,resource,name,equivalent,to,the,name,generated,by,the,name,less,constructor,variants,since,4,1;public,resource,property,source,with,resource,name,if,this,resource,name,null,return,this,return,new,resource,property,source,this,resource,name,null,this,source
ResourcePropertySource -> public ResourcePropertySource withResourceName();1498780456;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given name (if any) with the original resource name_(equivalent to the name generated by the name-less constructor variants)._@since 4.1;public ResourcePropertySource withResourceName() {_		if (this.resourceName == null) {_			return this__		}_		return new ResourcePropertySource(this.resourceName, null, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,name,if,any,with,the,original,resource,name,equivalent,to,the,name,generated,by,the,name,less,constructor,variants,since,4,1;public,resource,property,source,with,resource,name,if,this,resource,name,null,return,this,return,new,resource,property,source,this,resource,name,null,this,source
ResourcePropertySource -> public ResourcePropertySource withResourceName();1530174524;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given name (if any) with the original resource name_(equivalent to the name generated by the name-less constructor variants)._@since 4.1;public ResourcePropertySource withResourceName() {_		if (this.resourceName == null) {_			return this__		}_		return new ResourcePropertySource(this.resourceName, null, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,name,if,any,with,the,original,resource,name,equivalent,to,the,name,generated,by,the,name,less,constructor,variants,since,4,1;public,resource,property,source,with,resource,name,if,this,resource,name,null,return,this,return,new,resource,property,source,this,resource,name,null,this,source
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1328020251;Create a PropertySource having the given name based on Properties_loaded from the given resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, loadPropertiesForResource(resource))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,load,properties,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1362408075;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1398720297;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1408681275;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1408708479;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = getNameForResource(resource)__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,get,name,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1425069697;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = getNameForResource(resource)__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,get,name,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1496259743;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = getNameForResource(resource)__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,get,name,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1498780456;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = getNameForResource(resource)__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,get,name,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, Resource resource) throws IOException;1530174524;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, Resource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = getNameForResource(resource)__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,get,name,for,resource,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1362408075;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1398720297;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1408681275;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1408708479;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = getNameForResource(resource.getResource())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource,this,resource,name,get,name,for,resource,resource,get,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1425069697;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = getNameForResource(resource.getResource())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource,this,resource,name,get,name,for,resource,resource,get,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1496259743;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = getNameForResource(resource.getResource())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource,this,resource,name,get,name,for,resource,resource,get,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1498780456;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = getNameForResource(resource.getResource())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource,this,resource,name,get,name,for,resource,resource,get,resource
ResourcePropertySource -> public ResourcePropertySource(String name, EncodedResource resource) throws IOException;1530174524;Create a PropertySource having the given name based on Properties_loaded from the given encoded resource.;public ResourcePropertySource(String name, EncodedResource resource) throws IOException {_		super(name, PropertiesLoaderUtils.loadProperties(resource))__		this.resourceName = getNameForResource(resource.getResource())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,encoded,resource;public,resource,property,source,string,name,encoded,resource,resource,throws,ioexception,super,name,properties,loader,utils,load,properties,resource,this,resource,name,get,name,for,resource,resource,get,resource
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1328020251;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(getResourceForLocation(location, classLoader))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,get,resource,for,location,location,class,loader
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1362408075;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1398720297;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1408681275;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1408708479;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1425069697;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1496259743;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1498780456;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException;1530174524;Create a PropertySource based on Properties loaded from the given resource_location and use the given class loader to load the resource, assuming it is_prefixed with {@code classpath:}. The name of the PropertySource will be_generated based on the {@link Resource#getDescription() description} of the_resource.;public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {_		this(new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,and,use,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,class,loader,class,loader,throws,ioexception,this,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource withName(String name);1398720297;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name.;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		return new ResourcePropertySource(name, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,return,new,resource,property,source,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1408681275;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name.;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		return new ResourcePropertySource(name, this.source)__	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,return,new,resource,property,source,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1408708479;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name._@since 4.0.4;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		_		if (this.resourceName != null) {_			if (this.resourceName.equals(name)) {_				return new ResourcePropertySource(this.resourceName, null, this.source)__			}_			else {_				return new ResourcePropertySource(name, this.resourceName, this.source)__			}_		}_		else {_			_			return new ResourcePropertySource(name, this.name, this.source)__		}_	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name,since,4,0,4;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,if,this,resource,name,null,if,this,resource,name,equals,name,return,new,resource,property,source,this,resource,name,null,this,source,else,return,new,resource,property,source,name,this,resource,name,this,source,else,return,new,resource,property,source,name,this,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1425069697;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name._@since 4.0.4;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		_		if (this.resourceName != null) {_			if (this.resourceName.equals(name)) {_				return new ResourcePropertySource(this.resourceName, null, this.source)__			}_			else {_				return new ResourcePropertySource(name, this.resourceName, this.source)__			}_		}_		else {_			_			return new ResourcePropertySource(name, this.name, this.source)__		}_	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name,since,4,0,4;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,if,this,resource,name,null,if,this,resource,name,equals,name,return,new,resource,property,source,this,resource,name,null,this,source,else,return,new,resource,property,source,name,this,resource,name,this,source,else,return,new,resource,property,source,name,this,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1496259743;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name._@since 4.0.4;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		_		if (this.resourceName != null) {_			if (this.resourceName.equals(name)) {_				return new ResourcePropertySource(this.resourceName, null, this.source)__			}_			else {_				return new ResourcePropertySource(name, this.resourceName, this.source)__			}_		}_		else {_			_			return new ResourcePropertySource(name, this.name, this.source)__		}_	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name,since,4,0,4;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,if,this,resource,name,null,if,this,resource,name,equals,name,return,new,resource,property,source,this,resource,name,null,this,source,else,return,new,resource,property,source,name,this,resource,name,this,source,else,return,new,resource,property,source,name,this,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1498780456;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name._@since 4.0.4;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		_		if (this.resourceName != null) {_			if (this.resourceName.equals(name)) {_				return new ResourcePropertySource(this.resourceName, null, this.source)__			}_			else {_				return new ResourcePropertySource(name, this.resourceName, this.source)__			}_		}_		else {_			_			return new ResourcePropertySource(name, this.name, this.source)__		}_	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name,since,4,0,4;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,if,this,resource,name,null,if,this,resource,name,equals,name,return,new,resource,property,source,this,resource,name,null,this,source,else,return,new,resource,property,source,name,this,resource,name,this,source,else,return,new,resource,property,source,name,this,name,this,source
ResourcePropertySource -> public ResourcePropertySource withName(String name);1530174524;Return a potentially adapted variant of this {@link ResourcePropertySource},_overriding the previously given (or derived) name with the specified name._@since 4.0.4;public ResourcePropertySource withName(String name) {_		if (this.name.equals(name)) {_			return this__		}_		_		if (this.resourceName != null) {_			if (this.resourceName.equals(name)) {_				return new ResourcePropertySource(this.resourceName, null, this.source)__			}_			else {_				return new ResourcePropertySource(name, this.resourceName, this.source)__			}_		}_		else {_			_			return new ResourcePropertySource(name, this.name, this.source)__		}_	};return,a,potentially,adapted,variant,of,this,link,resource,property,source,overriding,the,previously,given,or,derived,name,with,the,specified,name,since,4,0,4;public,resource,property,source,with,name,string,name,if,this,name,equals,name,return,this,if,this,resource,name,null,if,this,resource,name,equals,name,return,new,resource,property,source,this,resource,name,null,this,source,else,return,new,resource,property,source,name,this,resource,name,this,source,else,return,new,resource,property,source,name,this,name,this,source
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1328020251;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		this(getNameForResource(resource), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,this,get,name,for,resource,resource,resource
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1362408075;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		this(getNameForResource(resource), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,this,get,name,for,resource,resource,resource
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1398720297;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		this(getNameForResource(resource), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,this,get,name,for,resource,resource,resource
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1408681275;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		this(getNameForResource(resource), resource)__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,this,get,name,for,resource,resource,resource
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1408708479;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,super,get,name,for,resource,resource,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1425069697;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,super,get,name,for,resource,resource,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1496259743;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,super,get,name,for,resource,resource,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1498780456;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,super,get,name,for,resource,resource,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(Resource resource) throws IOException;1530174524;Create a PropertySource based on Properties loaded from the given resource._The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the given resource.;public ResourcePropertySource(Resource resource) throws IOException {_		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))__		this.resourceName = null__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,given,resource;public,resource,property,source,resource,resource,throws,ioexception,super,get,name,for,resource,resource,properties,loader,utils,load,properties,new,encoded,resource,resource,this,resource,name,null
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1328020251;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(getResourceForLocation(location, ClassUtils.getDefaultClassLoader()))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,get,resource,for,location,location,class,utils,get,default,class,loader
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1362408075;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1398720297;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1408681275;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1408708479;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1425069697;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1496259743;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1498780456;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String location) throws IOException;1530174524;Create a PropertySource based on Properties loaded from the given resource_location. The name of the PropertySource will be generated based on the_{@link Resource#getDescription() description} of the resource.;public ResourcePropertySource(String location) throws IOException {_		this(new DefaultResourceLoader().getResource(location))__	};create,a,property,source,based,on,properties,loaded,from,the,given,resource,location,the,name,of,the,property,source,will,be,generated,based,on,the,link,resource,get,description,description,of,the,resource;public,resource,property,source,string,location,throws,ioexception,this,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1328020251;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, getResourceForLocation(location, classLoader))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,get,resource,for,location,location,class,loader
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1362408075;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1398720297;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1408681275;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1408708479;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1425069697;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1496259743;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1498780456;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException;1530174524;Create a PropertySource having the given name based on Properties loaded from_the given resource location and using the given class loader to load the_resource (assuming it is prefixed with {@code classpath:}).;public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {_		this(name, new DefaultResourceLoader(classLoader).getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,and,using,the,given,class,loader,to,load,the,resource,assuming,it,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,class,loader,class,loader,throws,ioexception,this,name,new,default,resource,loader,class,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1328020251;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, location, ClassUtils.getDefaultClassLoader())__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,location,class,utils,get,default,class,loader
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1362408075;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1398720297;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1408681275;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1408708479;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1425069697;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1496259743;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1498780456;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> public ResourcePropertySource(String name, String location) throws IOException;1530174524;Create a PropertySource having the given name based on Properties loaded from_the given resource location. The default thread context class loader will be_used to load the resource (assuming the location string is prefixed with_{@code classpath:}.;public ResourcePropertySource(String name, String location) throws IOException {_		this(name, new DefaultResourceLoader().getResource(location))__	};create,a,property,source,having,the,given,name,based,on,properties,loaded,from,the,given,resource,location,the,default,thread,context,class,loader,will,be,used,to,load,the,resource,assuming,the,location,string,is,prefixed,with,code,classpath;public,resource,property,source,string,name,string,location,throws,ioexception,this,name,new,default,resource,loader,get,resource,location
ResourcePropertySource -> private static String getNameForResource(Resource resource);1328020251;Returns the description string for the resource, and if empty returns_the class name of the resource plus its identity hash code.;private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};returns,the,description,string,for,the,resource,and,if,empty,returns,the,class,name,of,the,resource,plus,its,identity,hash,code;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1362408075;Return the description string for the resource, and if empty returns_the class name of the resource plus its identity hash code.;private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,string,for,the,resource,and,if,empty,returns,the,class,name,of,the,resource,plus,its,identity,hash,code;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1398720297;Return the description String for the given Resource_ it the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,string,for,the,given,resource,it,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1408708479;Return the description String for the given Resource_ it the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,string,for,the,given,resource,it,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1425069697;Return the description for the given Resource_ if the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,for,the,given,resource,if,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1496259743;Return the description for the given Resource_ if the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,for,the,given,resource,if,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1498780456;Return the description for the given Resource_ if the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,for,the,given,resource,if,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
ResourcePropertySource -> private static String getNameForResource(Resource resource);1530174524;Return the description for the given Resource_ if the description is_empty, return the class name of the resource plus its identity hash code._@see org.springframework.core.io.Resource#getDescription();private static String getNameForResource(Resource resource) {_		String name = resource.getDescription()__		if (!StringUtils.hasText(name)) {_			name = resource.getClass().getSimpleName() + "@" + System.identityHashCode(resource)__		}_		return name__	};return,the,description,for,the,given,resource,if,the,description,is,empty,return,the,class,name,of,the,resource,plus,its,identity,hash,code,see,org,springframework,core,io,resource,get,description;private,static,string,get,name,for,resource,resource,resource,string,name,resource,get,description,if,string,utils,has,text,name,name,resource,get,class,get,simple,name,system,identity,hash,code,resource,return,name
