commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void setAsText(String text) {     if (StringUtils.hasText(text)) {         String locationToUse = resolvePath(text).trim().         setValue(this.resourceLoader.getResource(locationToUse)).     } else {         setValue(null).     } }
true;protected;1;7;/**  * Resolve the given path, replacing placeholders with corresponding  * property values from the {@code environment} if necessary.  * @param path the original file path  * @return the resolved file path  * @see PropertyResolver#resolvePlaceholders  * @see PropertyResolver#resolveRequiredPlaceholders  */ ;/**  * Resolve the given path, replacing placeholders with corresponding  * property values from the {@code environment} if necessary.  * @param path the original file path  * @return the resolved file path  * @see PropertyResolver#resolvePlaceholders  * @see PropertyResolver#resolveRequiredPlaceholders  */ protected String resolvePath(String path) {     if (this.propertyResolver == null) {         this.propertyResolver = new StandardEnvironment().     }     return (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) : this.propertyResolver.resolveRequiredPlaceholders(path)). }
false;public;0;14;;@Override @Nullable public String getAsText() {     Resource value = (Resource) getValue().     try {         // Try to determine URL for resource.         return (value != null ? value.getURL().toExternalForm() : "").     } catch (IOException ex) {         // that there is no appropriate text representation.         return null.     } }
