# id;timestamp;commentText;codeText;commentWords;codeWords
NestedExceptionUtils -> public static String buildMessage(String message, Throwable cause);1328020251;Build a message for the given base message and root cause._@param message the base message_@param cause the root cause_@return the full exception message;public static String buildMessage(String message, Throwable cause) {_		if (cause != null) {_			StringBuilder sb = new StringBuilder()__			if (message != null) {_				sb.append(message).append("_ ")__			}_			sb.append("nested exception is ").append(cause)__			return sb.toString()__		}_		else {_			return message__		}_	};build,a,message,for,the,given,base,message,and,root,cause,param,message,the,base,message,param,cause,the,root,cause,return,the,full,exception,message;public,static,string,build,message,string,message,throwable,cause,if,cause,null,string,builder,sb,new,string,builder,if,message,null,sb,append,message,append,sb,append,nested,exception,is,append,cause,return,sb,to,string,else,return,message
NestedExceptionUtils -> public static String buildMessage(String message, Throwable cause);1493803888;Build a message for the given base message and root cause._@param message the base message_@param cause the root cause_@return the full exception message;public static String buildMessage(String message, Throwable cause) {_		if (cause == null) {_			return message__		}_		StringBuilder sb = new StringBuilder(64)__		if (message != null) {_			sb.append(message).append("_ ")__		}_		sb.append("nested exception is ").append(cause)__		return sb.toString()__	};build,a,message,for,the,given,base,message,and,root,cause,param,message,the,base,message,param,cause,the,root,cause,return,the,full,exception,message;public,static,string,build,message,string,message,throwable,cause,if,cause,null,return,message,string,builder,sb,new,string,builder,64,if,message,null,sb,append,message,append,sb,append,nested,exception,is,append,cause,return,sb,to,string
NestedExceptionUtils -> public static String buildMessage(String message, Throwable cause);1495868221;Build a message for the given base message and root cause._@param message the base message_@param cause the root cause_@return the full exception message;public static String buildMessage(String message, Throwable cause) {_		if (cause == null) {_			return message__		}_		StringBuilder sb = new StringBuilder(64)__		if (message != null) {_			sb.append(message).append("_ ")__		}_		sb.append("nested exception is ").append(cause)__		return sb.toString()__	};build,a,message,for,the,given,base,message,and,root,cause,param,message,the,base,message,param,cause,the,root,cause,return,the,full,exception,message;public,static,string,build,message,string,message,throwable,cause,if,cause,null,return,message,string,builder,sb,new,string,builder,64,if,message,null,sb,append,message,append,sb,append,nested,exception,is,append,cause,return,sb,to,string
NestedExceptionUtils -> public static Throwable getMostSpecificCause(Throwable original);1493803888;Retrieve the most specific cause of the given exception, that is,_either the innermost cause (root cause) or the exception itself._<p>Differs from {@link #getRootCause} in that it falls back_to the original exception if there is no root cause._@param original the original exception to introspect_@return the most specific cause (never {@code null})_@since 4.3.9;public static Throwable getMostSpecificCause(Throwable original) {_		Throwable rootCause = getRootCause(original)__		return (rootCause != null ? rootCause : original)__	};retrieve,the,most,specific,cause,of,the,given,exception,that,is,either,the,innermost,cause,root,cause,or,the,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,original,exception,if,there,is,no,root,cause,param,original,the,original,exception,to,introspect,return,the,most,specific,cause,never,code,null,since,4,3,9;public,static,throwable,get,most,specific,cause,throwable,original,throwable,root,cause,get,root,cause,original,return,root,cause,null,root,cause,original
NestedExceptionUtils -> public static Throwable getMostSpecificCause(Throwable original);1495868221;Retrieve the most specific cause of the given exception, that is,_either the innermost cause (root cause) or the exception itself._<p>Differs from {@link #getRootCause} in that it falls back_to the original exception if there is no root cause._@param original the original exception to introspect_@return the most specific cause (never {@code null})_@since 4.3.9;public static Throwable getMostSpecificCause(Throwable original) {_		Throwable rootCause = getRootCause(original)__		return (rootCause != null ? rootCause : original)__	};retrieve,the,most,specific,cause,of,the,given,exception,that,is,either,the,innermost,cause,root,cause,or,the,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,original,exception,if,there,is,no,root,cause,param,original,the,original,exception,to,introspect,return,the,most,specific,cause,never,code,null,since,4,3,9;public,static,throwable,get,most,specific,cause,throwable,original,throwable,root,cause,get,root,cause,original,return,root,cause,null,root,cause,original
NestedExceptionUtils -> public static Throwable getMostSpecificCause(Throwable original);1496837955;Retrieve the most specific cause of the given exception, that is,_either the innermost cause (root cause) or the exception itself._<p>Differs from {@link #getRootCause} in that it falls back_to the original exception if there is no root cause._@param original the original exception to introspect_@return the most specific cause (never {@code null})_@since 4.3.9;public static Throwable getMostSpecificCause(Throwable original) {_		Throwable rootCause = getRootCause(original)__		return (rootCause != null ? rootCause : original)__	};retrieve,the,most,specific,cause,of,the,given,exception,that,is,either,the,innermost,cause,root,cause,or,the,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,original,exception,if,there,is,no,root,cause,param,original,the,original,exception,to,introspect,return,the,most,specific,cause,never,code,null,since,4,3,9;public,static,throwable,get,most,specific,cause,throwable,original,throwable,root,cause,get,root,cause,original,return,root,cause,null,root,cause,original
