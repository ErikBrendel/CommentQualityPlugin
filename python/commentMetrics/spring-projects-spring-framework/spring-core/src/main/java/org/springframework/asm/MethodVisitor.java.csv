# id;timestamp;commentText;codeText;commentWords;codeWords
MethodVisitor -> public void visitAttribute(Attribute attr);1366718246;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitAttribute(Attribute attr);1367955086;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitAttribute(Attribute attr);1395273982;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitAttribute(Attribute attr);1397644526;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitAttribute(Attribute attr);1483093254;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitAttribute(Attribute attr);1505821772;Visits a non standard attribute of this method.__@param attr_an attribute.;public void visitAttribute(Attribute attr) {_        if (mv != null) {_            mv.visitAttribute(attr)__        }_    };visits,a,non,standard,attribute,of,this,method,param,attr,an,attribute;public,void,visit,attribute,attribute,attr,if,mv,null,mv,visit,attribute,attr
MethodVisitor -> public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions);1531241461;Visits a MULTIANEWARRAY instruction.__@param descriptor an array type descriptor (see {@link Type})._@param numDimensions the number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {_    if (mv != null) {_      mv.visitMultiANewArrayInsn(descriptor, numDimensions)__    }_  };visits,a,multianewarray,instruction,param,descriptor,an,array,type,descriptor,see,link,type,param,num,dimensions,the,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,final,string,descriptor,final,int,num,dimensions,if,mv,null,mv,visit,multi,anew,array,insn,descriptor,num,dimensions
MethodVisitor -> public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions);1533573221;Visits a MULTIANEWARRAY instruction.__@param descriptor an array type descriptor (see {@link Type})._@param numDimensions the number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {_    if (mv != null) {_      mv.visitMultiANewArrayInsn(descriptor, numDimensions)__    }_  };visits,a,multianewarray,instruction,param,descriptor,an,array,type,descriptor,see,link,type,param,num,dimensions,the,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,final,string,descriptor,final,int,num,dimensions,if,mv,null,mv,visit,multi,anew,array,insn,descriptor,num,dimensions
MethodVisitor -> public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions);1536664245;Visits a MULTIANEWARRAY instruction.__@param descriptor an array type descriptor (see {@link Type})._@param numDimensions the number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {_    if (mv != null) {_      mv.visitMultiANewArrayInsn(descriptor, numDimensions)__    }_  };visits,a,multianewarray,instruction,param,descriptor,an,array,type,descriptor,see,link,type,param,num,dimensions,the,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,final,string,descriptor,final,int,num,dimensions,if,mv,null,mv,visit,multi,anew,array,insn,descriptor,num,dimensions
MethodVisitor -> public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions);1537204147;Visits a MULTIANEWARRAY instruction.__@param descriptor an array type descriptor (see {@link Type})._@param numDimensions the number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) {_    if (mv != null) {_      mv.visitMultiANewArrayInsn(descriptor, numDimensions)__    }_  };visits,a,multianewarray,instruction,param,descriptor,an,array,type,descriptor,see,link,type,param,num,dimensions,the,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,final,string,descriptor,final,int,num,dimensions,if,mv,null,mv,visit,multi,anew,array,insn,descriptor,num,dimensions
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1366718246;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li></li>_</ul>_</ul> <br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,li,ul,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1367955086;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li></li>_</ul>_</ul> <br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,li,ul,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1395273982;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li>_</ul>_</li>_</ul>_<br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,ul,li,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1397644526;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li>_</ul>_</li>_</ul>_<br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,ul,li,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1483093254;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li>_</ul>_</li>_</ul>_<br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,ul,li,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(int type, int nLocal, Object[] local, int nStack,             Object[] stack);1505821772;Visits the current state of the local variables and operand stack_elements. This method must(*) be called <i>just before</i> any_instruction <b>i</b> that follows an unconditional branch instruction_such as GOTO or THROW, that is the target of a jump instruction, or that_starts an exception handler block. The visited types must describe the_values of the local variables and of the operand stack elements <i>just_before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or_equal to {@link Opcodes#V1_6 V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in_compressed form (all frames must use the same format, i.e. you must not_mix expanded and compressed frames within a single method):_<ul>_<li>In expanded form, all frames must have the F_NEW type.</li>_<li>In compressed form, frames are basically "deltas" from the state of_the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same_locals as the previous frame and with the empty stack.</li>_<li>{@link Opcodes#F_SAME1} representing frame with exactly the same_locals as the previous frame and with single value on the stack (_<code>nStack</code> is 1 and <code>stack[0]</code> contains value for the_type of the stack item).</li>_<li>{@link Opcodes#F_APPEND} representing frame with current locals are_the same as the locals in the previous frame, except that additional_locals are defined (<code>nLocal</code> is 1, 2 or 3 and_<code>local</code> elements contains values representing added types).</li>_<li>{@link Opcodes#F_CHOP} representing frame with current locals are the_same as the locals in the previous frame, except that the last 1-3 locals_are absent and with the empty stack (<code>nLocals</code> is 1, 2 or 3).</li>_<li>{@link Opcodes#F_FULL} representing complete frame data.</li>_</ul>_</li>_</ul>_<br>_In both cases the first frame, corresponding to the method's parameters_and access flags, is implicit and must not be visited. Also, it is_illegal to visit two or more frames for the same code location (i.e., at_least one instruction must be visited between two calls to visitFrame).__@param type_the type of this stack map frame. Must be_{@link Opcodes#F_NEW} for expanded frames, or_{@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND},_{@link Opcodes#F_CHOP}, {@link Opcodes#F_SAME} or_{@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for_compressed frames._@param nLocal_the number of local variables in the visited frame._@param local_the local variable types in this frame. This array must not be_modified. Primitive types are represented by_{@link Opcodes#TOP}, {@link Opcodes#INTEGER},_{@link Opcodes#FLOAT}, {@link Opcodes#LONG},_{@link Opcodes#DOUBLE},{@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are_represented by a single element). Reference types are_represented by String objects (representing internal names),_and uninitialized types by Label objects (this label_designates the NEW instruction that created this uninitialized_value)._@param nStack_the number of operand stack elements in the visited frame._@param stack_the operand stack types in this frame. This array must not be_modified. Its content has the same format as the "local"_array._@throws IllegalStateException_if a frame is visited just after another one, without any_instruction between the two (unless this frame is a_Opcodes#F_SAME frame, in which case it is silently ignored).;public void visitFrame(int type, int nLocal, Object[] local, int nStack,_            Object[] stack) {_        if (mv != null) {_            mv.visitFrame(type, nLocal, local, nStack, stack)__        }_    };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,li,link,opcodes,representing,complete,frame,data,li,ul,li,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,int,type,int,n,local,object,local,int,n,stack,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitInvokeDynamicInsn(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1531241461;Visits an invokedynamic instruction.__@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link_Type}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify_the content of the array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)__    }_  };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,invoke,dynamic,insn,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments
MethodVisitor -> public void visitInvokeDynamicInsn(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1533573221;Visits an invokedynamic instruction.__@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link_Type}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify_the content of the array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)__    }_  };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,invoke,dynamic,insn,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments
MethodVisitor -> public void visitInvokeDynamicInsn(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1536664245;Visits an invokedynamic instruction.__@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link_Type}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify_the content of the array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)__    }_  };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,invoke,dynamic,insn,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments
MethodVisitor -> public void visitInvokeDynamicInsn(       final String name,       final String descriptor,       final Handle bootstrapMethodHandle,       final Object... bootstrapMethodArguments);1537204147;Visits an invokedynamic instruction.__@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param bootstrapMethodHandle the bootstrap method._@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link_Type}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify_the content of the array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(_      final String name,_      final String descriptor,_      final Handle bootstrapMethodHandle,_      final Object... bootstrapMethodArguments) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments)__    }_  };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,bootstrap,method,handle,the,bootstrap,method,param,bootstrap,method,arguments,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,link,handle,or,link,constant,dynamic,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,final,string,name,final,string,descriptor,final,handle,bootstrap,method,handle,final,object,bootstrap,method,arguments,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,invoke,dynamic,insn,name,descriptor,bootstrap,method,handle,bootstrap,method,arguments
MethodVisitor -> public void visitMaxs(final int maxStack, final int maxLocals);1531241461;Visits the maximum stack size and the maximum number of local variables of the method.__@param maxStack maximum stack size of the method._@param maxLocals maximum number of local variables for the method.;public void visitMaxs(final int maxStack, final int maxLocals) {_    if (mv != null) {_      mv.visitMaxs(maxStack, maxLocals)__    }_  };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,final,int,max,stack,final,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(final int maxStack, final int maxLocals);1533573221;Visits the maximum stack size and the maximum number of local variables of the method.__@param maxStack maximum stack size of the method._@param maxLocals maximum number of local variables for the method.;public void visitMaxs(final int maxStack, final int maxLocals) {_    if (mv != null) {_      mv.visitMaxs(maxStack, maxLocals)__    }_  };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,final,int,max,stack,final,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(final int maxStack, final int maxLocals);1536664245;Visits the maximum stack size and the maximum number of local variables of the method.__@param maxStack maximum stack size of the method._@param maxLocals maximum number of local variables for the method.;public void visitMaxs(final int maxStack, final int maxLocals) {_    if (mv != null) {_      mv.visitMaxs(maxStack, maxLocals)__    }_  };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,final,int,max,stack,final,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(final int maxStack, final int maxLocals);1537204147;Visits the maximum stack size and the maximum number of local variables of the method.__@param maxStack maximum stack size of the method._@param maxLocals maximum number of local variables for the method.;public void visitMaxs(final int maxStack, final int maxLocals) {_    if (mv != null) {_      mv.visitMaxs(maxStack, maxLocals)__    }_  };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,final,int,max,stack,final,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1366718246;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1367955086;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1395273982;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1397644526;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1483093254;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitFieldInsn(int opcode, String owner, String name,             String desc);1505821772;Visits a field instruction. A field instruction is an instruction that_loads or stores the value of a field of an object.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner_the internal name of the field's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the field's name._@param desc_the field's descriptor (see {@link Type Type}).;public void visitFieldInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitFieldInsn(opcode, owner, name, desc)__        }_    };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,field,s,name,param,desc,the,field,s,descriptor,see,link,type,type;public,void,visit,field,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,field,insn,opcode,owner,name,desc
MethodVisitor -> public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels);1531241461;Visits a LOOKUPSWITCH instruction.__@param dflt beginning of the default handler block._@param keys the values of the keys._@param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the_handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {_    if (mv != null) {_      mv.visitLookupSwitchInsn(dflt, keys, labels)__    }_  };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,final,label,dflt,final,int,keys,final,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels);1533573221;Visits a LOOKUPSWITCH instruction.__@param dflt beginning of the default handler block._@param keys the values of the keys._@param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the_handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {_    if (mv != null) {_      mv.visitLookupSwitchInsn(dflt, keys, labels)__    }_  };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,final,label,dflt,final,int,keys,final,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels);1536664245;Visits a LOOKUPSWITCH instruction.__@param dflt beginning of the default handler block._@param keys the values of the keys._@param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the_handler block for the {@code keys[i]} key.;public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {_    if (mv != null) {_      mv.visitLookupSwitchInsn(dflt, keys, labels)__    }_  };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,code,labels,i,is,the,beginning,of,the,handler,block,for,the,code,keys,i,key;public,void,visit,lookup,switch,insn,final,label,dflt,final,int,keys,final,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels);1537204147;Visits a LOOKUPSWITCH instruction.__@param dflt beginning of the default handler block._@param keys the values of the keys._@param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the_handler block for the {@code keys[i]} key.;public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {_    if (mv != null) {_      mv.visitLookupSwitchInsn(dflt, keys, labels)__    }_  };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,code,labels,i,is,the,beginning,of,the,handler,block,for,the,code,keys,i,key;public,void,visit,lookup,switch,insn,final,label,dflt,final,int,keys,final,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public MethodVisitor(final int api);1366718246;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1367955086;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1395273982;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1397644526;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1483093254;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1505821772;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}.;public MethodVisitor(final int api) {_        this(api, null)__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1531241461;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}.;public MethodVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1533573221;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}.;public MethodVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1536664245;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.;public MethodVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public MethodVisitor(final int api);1537204147;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.;public MethodVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7;public,method,visitor,final,int,api,this,api,null
MethodVisitor -> public void visitIincInsn(int var, int increment);1366718246;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(int var, int increment);1367955086;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(int var, int increment);1395273982;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(int var, int increment);1397644526;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(int var, int increment);1483093254;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(int var, int increment);1505821772;Visits an IINC instruction.__@param var_index of the local variable to be incremented._@param increment_amount to increment the local variable by.;public void visitIincInsn(int var, int increment) {_        if (mv != null) {_            mv.visitIincInsn(var, increment)__        }_    };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,int,var,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1366718246;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api != Opcodes.ASM4) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1367955086;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api != Opcodes.ASM4) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1395273982;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1397644526;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1483093254;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4} or {@link Opcodes#ASM5}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api != Opcodes.ASM4 && api != Opcodes.ASM5) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,or,link,opcodes,asm5,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,api,opcodes,asm5,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor mv);1505821772;Constructs a new {@link MethodVisitor}.__@param api_the ASM API version implemented by this visitor. Must be one_of {@link Opcodes#ASM4}, {@link Opcodes#ASM5} or {@link Opcodes#ASM6}._@param mv_the method visitor to which this visitor must delegate method_calls. May be null.;public MethodVisitor(final int api, final MethodVisitor mv) {_        if (api < Opcodes.ASM4 || api > Opcodes.ASM6) {_            throw new IllegalArgumentException()__        }_        this.api = api__        this.mv = mv__    };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,or,link,opcodes,asm6,param,mv,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,mv,if,api,opcodes,asm4,api,opcodes,asm6,throw,new,illegal,argument,exception,this,api,api,this,mv,mv
MethodVisitor -> public void visitAttribute(final Attribute attribute);1531241461;Visits a non standard attribute of this method.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (mv != null) {_      mv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,this,method,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,mv,null,mv,visit,attribute,attribute
MethodVisitor -> public void visitAttribute(final Attribute attribute);1533573221;Visits a non standard attribute of this method.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (mv != null) {_      mv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,this,method,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,mv,null,mv,visit,attribute,attribute
MethodVisitor -> public void visitAttribute(final Attribute attribute);1536664245;Visits a non standard attribute of this method.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (mv != null) {_      mv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,this,method,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,mv,null,mv,visit,attribute,attribute
MethodVisitor -> public void visitAttribute(final Attribute attribute);1537204147;Visits a non standard attribute of this method.__@param attribute an attribute.;public void visitAttribute(final Attribute attribute) {_    if (mv != null) {_      mv.visitAttribute(attribute)__    }_  };visits,a,non,standard,attribute,of,this,method,param,attribute,an,attribute;public,void,visit,attribute,final,attribute,attribute,if,mv,null,mv,visit,attribute,attribute
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1366718246;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1367955086;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1395273982;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1397644526;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1483093254;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(Label start, Label end, Label handler,             String type);1505821772;Visits a try catch block.__@param start_beginning of the exception handler's scope (inclusive)._@param end_end of the exception handler's scope (exclusive)._@param handler_beginning of the exception handler's code._@param type_internal name of the type of exceptions handled by the_handler, or <tt>null</tt> to catch any exceptions (for_"finally" blocks)._@throws IllegalArgumentException_if one of the labels has already been visited by this visitor_(by the {@link #visitLabel visitLabel} method).;public void visitTryCatchBlock(Label start, Label end, Label handler,_            String type) {_        if (mv != null) {_            mv.visitTryCatchBlock(start, end, handler, type)__        }_    };visits,a,try,catch,block,param,start,beginning,of,the,exception,handler,s,scope,inclusive,param,end,end,of,the,exception,handler,s,scope,exclusive,param,handler,beginning,of,the,exception,handler,s,code,param,type,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,try,catch,block,label,start,label,end,label,handler,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitCode();1366718246;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1367955086;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1395273982;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1397644526;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1483093254;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1505821772;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_        if (mv != null) {_            mv.visitCode()__        }_    };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1531241461;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_    if (mv != null) {_      mv.visitCode()__    }_  };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1533573221;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_    if (mv != null) {_      mv.visitCode()__    }_  };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1536664245;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_    if (mv != null) {_      mv.visitCode()__    }_  };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitCode();1537204147;Starts the visit of the method's code, if any (i.e. non abstract method).;public void visitCode() {_    if (mv != null) {_      mv.visitCode()__    }_  };starts,the,visit,of,the,method,s,code,if,any,i,e,non,abstract,method;public,void,visit,code,if,mv,null,mv,visit,code
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc, boolean itf);1395273982;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param itf_if the method's owner class is an interface.;public void visitMethodInsn(int opcode, String owner, String name,_            String desc, boolean itf) {_        if (api < Opcodes.ASM5) {_            if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {_                throw new IllegalArgumentException(_                        "INVOKESPECIAL/STATIC on interfaces require ASM 5")__            }_            visitMethodInsn(opcode, owner, name, desc)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc, itf)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,itf,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,boolean,itf,if,api,opcodes,asm5,if,itf,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,require,asm,5,visit,method,insn,opcode,owner,name,desc,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc,itf
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc, boolean itf);1397644526;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param itf_if the method's owner class is an interface.;public void visitMethodInsn(int opcode, String owner, String name,_            String desc, boolean itf) {_        if (api < Opcodes.ASM5) {_            if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {_                throw new IllegalArgumentException(_                        "INVOKESPECIAL/STATIC on interfaces require ASM 5")__            }_            visitMethodInsn(opcode, owner, name, desc)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc, itf)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,itf,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,boolean,itf,if,api,opcodes,asm5,if,itf,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,require,asm,5,visit,method,insn,opcode,owner,name,desc,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc,itf
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc, boolean itf);1483093254;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param itf_if the method's owner class is an interface.;public void visitMethodInsn(int opcode, String owner, String name,_            String desc, boolean itf) {_        if (api < Opcodes.ASM5) {_            if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {_                throw new IllegalArgumentException(_                        "INVOKESPECIAL/STATIC on interfaces require ASM 5")__            }_            visitMethodInsn(opcode, owner, name, desc)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc, itf)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,itf,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,boolean,itf,if,api,opcodes,asm5,if,itf,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,require,asm,5,visit,method,insn,opcode,owner,name,desc,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc,itf
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc, boolean itf);1505821772;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param itf_if the method's owner class is an interface.;public void visitMethodInsn(int opcode, String owner, String name,_            String desc, boolean itf) {_        if (api < Opcodes.ASM5) {_            if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {_                throw new IllegalArgumentException(_                        "INVOKESPECIAL/STATIC on interfaces require ASM 5")__            }_            visitMethodInsn(opcode, owner, name, desc)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc, itf)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,itf,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,boolean,itf,if,api,opcodes,asm5,if,itf,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,require,asm,5,visit,method,insn,opcode,owner,name,desc,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc,itf
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1366718246;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1367955086;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1395273982;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1397644526;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1483093254;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1505821772;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this_annotation interface method, or <tt>null</tt> if this visitor is_not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are_ignored. Moreover, exacly one visit method must be called on this_annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_        if (mv != null) {_            return mv.visitAnnotationDefault()__        }_        return null__    };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1531241461;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this annotation interface method, or_<tt>null</tt> if this visitor is not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are ignored. Moreover, exacly_one visit method must be called on this annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_    if (mv != null) {_      return mv.visitAnnotationDefault()__    }_    return null__  };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1533573221;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this annotation interface method, or_<tt>null</tt> if this visitor is not interested in visiting this default value. The 'name'_parameters passed to the methods of this annotation visitor are ignored. Moreover, exacly_one visit method must be called on this annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_    if (mv != null) {_      return mv.visitAnnotationDefault()__    }_    return null__  };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1536664245;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this annotation interface method, or_{@literal null} if this visitor is not interested in visiting this default value. The_'name' parameters passed to the methods of this annotation visitor are ignored. Moreover,_exacly one visit method must be called on this annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_    if (mv != null) {_      return mv.visitAnnotationDefault()__    }_    return null__  };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotationDefault();1537204147;Visits the default value of this annotation interface method.__@return a visitor to the visit the actual default value of this annotation interface method, or_{@literal null} if this visitor is not interested in visiting this default value. The_'name' parameters passed to the methods of this annotation visitor are ignored. Moreover,_exacly one visit method must be called on this annotation visitor, followed by visitEnd.;public AnnotationVisitor visitAnnotationDefault() {_    if (mv != null) {_      return mv.visitAnnotationDefault()__    }_    return null__  };visits,the,default,value,of,this,annotation,interface,method,return,a,visitor,to,the,visit,the,actual,default,value,of,this,annotation,interface,method,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,default,value,the,name,parameters,passed,to,the,methods,of,this,annotation,visitor,are,ignored,moreover,exacly,one,visit,method,must,be,called,on,this,annotation,visitor,followed,by,visit,end;public,annotation,visitor,visit,annotation,default,if,mv,null,return,mv,visit,annotation,default,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1366718246;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1367955086;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1395273982;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1397644526;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1483093254;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(int parameter,             String desc, boolean visible);1505821772;Visits an annotation of a parameter this method.__@param parameter_the parameter index._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(int parameter,_            String desc, boolean visible) {_        if (mv != null) {_            return mv.visitParameterAnnotation(parameter, desc, visible)__        }_        return null__    };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,int,parameter,string,desc,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(       final int parameter, final String descriptor, final boolean visible);1531241461;Visits an annotation of a parameter this method.__@param parameter the parameter index. This index must be strictly smaller than the number of_parameters in the method descriptor, and strictly smaller than the parameter count_specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i_is not required to correspond to the i'th parameter descriptor in the method_descriptor</i>, in particular in case of synthetic parameters (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(_      final int parameter, final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitParameterAnnotation(parameter, descriptor, visible)__    }_    return null__  };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,this,index,must,be,strictly,smaller,than,the,number,of,parameters,in,the,method,descriptor,and,strictly,smaller,than,the,parameter,count,specified,in,link,visit,annotable,parameter,count,important,note,i,a,parameter,index,i,is,not,required,to,correspond,to,the,i,th,parameter,descriptor,in,the,method,descriptor,i,in,particular,in,case,of,synthetic,parameters,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,final,int,parameter,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(       final int parameter, final String descriptor, final boolean visible);1533573221;Visits an annotation of a parameter this method.__@param parameter the parameter index. This index must be strictly smaller than the number of_parameters in the method descriptor, and strictly smaller than the parameter count_specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i_is not required to correspond to the i'th parameter descriptor in the method_descriptor</i>, in particular in case of synthetic parameters (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(_      final int parameter, final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitParameterAnnotation(parameter, descriptor, visible)__    }_    return null__  };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,this,index,must,be,strictly,smaller,than,the,number,of,parameters,in,the,method,descriptor,and,strictly,smaller,than,the,parameter,count,specified,in,link,visit,annotable,parameter,count,important,note,i,a,parameter,index,i,is,not,required,to,correspond,to,the,i,th,parameter,descriptor,in,the,method,descriptor,i,in,particular,in,case,of,synthetic,parameters,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,final,int,parameter,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(       final int parameter, final String descriptor, final boolean visible);1536664245;Visits an annotation of a parameter this method.__@param parameter the parameter index. This index must be strictly smaller than the number of_parameters in the method descriptor, and strictly smaller than the parameter count_specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i_is not required to correspond to the i'th parameter descriptor in the method_descriptor</i>, in particular in case of synthetic parameters (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(_      final int parameter, final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitParameterAnnotation(parameter, descriptor, visible)__    }_    return null__  };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,this,index,must,be,strictly,smaller,than,the,number,of,parameters,in,the,method,descriptor,and,strictly,smaller,than,the,parameter,count,specified,in,link,visit,annotable,parameter,count,important,note,i,a,parameter,index,i,is,not,required,to,correspond,to,the,i,th,parameter,descriptor,in,the,method,descriptor,i,in,particular,in,case,of,synthetic,parameters,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,final,int,parameter,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitParameterAnnotation(       final int parameter, final String descriptor, final boolean visible);1537204147;Visits an annotation of a parameter this method.__@param parameter the parameter index. This index must be strictly smaller than the number of_parameters in the method descriptor, and strictly smaller than the parameter count_specified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i_is not required to correspond to the i'th parameter descriptor in the method_descriptor</i>, in particular in case of synthetic parameters (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitParameterAnnotation(_      final int parameter, final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitParameterAnnotation(parameter, descriptor, visible)__    }_    return null__  };visits,an,annotation,of,a,parameter,this,method,param,parameter,the,parameter,index,this,index,must,be,strictly,smaller,than,the,number,of,parameters,in,the,method,descriptor,and,strictly,smaller,than,the,parameter,count,specified,in,link,visit,annotable,parameter,count,important,note,i,a,parameter,index,i,is,not,required,to,correspond,to,the,i,th,parameter,descriptor,in,the,method,descriptor,i,in,particular,in,case,of,synthetic,parameters,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,parameter,annotation,final,int,parameter,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,parameter,annotation,parameter,descriptor,visible,return,null
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1366718246;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1367955086;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1395273982;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1397644526;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1483093254;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitMultiANewArrayInsn(String desc, int dims);1505821772;Visits a MULTIANEWARRAY instruction.__@param desc_an array type descriptor (see {@link Type Type})._@param dims_number of dimensions of the array to allocate.;public void visitMultiANewArrayInsn(String desc, int dims) {_        if (mv != null) {_            mv.visitMultiANewArrayInsn(desc, dims)__        }_    };visits,a,multianewarray,instruction,param,desc,an,array,type,descriptor,see,link,type,type,param,dims,number,of,dimensions,of,the,array,to,allocate;public,void,visit,multi,anew,array,insn,string,desc,int,dims,if,mv,null,mv,visit,multi,anew,array,insn,desc,dims
MethodVisitor -> public void visitLocalVariable(       final String name,       final String descriptor,       final String signature,       final Label start,       final Label end,       final int index);1531241461;Visits a local variable declaration.__@param name the name of a local variable._@param descriptor the type descriptor of this local variable._@param signature the type signature of this local variable. May be <tt>null</tt> if the local_variable type does not use generic types._@param start the first instruction corresponding to the scope of this local variable_(inclusive)._@param end the last instruction corresponding to the scope of this local variable (exclusive)._@param index the local variable's index._@throws IllegalArgumentException if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel} method).;public void visitLocalVariable(_      final String name,_      final String descriptor,_      final String signature,_      final Label start,_      final Label end,_      final int index) {_    if (mv != null) {_      mv.visitLocalVariable(name, descriptor, signature, start, end, index)__    }_  };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,descriptor,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,local,variable,final,string,name,final,string,descriptor,final,string,signature,final,label,start,final,label,end,final,int,index,if,mv,null,mv,visit,local,variable,name,descriptor,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(       final String name,       final String descriptor,       final String signature,       final Label start,       final Label end,       final int index);1533573221;Visits a local variable declaration.__@param name the name of a local variable._@param descriptor the type descriptor of this local variable._@param signature the type signature of this local variable. May be <tt>null</tt> if the local_variable type does not use generic types._@param start the first instruction corresponding to the scope of this local variable_(inclusive)._@param end the last instruction corresponding to the scope of this local variable (exclusive)._@param index the local variable's index._@throws IllegalArgumentException if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel} method).;public void visitLocalVariable(_      final String name,_      final String descriptor,_      final String signature,_      final Label start,_      final Label end,_      final int index) {_    if (mv != null) {_      mv.visitLocalVariable(name, descriptor, signature, start, end, index)__    }_  };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,descriptor,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,local,variable,final,string,name,final,string,descriptor,final,string,signature,final,label,start,final,label,end,final,int,index,if,mv,null,mv,visit,local,variable,name,descriptor,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(       final String name,       final String descriptor,       final String signature,       final Label start,       final Label end,       final int index);1536664245;Visits a local variable declaration.__@param name the name of a local variable._@param descriptor the type descriptor of this local variable._@param signature the type signature of this local variable. May be {@literal null} if the local_variable type does not use generic types._@param start the first instruction corresponding to the scope of this local variable_(inclusive)._@param end the last instruction corresponding to the scope of this local variable (exclusive)._@param index the local variable's index._@throws IllegalArgumentException if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel} method).;public void visitLocalVariable(_      final String name,_      final String descriptor,_      final String signature,_      final Label start,_      final Label end,_      final int index) {_    if (mv != null) {_      mv.visitLocalVariable(name, descriptor, signature, start, end, index)__    }_  };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,descriptor,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,literal,null,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,local,variable,final,string,name,final,string,descriptor,final,string,signature,final,label,start,final,label,end,final,int,index,if,mv,null,mv,visit,local,variable,name,descriptor,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(       final String name,       final String descriptor,       final String signature,       final Label start,       final Label end,       final int index);1537204147;Visits a local variable declaration.__@param name the name of a local variable._@param descriptor the type descriptor of this local variable._@param signature the type signature of this local variable. May be {@literal null} if the local_variable type does not use generic types._@param start the first instruction corresponding to the scope of this local variable_(inclusive)._@param end the last instruction corresponding to the scope of this local variable (exclusive)._@param index the local variable's index._@throws IllegalArgumentException if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel} method).;public void visitLocalVariable(_      final String name,_      final String descriptor,_      final String signature,_      final Label start,_      final Label end,_      final int index) {_    if (mv != null) {_      mv.visitLocalVariable(name, descriptor, signature, start, end, index)__    }_  };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,descriptor,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,literal,null,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,local,variable,final,string,name,final,string,descriptor,final,string,signature,final,label,start,final,label,end,final,int,index,if,mv,null,mv,visit,local,variable,name,descriptor,signature,start,end,index
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(       final int typeRef,       final TypePath typePath,       final Label[] start,       final Label[] end,       final int[] index,       final String descriptor,       final boolean visible);1531241461;Visits an annotation on a local variable type.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link_TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param start the fist instructions corresponding to the continuous ranges that make the scope_of this local variable (inclusive)._@param end the last instructions corresponding to the continuous ranges that make the scope of_this local variable (exclusive). This array must have the same size as the 'start' array._@param index the local variable's index in each range. This array must have the same size as_the 'start' array._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(_      final int typeRef,_      final TypePath typePath,_      final Label[] start,_      final Label[] end,_      final int[] index,_      final String descriptor,_      final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitLocalVariableAnnotation(_          typeRef, typePath, start, end, index, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,final,int,type,ref,final,type,path,type,path,final,label,start,final,label,end,final,int,index,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(       final int typeRef,       final TypePath typePath,       final Label[] start,       final Label[] end,       final int[] index,       final String descriptor,       final boolean visible);1533573221;Visits an annotation on a local variable type.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link_TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param start the fist instructions corresponding to the continuous ranges that make the scope_of this local variable (inclusive)._@param end the last instructions corresponding to the continuous ranges that make the scope of_this local variable (exclusive). This array must have the same size as the 'start' array._@param index the local variable's index in each range. This array must have the same size as_the 'start' array._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(_      final int typeRef,_      final TypePath typePath,_      final Label[] start,_      final Label[] end,_      final int[] index,_      final String descriptor,_      final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitLocalVariableAnnotation(_          typeRef, typePath, start, end, index, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,final,int,type,ref,final,type,path,type,path,final,label,start,final,label,end,final,int,index,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(       final int typeRef,       final TypePath typePath,       final Label[] start,       final Label[] end,       final int[] index,       final String descriptor,       final boolean visible);1536664245;Visits an annotation on a local variable type.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link_TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param start the fist instructions corresponding to the continuous ranges that make the scope_of this local variable (inclusive)._@param end the last instructions corresponding to the continuous ranges that make the scope of_this local variable (exclusive). This array must have the same size as the 'start' array._@param index the local variable's index in each range. This array must have the same size as_the 'start' array._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(_      final int typeRef,_      final TypePath typePath,_      final Label[] start,_      final Label[] end,_      final int[] index,_      final String descriptor,_      final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitLocalVariableAnnotation(_          typeRef, typePath, start, end, index, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,final,int,type,ref,final,type,path,type,path,final,label,start,final,label,end,final,int,index,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(       final int typeRef,       final TypePath typePath,       final Label[] start,       final Label[] end,       final int[] index,       final String descriptor,       final boolean visible);1537204147;Visits an annotation on a local variable type.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link_TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param start the fist instructions corresponding to the continuous ranges that make the scope_of this local variable (inclusive)._@param end the last instructions corresponding to the continuous ranges that make the scope of_this local variable (exclusive). This array must have the same size as the 'start' array._@param index the local variable's index in each range. This array must have the same size as_the 'start' array._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(_      final int typeRef,_      final TypePath typePath,_      final Label[] start,_      final Label[] end,_      final int[] index,_      final String descriptor,_      final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitLocalVariableAnnotation(_          typeRef, typePath, start, end, index, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,final,int,type,ref,final,type,path,type,path,final,label,start,final,label,end,final,int,index,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,descriptor,visible,return,null
MethodVisitor -> public void visitParameter(String name, int access);1395273982;Visits a parameter of this method.__@param name_parameter name or null if none is provided._@param access_the parameter's access flags, only <tt>ACC_FINAL</tt>,_<tt>ACC_SYNTHETIC</tt> or/and <tt>ACC_MANDATED</tt> are_allowed (see {@link Opcodes}).;public void visitParameter(String name, int access) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (mv != null) {_            mv.visitParameter(name, access)__        }_    };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,string,name,int,access,if,api,opcodes,asm5,throw,new,runtime,exception,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(String name, int access);1397644526;Visits a parameter of this method.__@param name_parameter name or null if none is provided._@param access_the parameter's access flags, only <tt>ACC_FINAL</tt>,_<tt>ACC_SYNTHETIC</tt> or/and <tt>ACC_MANDATED</tt> are_allowed (see {@link Opcodes}).;public void visitParameter(String name, int access) {_		_        if (mv != null) {_            mv.visitParameter(name, access)__        }_    };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,string,name,int,access,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(String name, int access);1483093254;Visits a parameter of this method.__@param name_parameter name or null if none is provided._@param access_the parameter's access flags, only <tt>ACC_FINAL</tt>,_<tt>ACC_SYNTHETIC</tt> or/and <tt>ACC_MANDATED</tt> are_allowed (see {@link Opcodes}).;public void visitParameter(String name, int access) {_		_        if (mv != null) {_            mv.visitParameter(name, access)__        }_    };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,string,name,int,access,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(String name, int access);1505821772;Visits a parameter of this method.__@param name_parameter name or null if none is provided._@param access_the parameter's access flags, only <tt>ACC_FINAL</tt>,_<tt>ACC_SYNTHETIC</tt> or/and <tt>ACC_MANDATED</tt> are_allowed (see {@link Opcodes}).;public void visitParameter(String name, int access) {_		_        if (mv != null) {_            mv.visitParameter(name, access)__        }_    };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,string,name,int,access,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitJumpInsn(final int opcode, final Label label);1531241461;Visits a jump instruction. A jump instruction is an instruction that may jump to another_instruction.__@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,_IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,_IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label the operand of the instruction to be visited. This operand is a label that_designates the instruction to which the jump instruction may jump.;public void visitJumpInsn(final int opcode, final Label label) {_    if (mv != null) {_      mv.visitJumpInsn(opcode, label)__    }_  };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,final,int,opcode,final,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(final int opcode, final Label label);1533573221;Visits a jump instruction. A jump instruction is an instruction that may jump to another_instruction.__@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,_IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,_IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label the operand of the instruction to be visited. This operand is a label that_designates the instruction to which the jump instruction may jump.;public void visitJumpInsn(final int opcode, final Label label) {_    if (mv != null) {_      mv.visitJumpInsn(opcode, label)__    }_  };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,final,int,opcode,final,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(final int opcode, final Label label);1536664245;Visits a jump instruction. A jump instruction is an instruction that may jump to another_instruction.__@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,_IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,_IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label the operand of the instruction to be visited. This operand is a label that_designates the instruction to which the jump instruction may jump.;public void visitJumpInsn(final int opcode, final Label label) {_    if (mv != null) {_      mv.visitJumpInsn(opcode, label)__    }_  };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,final,int,opcode,final,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(final int opcode, final Label label);1537204147;Visits a jump instruction. A jump instruction is an instruction that may jump to another_instruction.__@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,_IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,_IF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label the operand of the instruction to be visited. This operand is a label that_designates the instruction to which the jump instruction may jump.;public void visitJumpInsn(final int opcode, final Label label) {_    if (mv != null) {_      mv.visitJumpInsn(opcode, label)__    }_  };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,final,int,opcode,final,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1366718246;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1367955086;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1395273982;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1397644526;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1483093254;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public void visitJumpInsn(int opcode, Label label);1505821772;Visits a jump instruction. A jump instruction is an instruction that may_jump to another instruction.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either IFEQ, IFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ,_IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE,_IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL._@param label_the operand of the instruction to be visited. This operand is_a label that designates the instruction to which the jump_instruction may jump.;public void visitJumpInsn(int opcode, Label label) {_        if (mv != null) {_            mv.visitJumpInsn(opcode, label)__        }_    };visits,a,jump,instruction,a,jump,instruction,is,an,instruction,that,may,jump,to,another,instruction,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,ifeq,ifne,iflt,ifge,ifgt,ifle,goto,jsr,ifnull,or,ifnonnull,param,label,the,operand,of,the,instruction,to,be,visited,this,operand,is,a,label,that,designates,the,instruction,to,which,the,jump,instruction,may,jump;public,void,visit,jump,insn,int,opcode,label,label,if,mv,null,mv,visit,jump,insn,opcode,label
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1395273982;Visits an annotation on an exception handler type. This method must be_called <i>after</i> the {@link #visitTryCatchBlock} for the annotated_exception handler. It can be called several times for the same exception_handler.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#EXCEPTION_PARAMETER_EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (mv != null) {_            return mv.visitTryCatchAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,api,opcodes,asm5,throw,new,runtime,exception,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1397644526;Visits an annotation on an exception handler type. This method must be_called <i>after</i> the {@link #visitTryCatchBlock} for the annotated_exception handler. It can be called several times for the same exception_handler.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#EXCEPTION_PARAMETER_EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTryCatchAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1483093254;Visits an annotation on an exception handler type. This method must be_called <i>after</i> the {@link #visitTryCatchBlock} for the annotated_exception handler. It can be called several times for the same exception_handler.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#EXCEPTION_PARAMETER_EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTryCatchAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1505821772;Visits an annotation on an exception handler type. This method must be_called <i>after</i> the {@link #visitTryCatchBlock} for the annotated_exception handler. It can be called several times for the same exception_handler.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#EXCEPTION_PARAMETER_EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTryCatchAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public void visitIntInsn(final int opcode, final int operand);1531241461;Visits an instruction with a single int operand.__@param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH_or NEWARRAY._@param operand the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE._<br>_When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE._<br>_When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link_Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},_{@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(final int opcode, final int operand) {_    if (mv != null) {_      mv.visitIntInsn(opcode, operand)__    }_  };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,final,int,opcode,final,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(final int opcode, final int operand);1533573221;Visits an instruction with a single int operand.__@param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH_or NEWARRAY._@param operand the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE._<br>_When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE._<br>_When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link_Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},_{@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(final int opcode, final int operand) {_    if (mv != null) {_      mv.visitIntInsn(opcode, operand)__    }_  };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,final,int,opcode,final,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(final int opcode, final int operand);1536664245;Visits an instruction with a single int operand.__@param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH_or NEWARRAY._@param operand the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE._<br>_When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE._<br>_When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link_Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},_{@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(final int opcode, final int operand) {_    if (mv != null) {_      mv.visitIntInsn(opcode, operand)__    }_  };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,final,int,opcode,final,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(final int opcode, final int operand);1537204147;Visits an instruction with a single int operand.__@param opcode the opcode of the instruction to be visited. This opcode is either BIPUSH, SIPUSH_or NEWARRAY._@param operand the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between Byte.MIN_VALUE and Byte.MAX_VALUE._<br>_When opcode is SIPUSH, operand value should be between Short.MIN_VALUE and Short.MAX_VALUE._<br>_When opcode is NEWARRAY, operand value should be one of {@link Opcodes#T_BOOLEAN}, {@link_Opcodes#T_CHAR}, {@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE}, {@link Opcodes#T_BYTE},_{@link Opcodes#T_SHORT}, {@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(final int opcode, final int operand) {_    if (mv != null) {_      mv.visitIntInsn(opcode, operand)__    }_  };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,final,int,opcode,final,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitTryCatchBlock(       final Label start, final Label end, final Label handler, final String type);1531241461;Visits a try catch block.__@param start the beginning of the exception handler's scope (inclusive)._@param end the end of the exception handler's scope (exclusive)._@param handler the beginning of the exception handler's code._@param type the internal name of the type of exceptions handled by the handler, or_<tt>null</tt> to catch any exceptions (for "finally" blocks)._@throws IllegalArgumentException if one of the labels has already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitTryCatchBlock(_      final Label start, final Label end, final Label handler, final String type) {_    if (mv != null) {_      mv.visitTryCatchBlock(start, end, handler, type)__    }_  };visits,a,try,catch,block,param,start,the,beginning,of,the,exception,handler,s,scope,inclusive,param,end,the,end,of,the,exception,handler,s,scope,exclusive,param,handler,the,beginning,of,the,exception,handler,s,code,param,type,the,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,try,catch,block,final,label,start,final,label,end,final,label,handler,final,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(       final Label start, final Label end, final Label handler, final String type);1533573221;Visits a try catch block.__@param start the beginning of the exception handler's scope (inclusive)._@param end the end of the exception handler's scope (exclusive)._@param handler the beginning of the exception handler's code._@param type the internal name of the type of exceptions handled by the handler, or_<tt>null</tt> to catch any exceptions (for "finally" blocks)._@throws IllegalArgumentException if one of the labels has already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitTryCatchBlock(_      final Label start, final Label end, final Label handler, final String type) {_    if (mv != null) {_      mv.visitTryCatchBlock(start, end, handler, type)__    }_  };visits,a,try,catch,block,param,start,the,beginning,of,the,exception,handler,s,scope,inclusive,param,end,the,end,of,the,exception,handler,s,scope,exclusive,param,handler,the,beginning,of,the,exception,handler,s,code,param,type,the,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,tt,null,tt,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,try,catch,block,final,label,start,final,label,end,final,label,handler,final,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(       final Label start, final Label end, final Label handler, final String type);1536664245;Visits a try catch block.__@param start the beginning of the exception handler's scope (inclusive)._@param end the end of the exception handler's scope (exclusive)._@param handler the beginning of the exception handler's code._@param type the internal name of the type of exceptions handled by the handler, or {@literal_null} to catch any exceptions (for "finally" blocks)._@throws IllegalArgumentException if one of the labels has already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitTryCatchBlock(_      final Label start, final Label end, final Label handler, final String type) {_    if (mv != null) {_      mv.visitTryCatchBlock(start, end, handler, type)__    }_  };visits,a,try,catch,block,param,start,the,beginning,of,the,exception,handler,s,scope,inclusive,param,end,the,end,of,the,exception,handler,s,scope,exclusive,param,handler,the,beginning,of,the,exception,handler,s,code,param,type,the,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,literal,null,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,try,catch,block,final,label,start,final,label,end,final,label,handler,final,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public void visitTryCatchBlock(       final Label start, final Label end, final Label handler, final String type);1537204147;Visits a try catch block.__@param start the beginning of the exception handler's scope (inclusive)._@param end the end of the exception handler's scope (exclusive)._@param handler the beginning of the exception handler's code._@param type the internal name of the type of exceptions handled by the handler, or {@literal_null} to catch any exceptions (for "finally" blocks)._@throws IllegalArgumentException if one of the labels has already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitTryCatchBlock(_      final Label start, final Label end, final Label handler, final String type) {_    if (mv != null) {_      mv.visitTryCatchBlock(start, end, handler, type)__    }_  };visits,a,try,catch,block,param,start,the,beginning,of,the,exception,handler,s,scope,inclusive,param,end,the,end,of,the,exception,handler,s,scope,exclusive,param,handler,the,beginning,of,the,exception,handler,s,code,param,type,the,internal,name,of,the,type,of,exceptions,handled,by,the,handler,or,literal,null,to,catch,any,exceptions,for,finally,blocks,throws,illegal,argument,exception,if,one,of,the,labels,has,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,try,catch,block,final,label,start,final,label,end,final,label,handler,final,string,type,if,mv,null,mv,visit,try,catch,block,start,end,handler,type
MethodVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1531241461;Visits an annotation of this method.__@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,this,method,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,annotation,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1533573221;Visits an annotation of this method.__@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,this,method,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,annotation,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1536664245;Visits an annotation of this method.__@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,this,method,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,annotation,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible);1537204147;Visits an annotation of this method.__@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {_    if (mv != null) {_      return mv.visitAnnotation(descriptor, visible)__    }_    return null__  };visits,an,annotation,of,this,method,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,final,string,descriptor,final,boolean,visible,if,mv,null,return,mv,visit,annotation,descriptor,visible,return,null
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1366718246;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1367955086;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1395273982;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1397644526;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1483093254;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitLocalVariable(String name, String desc, String signature,             Label start, Label end, int index);1505821772;Visits a local variable declaration.__@param name_the name of a local variable._@param desc_the type descriptor of this local variable._@param signature_the type signature of this local variable. May be_<tt>null</tt> if the local variable type does not use generic_types._@param start_the first instruction corresponding to the scope of this local_variable (inclusive)._@param end_the last instruction corresponding to the scope of this local_variable (exclusive)._@param index_the local variable's index._@throws IllegalArgumentException_if one of the labels has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLocalVariable(String name, String desc, String signature,_            Label start, Label end, int index) {_        if (mv != null) {_            mv.visitLocalVariable(name, desc, signature, start, end, index)__        }_    };visits,a,local,variable,declaration,param,name,the,name,of,a,local,variable,param,desc,the,type,descriptor,of,this,local,variable,param,signature,the,type,signature,of,this,local,variable,may,be,tt,null,tt,if,the,local,variable,type,does,not,use,generic,types,param,start,the,first,instruction,corresponding,to,the,scope,of,this,local,variable,inclusive,param,end,the,last,instruction,corresponding,to,the,scope,of,this,local,variable,exclusive,param,index,the,local,variable,s,index,throws,illegal,argument,exception,if,one,of,the,labels,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,local,variable,string,name,string,desc,string,signature,label,start,label,end,int,index,if,mv,null,mv,visit,local,variable,name,desc,signature,start,end,index
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1366718246;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1367955086;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1395273982;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1397644526;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1483093254;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(int opcode, String type);1505821772;Visits a type instruction. A type instruction is an instruction that_takes the internal name of a class as parameter.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either NEW, ANEWARRAY, CHECKCAST or INSTANCEOF._@param type_the operand of the instruction to be visited. This operand_must be the internal name of an object or array class (see_{@link Type#getInternalName() getInternalName}).;public void visitTypeInsn(int opcode, String type) {_        if (mv != null) {_            mv.visitTypeInsn(opcode, type)__        }_    };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name,get,internal,name;public,void,visit,type,insn,int,opcode,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitLabel(final Label label);1531241461;Visits a label. A label designates the instruction that will be visited just after it.__@param label a {@link Label} object.;public void visitLabel(final Label label) {_    if (mv != null) {_      mv.visitLabel(label)__    }_  };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,object;public,void,visit,label,final,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(final Label label);1533573221;Visits a label. A label designates the instruction that will be visited just after it.__@param label a {@link Label} object.;public void visitLabel(final Label label) {_    if (mv != null) {_      mv.visitLabel(label)__    }_  };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,object;public,void,visit,label,final,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(final Label label);1536664245;Visits a label. A label designates the instruction that will be visited just after it.__@param label a {@link Label} object.;public void visitLabel(final Label label) {_    if (mv != null) {_      mv.visitLabel(label)__    }_  };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,object;public,void,visit,label,final,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(final Label label);1537204147;Visits a label. A label designates the instruction that will be visited just after it.__@param label a {@link Label} object.;public void visitLabel(final Label label) {_    if (mv != null) {_      mv.visitLabel(label)__    }_  };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,object;public,void,visit,label,final,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc);1366718246;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> public void visitMethodInsn(int opcode, String owner, String name,             String desc);1367955086;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1395273982;Visits an annotation on a type in the method signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#METHOD_TYPE_PARAMETER_METHOD_TYPE_PARAMETER},_{@link TypeReference#METHOD_TYPE_PARAMETER_BOUND_METHOD_TYPE_PARAMETER_BOUND},_{@link TypeReference#METHOD_RETURN METHOD_RETURN},_{@link TypeReference#METHOD_RECEIVER METHOD_RECEIVER},_{@link TypeReference#METHOD_FORMAL_PARAMETER_METHOD_FORMAL_PARAMETER} or {@link TypeReference#THROWS_THROWS}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (mv != null) {_            return mv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,api,opcodes,asm5,throw,new,runtime,exception,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1397644526;Visits an annotation on a type in the method signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#METHOD_TYPE_PARAMETER_METHOD_TYPE_PARAMETER},_{@link TypeReference#METHOD_TYPE_PARAMETER_BOUND_METHOD_TYPE_PARAMETER_BOUND},_{@link TypeReference#METHOD_RETURN METHOD_RETURN},_{@link TypeReference#METHOD_RECEIVER METHOD_RECEIVER},_{@link TypeReference#METHOD_FORMAL_PARAMETER_METHOD_FORMAL_PARAMETER} or {@link TypeReference#THROWS_THROWS}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1483093254;Visits an annotation on a type in the method signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#METHOD_TYPE_PARAMETER_METHOD_TYPE_PARAMETER},_{@link TypeReference#METHOD_TYPE_PARAMETER_BOUND_METHOD_TYPE_PARAMETER_BOUND},_{@link TypeReference#METHOD_RETURN METHOD_RETURN},_{@link TypeReference#METHOD_RECEIVER METHOD_RECEIVER},_{@link TypeReference#METHOD_FORMAL_PARAMETER_METHOD_FORMAL_PARAMETER} or {@link TypeReference#THROWS_THROWS}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1505821772;Visits an annotation on a type in the method signature.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#METHOD_TYPE_PARAMETER_METHOD_TYPE_PARAMETER},_{@link TypeReference#METHOD_TYPE_PARAMETER_BOUND_METHOD_TYPE_PARAMETER_BOUND},_{@link TypeReference#METHOD_RETURN METHOD_RETURN},_{@link TypeReference#METHOD_RECEIVER METHOD_RECEIVER},_{@link TypeReference#METHOD_FORMAL_PARAMETER_METHOD_FORMAL_PARAMETER} or {@link TypeReference#THROWS_THROWS}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitTypeAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public void visitLineNumber(final int line, final Label start);1531241461;Visits a line number declaration.__@param line a line number. This number refers to the source file from which the class was_compiled._@param start the first instruction corresponding to this line number._@throws IllegalArgumentException if <tt>start</tt> has not already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitLineNumber(final int line, final Label start) {_    if (mv != null) {_      mv.visitLineNumber(line, start)__    }_  };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,line,number,final,int,line,final,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(final int line, final Label start);1533573221;Visits a line number declaration.__@param line a line number. This number refers to the source file from which the class was_compiled._@param start the first instruction corresponding to this line number._@throws IllegalArgumentException if <tt>start</tt> has not already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitLineNumber(final int line, final Label start) {_    if (mv != null) {_      mv.visitLineNumber(line, start)__    }_  };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,line,number,final,int,line,final,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(final int line, final Label start);1536664245;Visits a line number declaration.__@param line a line number. This number refers to the source file from which the class was_compiled._@param start the first instruction corresponding to this line number._@throws IllegalArgumentException if {@code start} has not already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitLineNumber(final int line, final Label start) {_    if (mv != null) {_      mv.visitLineNumber(line, start)__    }_  };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,code,start,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,line,number,final,int,line,final,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(final int line, final Label start);1537204147;Visits a line number declaration.__@param line a line number. This number refers to the source file from which the class was_compiled._@param start the first instruction corresponding to this line number._@throws IllegalArgumentException if {@code start} has not already been visited by this visitor_(by the {@link #visitLabel} method).;public void visitLineNumber(final int line, final Label start) {_    if (mv != null) {_      mv.visitLineNumber(line, start)__    }_  };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,code,start,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,method;public,void,visit,line,number,final,int,line,final,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLabel(Label label);1366718246;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(Label label);1367955086;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(Label label);1395273982;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(Label label);1397644526;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(Label label);1483093254;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitLabel(Label label);1505821772;Visits a label. A label designates the instruction that will be visited_just after it.__@param label_a {@link Label Label} object.;public void visitLabel(Label label) {_        if (mv != null) {_            mv.visitLabel(label)__        }_    };visits,a,label,a,label,designates,the,instruction,that,will,be,visited,just,after,it,param,label,a,link,label,label,object;public,void,visit,label,label,label,if,mv,null,mv,visit,label,label
MethodVisitor -> public void visitTableSwitchInsn(       final int min, final int max, final Label dflt, final Label... labels);1531241461;Visits a TABLESWITCH instruction.__@param min the minimum key value._@param max the maximum key value._@param dflt beginning of the default handler block._@param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the_handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(_      final int min, final int max, final Label dflt, final Label... labels) {_    if (mv != null) {_      mv.visitTableSwitchInsn(min, max, dflt, labels)__    }_  };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,final,int,min,final,int,max,final,label,dflt,final,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(       final int min, final int max, final Label dflt, final Label... labels);1533573221;Visits a TABLESWITCH instruction.__@param min the minimum key value._@param max the maximum key value._@param dflt beginning of the default handler block._@param labels beginnings of the handler blocks. <tt>labels[i]</tt> is the beginning of the_handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(_      final int min, final int max, final Label dflt, final Label... labels) {_    if (mv != null) {_      mv.visitTableSwitchInsn(min, max, dflt, labels)__    }_  };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,final,int,min,final,int,max,final,label,dflt,final,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(       final int min, final int max, final Label dflt, final Label... labels);1536664245;Visits a TABLESWITCH instruction.__@param min the minimum key value._@param max the maximum key value._@param dflt beginning of the default handler block._@param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the_handler block for the {@code min + i} key.;public void visitTableSwitchInsn(_      final int min, final int max, final Label dflt, final Label... labels) {_    if (mv != null) {_      mv.visitTableSwitchInsn(min, max, dflt, labels)__    }_  };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,code,labels,i,is,the,beginning,of,the,handler,block,for,the,code,min,i,key;public,void,visit,table,switch,insn,final,int,min,final,int,max,final,label,dflt,final,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(       final int min, final int max, final Label dflt, final Label... labels);1537204147;Visits a TABLESWITCH instruction.__@param min the minimum key value._@param max the maximum key value._@param dflt beginning of the default handler block._@param labels beginnings of the handler blocks. {@code labels[i]} is the beginning of the_handler block for the {@code min + i} key.;public void visitTableSwitchInsn(_      final int min, final int max, final Label dflt, final Label... labels) {_    if (mv != null) {_      mv.visitTableSwitchInsn(min, max, dflt, labels)__    }_  };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,code,labels,i,is,the,beginning,of,the,handler,block,for,the,code,min,i,key;public,void,visit,table,switch,insn,final,int,min,final,int,max,final,label,dflt,final,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1366718246;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1367955086;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1395273982;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1397644526;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1483093254;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitTableSwitchInsn(int min, int max, Label dflt,             Label... labels);1505821772;Visits a TABLESWITCH instruction.__@param min_the minimum key value._@param max_the maximum key value._@param dflt_beginning of the default handler block._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>min + i</tt> key.;public void visitTableSwitchInsn(int min, int max, Label dflt,_            Label... labels) {_        if (mv != null) {_            mv.visitTableSwitchInsn(min, max, dflt, labels)__        }_    };visits,a,tableswitch,instruction,param,min,the,minimum,key,value,param,max,the,maximum,key,value,param,dflt,beginning,of,the,default,handler,block,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,min,i,tt,key;public,void,visit,table,switch,insn,int,min,int,max,label,dflt,label,labels,if,mv,null,mv,visit,table,switch,insn,min,max,dflt,labels
MethodVisitor -> public void visitMethodInsn(       final int opcode,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1531241461;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param isInterface if the method's owner class is an interface.;public void visitMethodInsn(_      final int opcode,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    if (api < Opcodes.ASM5) {_      if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) {_        throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces requires ASM5")__      }_      visitMethodInsn(opcode, owner, name, descriptor)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,is,interface,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,if,api,opcodes,asm5,if,is,interface,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,requires,asm5,visit,method,insn,opcode,owner,name,descriptor,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor,is,interface
MethodVisitor -> public void visitMethodInsn(       final int opcode,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1533573221;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param isInterface if the method's owner class is an interface.;public void visitMethodInsn(_      final int opcode,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    if (api < Opcodes.ASM5) {_      if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) {_        throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces requires ASM5")__      }_      visitMethodInsn(opcode, owner, name, descriptor)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,is,interface,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,if,api,opcodes,asm5,if,is,interface,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,requires,asm5,visit,method,insn,opcode,owner,name,descriptor,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor,is,interface
MethodVisitor -> public void visitMethodInsn(       final int opcode,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1536664245;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param isInterface if the method's owner class is an interface.;public void visitMethodInsn(_      final int opcode,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    if (api < Opcodes.ASM5) {_      if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) {_        throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces requires ASM5")__      }_      visitMethodInsn(opcode, owner, name, descriptor)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,is,interface,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,if,api,opcodes,asm5,if,is,interface,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,requires,asm5,visit,method,insn,opcode,owner,name,descriptor,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor,is,interface
MethodVisitor -> public void visitMethodInsn(       final int opcode,       final String owner,       final String name,       final String descriptor,       final boolean isInterface);1537204147;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@param isInterface if the method's owner class is an interface.;public void visitMethodInsn(_      final int opcode,_      final String owner,_      final String name,_      final String descriptor,_      final boolean isInterface) {_    if (api < Opcodes.ASM5) {_      if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) {_        throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces requires ASM5")__      }_      visitMethodInsn(opcode, owner, name, descriptor)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,param,is,interface,if,the,method,s,owner,class,is,an,interface;public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,final,boolean,is,interface,if,api,opcodes,asm5,if,is,interface,opcode,opcodes,invokeinterface,throw,new,illegal,argument,exception,invokespecial,static,on,interfaces,requires,asm5,visit,method,insn,opcode,owner,name,descriptor,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor,is,interface
MethodVisitor -> public void visitEnd();1366718246;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1367955086;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1395273982;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1397644526;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1483093254;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1505821772;Visits the end of the method. This method, which is the last one to be_called, is used to inform the visitor that all the annotations and_attributes of the method have been visited.;public void visitEnd() {_        if (mv != null) {_            mv.visitEnd()__        }_    };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1531241461;Visits the end of the method. This method, which is the last one to be called, is used to_inform the visitor that all the annotations and attributes of the method have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1533573221;Visits the end of the method. This method, which is the last one to be called, is used to_inform the visitor that all the annotations and attributes of the method have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1536664245;Visits the end of the method. This method, which is the last one to be called, is used to_inform the visitor that all the annotations and attributes of the method have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitEnd();1537204147;Visits the end of the method. This method, which is the last one to be called, is used to_inform the visitor that all the annotations and attributes of the method have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,method,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,all,the,annotations,and,attributes,of,the,method,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
MethodVisitor -> public void visitVarInsn(final int opcode, final int var);1531241461;Visits a local variable instruction. A local variable instruction is an instruction that loads_or stores the value of a local variable.__@param opcode the opcode of the local variable instruction to be visited. This opcode is either_ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var the operand of the instruction to be visited. This operand is the index of a local_variable.;public void visitVarInsn(final int opcode, final int var) {_    if (mv != null) {_      mv.visitVarInsn(opcode, var)__    }_  };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,final,int,opcode,final,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(final int opcode, final int var);1533573221;Visits a local variable instruction. A local variable instruction is an instruction that loads_or stores the value of a local variable.__@param opcode the opcode of the local variable instruction to be visited. This opcode is either_ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var the operand of the instruction to be visited. This operand is the index of a local_variable.;public void visitVarInsn(final int opcode, final int var) {_    if (mv != null) {_      mv.visitVarInsn(opcode, var)__    }_  };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,final,int,opcode,final,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(final int opcode, final int var);1536664245;Visits a local variable instruction. A local variable instruction is an instruction that loads_or stores the value of a local variable.__@param opcode the opcode of the local variable instruction to be visited. This opcode is either_ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var the operand of the instruction to be visited. This operand is the index of a local_variable.;public void visitVarInsn(final int opcode, final int var) {_    if (mv != null) {_      mv.visitVarInsn(opcode, var)__    }_  };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,final,int,opcode,final,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(final int opcode, final int var);1537204147;Visits a local variable instruction. A local variable instruction is an instruction that loads_or stores the value of a local variable.__@param opcode the opcode of the local variable instruction to be visited. This opcode is either_ILOAD, LLOAD, FLOAD, DLOAD, ALOAD, ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var the operand of the instruction to be visited. This operand is the index of a local_variable.;public void visitVarInsn(final int opcode, final int var) {_    if (mv != null) {_      mv.visitVarInsn(opcode, var)__    }_  };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,final,int,opcode,final,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitIincInsn(final int var, final int increment);1531241461;Visits an IINC instruction.__@param var index of the local variable to be incremented._@param increment amount to increment the local variable by.;public void visitIincInsn(final int var, final int increment) {_    if (mv != null) {_      mv.visitIincInsn(var, increment)__    }_  };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,final,int,var,final,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(final int var, final int increment);1533573221;Visits an IINC instruction.__@param var index of the local variable to be incremented._@param increment amount to increment the local variable by.;public void visitIincInsn(final int var, final int increment) {_    if (mv != null) {_      mv.visitIincInsn(var, increment)__    }_  };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,final,int,var,final,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(final int var, final int increment);1536664245;Visits an IINC instruction.__@param var index of the local variable to be incremented._@param increment amount to increment the local variable by.;public void visitIincInsn(final int var, final int increment) {_    if (mv != null) {_      mv.visitIincInsn(var, increment)__    }_  };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,final,int,var,final,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitIincInsn(final int var, final int increment);1537204147;Visits an IINC instruction.__@param var index of the local variable to be incremented._@param increment amount to increment the local variable by.;public void visitIincInsn(final int var, final int increment) {_    if (mv != null) {_      mv.visitIincInsn(var, increment)__    }_  };visits,an,iinc,instruction,param,var,index,of,the,local,variable,to,be,incremented,param,increment,amount,to,increment,the,local,variable,by;public,void,visit,iinc,insn,final,int,var,final,int,increment,if,mv,null,mv,visit,iinc,insn,var,increment
MethodVisitor -> public void visitInsn(int opcode);1366718246;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(int opcode);1367955086;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(int opcode);1395273982;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(int opcode);1397644526;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(int opcode);1483093254;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(int opcode);1505821772;Visits a zero operand instruction.__@param opcode_the opcode of the instruction to be visited. This opcode is_either NOP, ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1,_ICONST_2, ICONST_3, ICONST_4, ICONST_5, LCONST_0, LCONST_1,_FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD,_LALOAD, FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD,_IASTORE, LASTORE, FASTORE, DASTORE, AASTORE, BASTORE, CASTORE,_SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1,_DUP2_X2, SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB,_IMUL, LMUL, FMUL, DMUL, IDIV, LDIV, FDIV, DDIV, IREM, LREM,_FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR,_IUSHR, LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D,_L2I, L2F, L2D, F2I, F2L, F2D, D2I, D2L, D2F, I2B, I2C, I2S,_LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER,_or MONITOREXIT.;public void visitInsn(int opcode) {_        if (mv != null) {_            mv.visitInsn(opcode)__        }_    };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,             TypePath typePath, Label[] start, Label[] end, int[] index,             String desc, boolean visible);1395273982;Visits an annotation on a local variable type.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#LOCAL_VARIABLE_LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE_RESOURCE_VARIABLE}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param start_the fist instructions corresponding to the continuous ranges_that make the scope of this local variable (inclusive)._@param end_the last instructions corresponding to the continuous ranges_that make the scope of this local variable (exclusive). This_array must have the same size as the 'start' array._@param index_the local variable's index in each range. This array must have_the same size as the 'start' array._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,_            TypePath typePath, Label[] start, Label[] end, int[] index,_            String desc, boolean visible) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (mv != null) {_            return mv.visitLocalVariableAnnotation(typeRef, typePath, start,_                    end, index, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,int,type,ref,type,path,type,path,label,start,label,end,int,index,string,desc,boolean,visible,if,api,opcodes,asm5,throw,new,runtime,exception,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,             TypePath typePath, Label[] start, Label[] end, int[] index,             String desc, boolean visible);1397644526;Visits an annotation on a local variable type.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#LOCAL_VARIABLE_LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE_RESOURCE_VARIABLE}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param start_the fist instructions corresponding to the continuous ranges_that make the scope of this local variable (inclusive)._@param end_the last instructions corresponding to the continuous ranges_that make the scope of this local variable (exclusive). This_array must have the same size as the 'start' array._@param index_the local variable's index in each range. This array must have_the same size as the 'start' array._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,_            TypePath typePath, Label[] start, Label[] end, int[] index,_            String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitLocalVariableAnnotation(typeRef, typePath, start,_                    end, index, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,int,type,ref,type,path,type,path,label,start,label,end,int,index,string,desc,boolean,visible,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,             TypePath typePath, Label[] start, Label[] end, int[] index,             String desc, boolean visible);1483093254;Visits an annotation on a local variable type.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#LOCAL_VARIABLE_LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE_RESOURCE_VARIABLE}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param start_the fist instructions corresponding to the continuous ranges_that make the scope of this local variable (inclusive)._@param end_the last instructions corresponding to the continuous ranges_that make the scope of this local variable (exclusive). This_array must have the same size as the 'start' array._@param index_the local variable's index in each range. This array must have_the same size as the 'start' array._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,_            TypePath typePath, Label[] start, Label[] end, int[] index,_            String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitLocalVariableAnnotation(typeRef, typePath, start,_                    end, index, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,int,type,ref,type,path,type,path,label,start,label,end,int,index,string,desc,boolean,visible,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,             TypePath typePath, Label[] start, Label[] end, int[] index,             String desc, boolean visible);1505821772;Visits an annotation on a local variable type.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#LOCAL_VARIABLE_LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE_RESOURCE_VARIABLE}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param start_the fist instructions corresponding to the continuous ranges_that make the scope of this local variable (inclusive)._@param end_the last instructions corresponding to the continuous ranges_that make the scope of this local variable (exclusive). This_array must have the same size as the 'start' array._@param index_the local variable's index in each range. This array must have_the same size as the 'start' array._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,_            TypePath typePath, Label[] start, Label[] end, int[] index,_            String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitLocalVariableAnnotation(typeRef, typePath, start,_                    end, index, desc, visible)__        }_        return null__    };visits,an,annotation,on,a,local,variable,type,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,start,the,fist,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,inclusive,param,end,the,last,instructions,corresponding,to,the,continuous,ranges,that,make,the,scope,of,this,local,variable,exclusive,this,array,must,have,the,same,size,as,the,start,array,param,index,the,local,variable,s,index,in,each,range,this,array,must,have,the,same,size,as,the,start,array,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,local,variable,annotation,int,type,ref,type,path,type,path,label,start,label,end,int,index,string,desc,boolean,visible,if,mv,null,return,mv,visit,local,variable,annotation,type,ref,type,path,start,end,index,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1531241461;Visits an annotation on an instruction. This method must be called just <i>after</i> the_annotated instruction. It can be called several times for the same instruction.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link_TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link_TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link_TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitInsnAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,link,type,reference,new,link,type,reference,link,type,reference,link,type,reference,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1533573221;Visits an annotation on an instruction. This method must be called just <i>after</i> the_annotated instruction. It can be called several times for the same instruction.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link_TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link_TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link_TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitInsnAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,link,type,reference,new,link,type,reference,link,type,reference,link,type,reference,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1536664245;Visits an annotation on an instruction. This method must be called just <i>after</i> the_annotated instruction. It can be called several times for the same instruction.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link_TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link_TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link_TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitInsnAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,link,type,reference,new,link,type,reference,link,type,reference,link,type,reference,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1537204147;Visits an annotation on an instruction. This method must be called just <i>after</i> the_annotated instruction. It can be called several times for the same instruction.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#INSTANCEOF}, {@link TypeReference#NEW}, {@link_TypeReference#CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE}, {@link_TypeReference#CAST}, {@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT}, {@link_TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link_TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitInsnAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,link,type,reference,new,link,type,reference,link,type,reference,link,type,reference,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1366718246;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1367955086;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1395273982;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1397644526;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1483093254;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitAnnotation(String desc, boolean visible);1505821772;Visits an annotation of this method.__@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitAnnotation(String desc, boolean visible) {_        if (mv != null) {_            return mv.visitAnnotation(desc, visible)__        }_        return null__    };visits,an,annotation,of,this,method,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,annotation,string,desc,boolean,visible,if,mv,null,return,mv,visit,annotation,desc,visible,return,null
MethodVisitor -> @Deprecated     public void visitMethodInsn(int opcode, String owner, String name,             String desc);1395273982;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;@Deprecated_    public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (api >= Opcodes.ASM5) {_            boolean itf = opcode == Opcodes.INVOKEINTERFACE__            visitMethodInsn(opcode, owner, name, desc, itf)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;deprecated,public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,api,opcodes,asm5,boolean,itf,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,desc,itf,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> @Deprecated     public void visitMethodInsn(int opcode, String owner, String name,             String desc);1397644526;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;@Deprecated_    public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (api >= Opcodes.ASM5) {_            boolean itf = opcode == Opcodes.INVOKEINTERFACE__            visitMethodInsn(opcode, owner, name, desc, itf)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;deprecated,public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,api,opcodes,asm5,boolean,itf,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,desc,itf,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> @Deprecated     public void visitMethodInsn(int opcode, String owner, String name,             String desc);1483093254;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;@Deprecated_    public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (api >= Opcodes.ASM5) {_            boolean itf = opcode == Opcodes.INVOKEINTERFACE__            visitMethodInsn(opcode, owner, name, desc, itf)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;deprecated,public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,api,opcodes,asm5,boolean,itf,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,desc,itf,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> @Deprecated     public void visitMethodInsn(int opcode, String owner, String name,             String desc);1505821772;Visits a method instruction. A method instruction is an instruction that_invokes a method.__@param opcode_the opcode of the type instruction to be visited. This opcode_is either INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or_INVOKEINTERFACE._@param owner_the internal name of the method's owner class (see_{@link Type#getInternalName() getInternalName})._@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type}).;@Deprecated_    public void visitMethodInsn(int opcode, String owner, String name,_            String desc) {_        if (api >= Opcodes.ASM5) {_            boolean itf = opcode == Opcodes.INVOKEINTERFACE__            visitMethodInsn(opcode, owner, name, desc, itf)__            return__        }_        if (mv != null) {_            mv.visitMethodInsn(opcode, owner, name, desc)__        }_    };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,get,internal,name,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type;deprecated,public,void,visit,method,insn,int,opcode,string,owner,string,name,string,desc,if,api,opcodes,asm5,boolean,itf,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,desc,itf,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,desc
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1366718246;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1367955086;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1395273982;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1397644526;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1483093254;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitMaxs(int maxStack, int maxLocals);1505821772;Visits the maximum stack size and the maximum number of local variables_of the method.__@param maxStack_maximum stack size of the method._@param maxLocals_maximum number of local variables for the method.;public void visitMaxs(int maxStack, int maxLocals) {_        if (mv != null) {_            mv.visitMaxs(maxStack, maxLocals)__        }_    };visits,the,maximum,stack,size,and,the,maximum,number,of,local,variables,of,the,method,param,max,stack,maximum,stack,size,of,the,method,param,max,locals,maximum,number,of,local,variables,for,the,method;public,void,visit,maxs,int,max,stack,int,max,locals,if,mv,null,mv,visit,maxs,max,stack,max,locals
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1366718246;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1367955086;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1395273982;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1397644526;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1483093254;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitIntInsn(int opcode, int operand);1505821772;Visits an instruction with a single int operand.__@param opcode_the opcode of the instruction to be visited. This opcode is_either BIPUSH, SIPUSH or NEWARRAY._@param operand_the operand of the instruction to be visited.<br>_When opcode is BIPUSH, operand value should be between_Byte.MIN_VALUE and Byte.MAX_VALUE.<br>_When opcode is SIPUSH, operand value should be between_Short.MIN_VALUE and Short.MAX_VALUE.<br>_When opcode is NEWARRAY, operand value should be one of_{@link Opcodes#T_BOOLEAN}, {@link Opcodes#T_CHAR},_{@link Opcodes#T_FLOAT}, {@link Opcodes#T_DOUBLE},_{@link Opcodes#T_BYTE}, {@link Opcodes#T_SHORT},_{@link Opcodes#T_INT} or {@link Opcodes#T_LONG}.;public void visitIntInsn(int opcode, int operand) {_        if (mv != null) {_            mv.visitIntInsn(opcode, operand)__        }_    };visits,an,instruction,with,a,single,int,operand,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,bipush,sipush,or,newarray,param,operand,the,operand,of,the,instruction,to,be,visited,br,when,opcode,is,bipush,operand,value,should,be,between,byte,and,byte,br,when,opcode,is,sipush,operand,value,should,be,between,short,and,short,br,when,opcode,is,newarray,operand,value,should,be,one,of,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes;public,void,visit,int,insn,int,opcode,int,operand,if,mv,null,mv,visit,int,insn,opcode,operand
MethodVisitor -> public void visitLdcInsn(final Object value);1531241461;Visits a LDC instruction. Note that new constant types may be added in future versions of the_Java Virtual Machine. To easily detect new constant types, implementations of this method_should check for unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else if (cst instanceof Condy) {_// ..._} else {_// throw an exception__</pre>__@param value the constant to be loaded on the stack. This parameter must be a non null {@link_Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link_Type} of OBJECT or ARRAY sort for <tt>.class</tt> constants, for classes whose version is_49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle_constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant_dynamic for classes whose version is 55.;public void visitLdcInsn(final Object value) {_    if (api < Opcodes.ASM5_        && (value instanceof Handle_            || (value instanceof Type && ((Type) value).getSort() == Type.METHOD))) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (api != Opcodes.ASM7_EXPERIMENTAL && value instanceof ConstantDynamic) {_      throw new UnsupportedOperationException("This feature requires ASM7")__    }_    if (mv != null) {_      mv.visitLdcInsn(value)__    }_  };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,if,cst,instanceof,condy,else,throw,an,exception,pre,param,value,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,a,link,type,of,method,sort,for,method,type,a,link,handle,for,method,handle,constants,for,classes,whose,version,is,51,or,a,link,constant,dynamic,for,a,constant,dynamic,for,classes,whose,version,is,55;public,void,visit,ldc,insn,final,object,value,if,api,opcodes,asm5,value,instanceof,handle,value,instanceof,type,type,value,get,sort,type,method,throw,new,unsupported,operation,exception,if,api,opcodes,value,instanceof,constant,dynamic,throw,new,unsupported,operation,exception,this,feature,requires,asm7,if,mv,null,mv,visit,ldc,insn,value
MethodVisitor -> public void visitLdcInsn(final Object value);1533573221;Visits a LDC instruction. Note that new constant types may be added in future versions of the_Java Virtual Machine. To easily detect new constant types, implementations of this method_should check for unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else if (cst instanceof ConstantDynamic) {_// ..._} else {_// throw an exception__</pre>__@param value the constant to be loaded on the stack. This parameter must be a non null {@link_Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link_Type} of OBJECT or ARRAY sort for <tt>.class</tt> constants, for classes whose version is_49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle_constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant_dynamic for classes whose version is 55.;public void visitLdcInsn(final Object value) {_    if (api < Opcodes.ASM5_        && (value instanceof Handle_            || (value instanceof Type && ((Type) value).getSort() == Type.METHOD))) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (api != Opcodes.ASM7_EXPERIMENTAL && value instanceof ConstantDynamic) {_      throw new UnsupportedOperationException("This feature requires ASM7")__    }_    if (mv != null) {_      mv.visitLdcInsn(value)__    }_  };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,if,cst,instanceof,constant,dynamic,else,throw,an,exception,pre,param,value,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,a,link,type,of,method,sort,for,method,type,a,link,handle,for,method,handle,constants,for,classes,whose,version,is,51,or,a,link,constant,dynamic,for,a,constant,dynamic,for,classes,whose,version,is,55;public,void,visit,ldc,insn,final,object,value,if,api,opcodes,asm5,value,instanceof,handle,value,instanceof,type,type,value,get,sort,type,method,throw,new,unsupported,operation,exception,if,api,opcodes,value,instanceof,constant,dynamic,throw,new,unsupported,operation,exception,this,feature,requires,asm7,if,mv,null,mv,visit,ldc,insn,value
MethodVisitor -> public void visitLdcInsn(final Object value);1536664245;Visits a LDC instruction. Note that new constant types may be added in future versions of the_Java Virtual Machine. To easily detect new constant types, implementations of this method_should check for unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else if (cst instanceof ConstantDynamic) {_// ..._} else {_// throw an exception__</pre>__@param value the constant to be loaded on the stack. This parameter must be a non null {@link_Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link_Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is_49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle_constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant_dynamic for classes whose version is 55.;public void visitLdcInsn(final Object value) {_    if (api < Opcodes.ASM5_        && (value instanceof Handle_            || (value instanceof Type && ((Type) value).getSort() == Type.METHOD))) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (api != Opcodes.ASM7 && value instanceof ConstantDynamic) {_      throw new UnsupportedOperationException("This feature requires ASM7")__    }_    if (mv != null) {_      mv.visitLdcInsn(value)__    }_  };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,if,cst,instanceof,constant,dynamic,else,throw,an,exception,pre,param,value,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,code,class,constants,for,classes,whose,version,is,49,a,link,type,of,method,sort,for,method,type,a,link,handle,for,method,handle,constants,for,classes,whose,version,is,51,or,a,link,constant,dynamic,for,a,constant,dynamic,for,classes,whose,version,is,55;public,void,visit,ldc,insn,final,object,value,if,api,opcodes,asm5,value,instanceof,handle,value,instanceof,type,type,value,get,sort,type,method,throw,new,unsupported,operation,exception,if,api,opcodes,asm7,value,instanceof,constant,dynamic,throw,new,unsupported,operation,exception,this,feature,requires,asm7,if,mv,null,mv,visit,ldc,insn,value
MethodVisitor -> public void visitLdcInsn(final Object value);1537204147;Visits a LDC instruction. Note that new constant types may be added in future versions of the_Java Virtual Machine. To easily detect new constant types, implementations of this method_should check for unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else if (cst instanceof ConstantDynamic) {_// ..._} else {_// throw an exception__</pre>__@param value the constant to be loaded on the stack. This parameter must be a non null {@link_Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link_Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is_49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle_constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant_dynamic for classes whose version is 55.;public void visitLdcInsn(final Object value) {_    if (api < Opcodes.ASM5_        && (value instanceof Handle_            || (value instanceof Type && ((Type) value).getSort() == Type.METHOD))) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (api != Opcodes.ASM7 && value instanceof ConstantDynamic) {_      throw new UnsupportedOperationException("This feature requires ASM7")__    }_    if (mv != null) {_      mv.visitLdcInsn(value)__    }_  };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,if,cst,instanceof,constant,dynamic,else,throw,an,exception,pre,param,value,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,code,class,constants,for,classes,whose,version,is,49,a,link,type,of,method,sort,for,method,type,a,link,handle,for,method,handle,constants,for,classes,whose,version,is,51,or,a,link,constant,dynamic,for,a,constant,dynamic,for,classes,whose,version,is,55;public,void,visit,ldc,insn,final,object,value,if,api,opcodes,asm5,value,instanceof,handle,value,instanceof,type,type,value,get,sort,type,method,throw,new,unsupported,operation,exception,if,api,opcodes,asm7,value,instanceof,constant,dynamic,throw,new,unsupported,operation,exception,this,feature,requires,asm7,if,mv,null,mv,visit,ldc,insn,value
MethodVisitor -> public void visitLineNumber(int line, Label start);1366718246;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(int line, Label start);1367955086;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(int line, Label start);1395273982;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(int line, Label start);1397644526;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(int line, Label start);1483093254;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitLineNumber(int line, Label start);1505821772;Visits a line number declaration.__@param line_a line number. This number refers to the source file from_which the class was compiled._@param start_the first instruction corresponding to this line number._@throws IllegalArgumentException_if <tt>start</tt> has not already been visited by this_visitor (by the {@link #visitLabel visitLabel} method).;public void visitLineNumber(int line, Label start) {_        if (mv != null) {_            mv.visitLineNumber(line, start)__        }_    };visits,a,line,number,declaration,param,line,a,line,number,this,number,refers,to,the,source,file,from,which,the,class,was,compiled,param,start,the,first,instruction,corresponding,to,this,line,number,throws,illegal,argument,exception,if,tt,start,tt,has,not,already,been,visited,by,this,visitor,by,the,link,visit,label,visit,label,method;public,void,visit,line,number,int,line,label,start,if,mv,null,mv,visit,line,number,line,start
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1366718246;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1367955086;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1395273982;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1397644526;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1483093254;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,             Object... bsmArgs);1505821772;Visits an invokedynamic instruction.__@param name_the method's name._@param desc_the method's descriptor (see {@link Type Type})._@param bsm_the bootstrap method._@param bsmArgs_the bootstrap method constant arguments. Each argument must be_an {@link Integer}, {@link Float}, {@link Long},_{@link Double}, {@link String}, {@link Type} or {@link Handle}_value. This method is allowed to modify the content of the_array so a caller should expect that this array may change.;public void visitInvokeDynamicInsn(String name, String desc, Handle bsm,_            Object... bsmArgs) {_        if (mv != null) {_            mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs)__        }_    };visits,an,invokedynamic,instruction,param,name,the,method,s,name,param,desc,the,method,s,descriptor,see,link,type,type,param,bsm,the,bootstrap,method,param,bsm,args,the,bootstrap,method,constant,arguments,each,argument,must,be,an,link,integer,link,float,link,long,link,double,link,string,link,type,or,link,handle,value,this,method,is,allowed,to,modify,the,content,of,the,array,so,a,caller,should,expect,that,this,array,may,change;public,void,visit,invoke,dynamic,insn,string,name,string,desc,handle,bsm,object,bsm,args,if,mv,null,mv,visit,invoke,dynamic,insn,name,desc,bsm,bsm,args
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1366718246;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1367955086;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1395273982;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1397644526;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1483093254;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels);1505821772;Visits a LOOKUPSWITCH instruction.__@param dflt_beginning of the default handler block._@param keys_the values of the keys._@param labels_beginnings of the handler blocks. <tt>labels[i]</tt> is the_beginning of the handler block for the <tt>keys[i]</tt> key.;public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {_        if (mv != null) {_            mv.visitLookupSwitchInsn(dflt, keys, labels)__        }_    };visits,a,lookupswitch,instruction,param,dflt,beginning,of,the,default,handler,block,param,keys,the,values,of,the,keys,param,labels,beginnings,of,the,handler,blocks,tt,labels,i,tt,is,the,beginning,of,the,handler,block,for,the,tt,keys,i,tt,key;public,void,visit,lookup,switch,insn,label,dflt,int,keys,label,labels,if,mv,null,mv,visit,lookup,switch,insn,dflt,keys,labels
MethodVisitor -> public void visitLdcInsn(Object cst);1366718246;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public void visitLdcInsn(Object cst);1367955086;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre class="code">_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,class,code,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public void visitLdcInsn(Object cst);1395273982;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public void visitLdcInsn(Object cst);1397644526;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public void visitLdcInsn(Object cst);1483093254;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public void visitLdcInsn(Object cst);1505821772;Visits a LDC instruction. Note that new constant types may be added in_future versions of the Java Virtual Machine. To easily detect new_constant types, implementations of this method should check for_unexpected constant types, like this:__<pre>_if (cst instanceof Integer) {_// ..._} else if (cst instanceof Float) {_// ..._} else if (cst instanceof Long) {_// ..._} else if (cst instanceof Double) {_// ..._} else if (cst instanceof String) {_// ..._} else if (cst instanceof Type) {_int sort = ((Type) cst).getSort()__if (sort == Type.OBJECT) {_// ..._} else if (sort == Type.ARRAY) {_// ..._} else if (sort == Type.METHOD) {_// ..._} else {_// throw an exception__} else if (cst instanceof Handle) {_// ..._} else {_// throw an exception__</pre>__@param cst_the constant to be loaded on the stack. This parameter must be_a non null {@link Integer}, a {@link Float}, a {@link Long}, a_{@link Double}, a {@link String}, a {@link Type} of OBJECT or_ARRAY sort for <tt>.class</tt> constants, for classes whose_version is 49.0, a {@link Type} of METHOD sort or a_{@link Handle} for MethodType and MethodHandle constants, for_classes whose version is 51.0.;public void visitLdcInsn(Object cst) {_        if (mv != null) {_            mv.visitLdcInsn(cst)__        }_    };visits,a,ldc,instruction,note,that,new,constant,types,may,be,added,in,future,versions,of,the,java,virtual,machine,to,easily,detect,new,constant,types,implementations,of,this,method,should,check,for,unexpected,constant,types,like,this,pre,if,cst,instanceof,integer,else,if,cst,instanceof,float,else,if,cst,instanceof,long,else,if,cst,instanceof,double,else,if,cst,instanceof,string,else,if,cst,instanceof,type,int,sort,type,cst,get,sort,if,sort,type,object,else,if,sort,type,array,else,if,sort,type,method,else,throw,an,exception,else,if,cst,instanceof,handle,else,throw,an,exception,pre,param,cst,the,constant,to,be,loaded,on,the,stack,this,parameter,must,be,a,non,null,link,integer,a,link,float,a,link,long,a,link,double,a,link,string,a,link,type,of,object,or,array,sort,for,tt,class,tt,constants,for,classes,whose,version,is,49,0,a,link,type,of,method,sort,or,a,link,handle,for,method,type,and,method,handle,constants,for,classes,whose,version,is,51,0;public,void,visit,ldc,insn,object,cst,if,mv,null,mv,visit,ldc,insn,cst
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1531241461;Visits an annotation on a type in the method signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link_TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link_TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link_TypeReference#THROWS}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1533573221;Visits an annotation on a type in the method signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link_TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link_TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link_TypeReference#THROWS}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1536664245;Visits an annotation on a type in the method signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link_TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link_TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link_TypeReference#THROWS}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTypeAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1537204147;Visits an annotation on a type in the method signature.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link_TypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link_TypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link_TypeReference#THROWS}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTypeAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,a,type,in,the,method,signature,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,link,type,reference,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,throws,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,type,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,type,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public void visitFrame(       final int type,       final int nLocal,       final Object[] local,       final int nStack,       final Object[] stack);1531241461;Visits the current state of the local variables and operand stack elements. This method must(*)_be called <i>just before</i> any instruction <b>i</b> that follows an unconditional branch_instruction such as GOTO or THROW, that is the target of a jump instruction, or that starts an_exception handler block. The visited types must describe the values of the local variables and_of the operand stack elements <i>just before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or equal to {@link_Opcodes#V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in compressed form (all frames_must use the same format, i.e. you must not mix expanded and compressed frames within a single_method):__<ul>_<li>In expanded form, all frames must have the F_NEW type._<li>In compressed form, frames are basically "deltas" from the state of the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same locals as the_previous frame and with the empty stack._<li>{@link Opcodes#F_SAME1} representing frame with exactly the same locals as the_previous frame and with single value on the stack ( <code>nStack</code> is 1 and_<code>stack[0]</code> contains value for the type of the stack item)._<li>{@link Opcodes#F_APPEND} representing frame with current locals are the same as the_locals in the previous frame, except that additional locals are defined (<code>_nLocal</code> is 1, 2 or 3 and <code>local</code> elements contains values_representing added types)._<li>{@link Opcodes#F_CHOP} representing frame with current locals are the same as the_locals in the previous frame, except that the last 1-3 locals are absent and with_the empty stack (<code>nLocals</code> is 1, 2 or 3)._<li>{@link Opcodes#F_FULL} representing complete frame data._</ul>_</ul>__<br>_In both cases the first frame, corresponding to the method's parameters and access flags, is_implicit and must not be visited. Also, it is illegal to visit two or more frames for the same_code location (i.e., at least one instruction must be visited between two calls to visitFrame).__@param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded_frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link_Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames._@param nLocal the number of local variables in the visited frame._@param local the local variable types in this frame. This array must not be modified. Primitive_types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element)._Reference types are represented by String objects (representing internal names), and_uninitialized types by Label objects (this label designates the NEW instruction that_created this uninitialized value)._@param nStack the number of operand stack elements in the visited frame._@param stack the operand stack types in this frame. This array must not be modified. Its_content has the same format as the "local" array._@throws IllegalStateException if a frame is visited just after another one, without any_instruction between the two (unless this frame is a Opcodes#F_SAME frame, in which case it_is silently ignored).;public void visitFrame(_      final int type,_      final int nLocal,_      final Object[] local,_      final int nStack,_      final Object[] stack) {_    if (mv != null) {_      mv.visitFrame(type, nLocal, local, nStack, stack)__    }_  };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,link,opcodes,representing,complete,frame,data,ul,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,final,int,type,final,int,n,local,final,object,local,final,int,n,stack,final,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(       final int type,       final int nLocal,       final Object[] local,       final int nStack,       final Object[] stack);1533573221;Visits the current state of the local variables and operand stack elements. This method must(*)_be called <i>just before</i> any instruction <b>i</b> that follows an unconditional branch_instruction such as GOTO or THROW, that is the target of a jump instruction, or that starts an_exception handler block. The visited types must describe the values of the local variables and_of the operand stack elements <i>just before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or equal to {@link_Opcodes#V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in compressed form (all frames_must use the same format, i.e. you must not mix expanded and compressed frames within a single_method):__<ul>_<li>In expanded form, all frames must have the F_NEW type._<li>In compressed form, frames are basically "deltas" from the state of the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same locals as the_previous frame and with the empty stack._<li>{@link Opcodes#F_SAME1} representing frame with exactly the same locals as the_previous frame and with single value on the stack ( <code>nStack</code> is 1 and_<code>stack[0]</code> contains value for the type of the stack item)._<li>{@link Opcodes#F_APPEND} representing frame with current locals are the same as the_locals in the previous frame, except that additional locals are defined (<code>_nLocal</code> is 1, 2 or 3 and <code>local</code> elements contains values_representing added types)._<li>{@link Opcodes#F_CHOP} representing frame with current locals are the same as the_locals in the previous frame, except that the last 1-3 locals are absent and with_the empty stack (<code>nLocals</code> is 1, 2 or 3)._<li>{@link Opcodes#F_FULL} representing complete frame data._</ul>_</ul>__<br>_In both cases the first frame, corresponding to the method's parameters and access flags, is_implicit and must not be visited. Also, it is illegal to visit two or more frames for the same_code location (i.e., at least one instruction must be visited between two calls to visitFrame).__@param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded_frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link_Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames._@param nLocal the number of local variables in the visited frame._@param local the local variable types in this frame. This array must not be modified. Primitive_types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element)._Reference types are represented by String objects (representing internal names), and_uninitialized types by Label objects (this label designates the NEW instruction that_created this uninitialized value)._@param nStack the number of operand stack elements in the visited frame._@param stack the operand stack types in this frame. This array must not be modified. Its_content has the same format as the "local" array._@throws IllegalStateException if a frame is visited just after another one, without any_instruction between the two (unless this frame is a Opcodes#F_SAME frame, in which case it_is silently ignored).;public void visitFrame(_      final int type,_      final int nLocal,_      final Object[] local,_      final int nStack,_      final Object[] stack) {_    if (mv != null) {_      mv.visitFrame(type, nLocal, local, nStack, stack)__    }_  };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,link,opcodes,representing,complete,frame,data,ul,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,final,int,type,final,int,n,local,final,object,local,final,int,n,stack,final,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public void visitFrame(       final int type,       final int nLocal,       final Object[] local,       final int nStack,       final Object[] stack);1536664245;Visits the current state of the local variables and operand stack elements. This method must(*)_be called <i>just before</i> any instruction <b>i</b> that follows an unconditional branch_instruction such as GOTO or THROW, that is the target of a jump instruction, or that starts an_exception handler block. The visited types must describe the values of the local variables and_of the operand stack elements <i>just before</i> <b>i</b> is executed.<br>_<br>_(*) this is mandatory only for classes whose version is greater than or equal to {@link_Opcodes#V1_6}. <br>_<br>_The frames of a method must be given either in expanded form, or in compressed form (all frames_must use the same format, i.e. you must not mix expanded and compressed frames within a single_method):__<ul>_<li>In expanded form, all frames must have the F_NEW type._<li>In compressed form, frames are basically "deltas" from the state of the previous frame:_<ul>_<li>{@link Opcodes#F_SAME} representing frame with exactly the same locals as the_previous frame and with the empty stack._<li>{@link Opcodes#F_SAME1} representing frame with exactly the same locals as the_previous frame and with single value on the stack ( <code>nStack</code> is 1 and_<code>stack[0]</code> contains value for the type of the stack item)._<li>{@link Opcodes#F_APPEND} representing frame with current locals are the same as the_locals in the previous frame, except that additional locals are defined (<code>_nLocal</code> is 1, 2 or 3 and <code>local</code> elements contains values_representing added types)._<li>{@link Opcodes#F_CHOP} representing frame with current locals are the same as the_locals in the previous frame, except that the last 1-3 locals are absent and with_the empty stack (<code>nLocals</code> is 1, 2 or 3)._<li>{@link Opcodes#F_FULL} representing complete frame data._</ul>_</ul>__<br>_In both cases the first frame, corresponding to the method's parameters and access flags, is_implicit and must not be visited. Also, it is illegal to visit two or more frames for the same_code location (i.e., at least one instruction must be visited between two calls to visitFrame).__@param type the type of this stack map frame. Must be {@link Opcodes#F_NEW} for expanded_frames, or {@link Opcodes#F_FULL}, {@link Opcodes#F_APPEND}, {@link Opcodes#F_CHOP}, {@link_Opcodes#F_SAME} or {@link Opcodes#F_APPEND}, {@link Opcodes#F_SAME1} for compressed frames._@param nLocal the number of local variables in the visited frame._@param local the local variable types in this frame. This array must not be modified. Primitive_types are represented by {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link_Opcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL} or_{@link Opcodes#UNINITIALIZED_THIS} (long and double are represented by a single element)._Reference types are represented by String objects (representing internal names), and_uninitialized types by Label objects (this label designates the NEW instruction that_created this uninitialized value)._@param nStack the number of operand stack elements in the visited frame._@param stack the operand stack types in this frame. This array must not be modified. Its_content has the same format as the "local" array._@throws IllegalStateException if a frame is visited just after another one, without any_instruction between the two (unless this frame is a Opcodes#F_SAME frame, in which case it_is silently ignored).;public void visitFrame(_      final int type,_      final int nLocal,_      final Object[] local,_      final int nStack,_      final Object[] stack) {_    if (mv != null) {_      mv.visitFrame(type, nLocal, local, nStack, stack)__    }_  };visits,the,current,state,of,the,local,variables,and,operand,stack,elements,this,method,must,be,called,i,just,before,i,any,instruction,b,i,b,that,follows,an,unconditional,branch,instruction,such,as,goto,or,throw,that,is,the,target,of,a,jump,instruction,or,that,starts,an,exception,handler,block,the,visited,types,must,describe,the,values,of,the,local,variables,and,of,the,operand,stack,elements,i,just,before,i,b,i,b,is,executed,br,br,this,is,mandatory,only,for,classes,whose,version,is,greater,than,or,equal,to,link,opcodes,br,br,the,frames,of,a,method,must,be,given,either,in,expanded,form,or,in,compressed,form,all,frames,must,use,the,same,format,i,e,you,must,not,mix,expanded,and,compressed,frames,within,a,single,method,ul,li,in,expanded,form,all,frames,must,have,the,type,li,in,compressed,form,frames,are,basically,deltas,from,the,state,of,the,previous,frame,ul,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,the,empty,stack,li,link,opcodes,representing,frame,with,exactly,the,same,locals,as,the,previous,frame,and,with,single,value,on,the,stack,code,n,stack,code,is,1,and,code,stack,0,code,contains,value,for,the,type,of,the,stack,item,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,additional,locals,are,defined,code,n,local,code,is,1,2,or,3,and,code,local,code,elements,contains,values,representing,added,types,li,link,opcodes,representing,frame,with,current,locals,are,the,same,as,the,locals,in,the,previous,frame,except,that,the,last,1,3,locals,are,absent,and,with,the,empty,stack,code,n,locals,code,is,1,2,or,3,li,link,opcodes,representing,complete,frame,data,ul,ul,br,in,both,cases,the,first,frame,corresponding,to,the,method,s,parameters,and,access,flags,is,implicit,and,must,not,be,visited,also,it,is,illegal,to,visit,two,or,more,frames,for,the,same,code,location,i,e,at,least,one,instruction,must,be,visited,between,two,calls,to,visit,frame,param,type,the,type,of,this,stack,map,frame,must,be,link,opcodes,for,expanded,frames,or,link,opcodes,link,opcodes,link,opcodes,link,opcodes,or,link,opcodes,link,opcodes,for,compressed,frames,param,n,local,the,number,of,local,variables,in,the,visited,frame,param,local,the,local,variable,types,in,this,frame,this,array,must,not,be,modified,primitive,types,are,represented,by,link,opcodes,top,link,opcodes,integer,link,opcodes,float,link,opcodes,long,link,opcodes,double,link,opcodes,null,or,link,opcodes,long,and,double,are,represented,by,a,single,element,reference,types,are,represented,by,string,objects,representing,internal,names,and,uninitialized,types,by,label,objects,this,label,designates,the,new,instruction,that,created,this,uninitialized,value,param,n,stack,the,number,of,operand,stack,elements,in,the,visited,frame,param,stack,the,operand,stack,types,in,this,frame,this,array,must,not,be,modified,its,content,has,the,same,format,as,the,local,array,throws,illegal,state,exception,if,a,frame,is,visited,just,after,another,one,without,any,instruction,between,the,two,unless,this,frame,is,a,opcodes,frame,in,which,case,it,is,silently,ignored;public,void,visit,frame,final,int,type,final,int,n,local,final,object,local,final,int,n,stack,final,object,stack,if,mv,null,mv,visit,frame,type,n,local,local,n,stack,stack
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1531241461;Visits an annotation on an exception handler type. This method must be called <i>after</i> the_{@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times_for the same exception handler.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1533573221;Visits an annotation on an exception handler type. This method must be called <i>after</i> the_{@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times_for the same exception handler.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be <tt>null</tt> if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible <tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1536664245;Visits an annotation on an exception handler type. This method must be called <i>after</i> the_{@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times_for the same exception handler.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public AnnotationVisitor visitTryCatchAnnotation(       final int typeRef, final TypePath typePath, final String descriptor, final boolean visible);1537204147;Visits an annotation on an exception handler type. This method must be called <i>after</i> the_{@link #visitTryCatchBlock} for the annotated exception handler. It can be called several times_for the same exception handler.__@param typeRef a reference to the annotated type. The sort of this type reference must be_{@link TypeReference#EXCEPTION_PARAMETER}. See {@link TypeReference}._@param typePath the path to the annotated type argument, wildcard bound, array element type, or_static inner type within 'typeRef'. May be {@literal null} if the annotation targets_'typeRef' as a whole._@param descriptor the class descriptor of the annotation class._@param visible {@literal true} if the annotation is visible at runtime._@return a visitor to visit the annotation values, or {@literal null} if this visitor is not_interested in visiting this annotation.;public AnnotationVisitor visitTryCatchAnnotation(_      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      return mv.visitTryCatchAnnotation(typeRef, typePath, descriptor, visible)__    }_    return null__  };visits,an,annotation,on,an,exception,handler,type,this,method,must,be,called,i,after,i,the,link,visit,try,catch,block,for,the,annotated,exception,handler,it,can,be,called,several,times,for,the,same,exception,handler,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,literal,null,if,the,annotation,targets,type,ref,as,a,whole,param,descriptor,the,class,descriptor,of,the,annotation,class,param,visible,literal,true,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,literal,null,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,try,catch,annotation,final,int,type,ref,final,type,path,type,path,final,string,descriptor,final,boolean,visible,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,return,mv,visit,try,catch,annotation,type,ref,type,path,descriptor,visible,return,null
MethodVisitor -> public void visitVarInsn(int opcode, int var);1366718246;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(int opcode, int var);1367955086;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(int opcode, int var);1395273982;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(int opcode, int var);1397644526;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(int opcode, int var);1483093254;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitVarInsn(int opcode, int var);1505821772;Visits a local variable instruction. A local variable instruction is an_instruction that loads or stores the value of a local variable.__@param opcode_the opcode of the local variable instruction to be visited._This opcode is either ILOAD, LLOAD, FLOAD, DLOAD, ALOAD,_ISTORE, LSTORE, FSTORE, DSTORE, ASTORE or RET._@param var_the operand of the instruction to be visited. This operand is_the index of a local variable.;public void visitVarInsn(int opcode, int var) {_        if (mv != null) {_            mv.visitVarInsn(opcode, var)__        }_    };visits,a,local,variable,instruction,a,local,variable,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,local,variable,param,opcode,the,opcode,of,the,local,variable,instruction,to,be,visited,this,opcode,is,either,iload,lload,fload,dload,aload,istore,lstore,fstore,dstore,astore,or,ret,param,var,the,operand,of,the,instruction,to,be,visited,this,operand,is,the,index,of,a,local,variable;public,void,visit,var,insn,int,opcode,int,var,if,mv,null,mv,visit,var,insn,opcode,var
MethodVisitor -> public void visitFieldInsn(       final int opcode, final String owner, final String name, final String descriptor);1531241461;Visits a field instruction. A field instruction is an instruction that loads or stores the_value of a field of an object.__@param opcode the opcode of the type instruction to be visited. This opcode is either_GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner the internal name of the field's owner class (see {@link Type#getInternalName()})._@param name the field's name._@param descriptor the field's descriptor (see {@link Type}).;public void visitFieldInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (mv != null) {_      mv.visitFieldInsn(opcode, owner, name, descriptor)__    }_  };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type;public,void,visit,field,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,mv,null,mv,visit,field,insn,opcode,owner,name,descriptor
MethodVisitor -> public void visitFieldInsn(       final int opcode, final String owner, final String name, final String descriptor);1533573221;Visits a field instruction. A field instruction is an instruction that loads or stores the_value of a field of an object.__@param opcode the opcode of the type instruction to be visited. This opcode is either_GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner the internal name of the field's owner class (see {@link Type#getInternalName()})._@param name the field's name._@param descriptor the field's descriptor (see {@link Type}).;public void visitFieldInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (mv != null) {_      mv.visitFieldInsn(opcode, owner, name, descriptor)__    }_  };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type;public,void,visit,field,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,mv,null,mv,visit,field,insn,opcode,owner,name,descriptor
MethodVisitor -> public void visitFieldInsn(       final int opcode, final String owner, final String name, final String descriptor);1536664245;Visits a field instruction. A field instruction is an instruction that loads or stores the_value of a field of an object.__@param opcode the opcode of the type instruction to be visited. This opcode is either_GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner the internal name of the field's owner class (see {@link Type#getInternalName()})._@param name the field's name._@param descriptor the field's descriptor (see {@link Type}).;public void visitFieldInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (mv != null) {_      mv.visitFieldInsn(opcode, owner, name, descriptor)__    }_  };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type;public,void,visit,field,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,mv,null,mv,visit,field,insn,opcode,owner,name,descriptor
MethodVisitor -> public void visitFieldInsn(       final int opcode, final String owner, final String name, final String descriptor);1537204147;Visits a field instruction. A field instruction is an instruction that loads or stores the_value of a field of an object.__@param opcode the opcode of the type instruction to be visited. This opcode is either_GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD._@param owner the internal name of the field's owner class (see {@link Type#getInternalName()})._@param name the field's name._@param descriptor the field's descriptor (see {@link Type}).;public void visitFieldInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (mv != null) {_      mv.visitFieldInsn(opcode, owner, name, descriptor)__    }_  };visits,a,field,instruction,a,field,instruction,is,an,instruction,that,loads,or,stores,the,value,of,a,field,of,an,object,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,getstatic,putstatic,getfield,or,putfield,param,owner,the,internal,name,of,the,field,s,owner,class,see,link,type,get,internal,name,param,name,the,field,s,name,param,descriptor,the,field,s,descriptor,see,link,type;public,void,visit,field,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,mv,null,mv,visit,field,insn,opcode,owner,name,descriptor
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor methodVisitor);1531241461;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}._@param methodVisitor the method visitor to which this visitor must delegate method calls. May_be null.;public MethodVisitor(final int api, final MethodVisitor methodVisitor) {_    if (api != Opcodes.ASM6_        && api != Opcodes.ASM5_        && api != Opcodes.ASM4_        && api != Opcodes.ASM7_EXPERIMENTAL) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = methodVisitor__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,param,method,visitor,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,method,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,throw,new,illegal,argument,exception,this,api,api,this,mv,method,visitor
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor methodVisitor);1533573221;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link_Opcodes#ASM7_EXPERIMENTAL}._@param methodVisitor the method visitor to which this visitor must delegate method calls. May_be null.;public MethodVisitor(final int api, final MethodVisitor methodVisitor) {_    if (api != Opcodes.ASM6_        && api != Opcodes.ASM5_        && api != Opcodes.ASM4_        && api != Opcodes.ASM7_EXPERIMENTAL) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = methodVisitor__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,param,method,visitor,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,method,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,throw,new,illegal,argument,exception,this,api,api,this,mv,method,visitor
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor methodVisitor);1536664245;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}._@param methodVisitor the method visitor to which this visitor must delegate method calls. May_be null.;public MethodVisitor(final int api, final MethodVisitor methodVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = methodVisitor__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7,param,method,visitor,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,method,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,asm7,throw,new,illegal,argument,exception,this,api,api,this,mv,method,visitor
MethodVisitor -> public MethodVisitor(final int api, final MethodVisitor methodVisitor);1537204147;Constructs a new {@link MethodVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link_Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}._@param methodVisitor the method visitor to which this visitor must delegate method calls. May_be null.;public MethodVisitor(final int api, final MethodVisitor methodVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = methodVisitor__  };constructs,a,new,link,method,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm4,link,opcodes,asm5,link,opcodes,asm6,or,link,opcodes,asm7,param,method,visitor,the,method,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,method,visitor,final,int,api,final,method,visitor,method,visitor,if,api,opcodes,asm6,api,opcodes,asm5,api,opcodes,asm4,api,opcodes,asm7,throw,new,illegal,argument,exception,this,api,api,this,mv,method,visitor
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1395273982;Visits an annotation on an instruction. This method must be called just_<i>after</i> the annotated instruction. It can be called several times_for the same instruction.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#INSTANCEOF INSTANCEOF},_{@link TypeReference#NEW NEW},_{@link TypeReference#CONSTRUCTOR_REFERENCE_CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE_METHOD_REFERENCE}, {@link TypeReference#CAST CAST},_{@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT_METHOD_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or_{@link TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT_METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_        if (api < Opcodes.ASM5) {_            throw new RuntimeException()__        }_        if (mv != null) {_            return mv.visitInsnAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,instanceof,link,type,reference,new,new,link,type,reference,link,type,reference,link,type,reference,cast,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,api,opcodes,asm5,throw,new,runtime,exception,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1397644526;Visits an annotation on an instruction. This method must be called just_<i>after</i> the annotated instruction. It can be called several times_for the same instruction.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#INSTANCEOF INSTANCEOF},_{@link TypeReference#NEW NEW},_{@link TypeReference#CONSTRUCTOR_REFERENCE_CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE_METHOD_REFERENCE}, {@link TypeReference#CAST CAST},_{@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT_METHOD_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or_{@link TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT_METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitInsnAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,instanceof,link,type,reference,new,new,link,type,reference,link,type,reference,link,type,reference,cast,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1483093254;Visits an annotation on an instruction. This method must be called just_<i>after</i> the annotated instruction. It can be called several times_for the same instruction.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#INSTANCEOF INSTANCEOF},_{@link TypeReference#NEW NEW},_{@link TypeReference#CONSTRUCTOR_REFERENCE_CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE_METHOD_REFERENCE}, {@link TypeReference#CAST CAST},_{@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT_METHOD_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or_{@link TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT_METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitInsnAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,instanceof,link,type,reference,new,new,link,type,reference,link,type,reference,link,type,reference,cast,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public AnnotationVisitor visitInsnAnnotation(int typeRef,             TypePath typePath, String desc, boolean visible);1505821772;Visits an annotation on an instruction. This method must be called just_<i>after</i> the annotated instruction. It can be called several times_for the same instruction.__@param typeRef_a reference to the annotated type. The sort of this type_reference must be {@link TypeReference#INSTANCEOF INSTANCEOF},_{@link TypeReference#NEW NEW},_{@link TypeReference#CONSTRUCTOR_REFERENCE_CONSTRUCTOR_REFERENCE}, {@link TypeReference#METHOD_REFERENCE_METHOD_REFERENCE}, {@link TypeReference#CAST CAST},_{@link TypeReference#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#METHOD_INVOCATION_TYPE_ARGUMENT_METHOD_INVOCATION_TYPE_ARGUMENT},_{@link TypeReference#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or_{@link TypeReference#METHOD_REFERENCE_TYPE_ARGUMENT_METHOD_REFERENCE_TYPE_ARGUMENT}. See {@link TypeReference}._@param typePath_the path to the annotated type argument, wildcard bound, array_element type, or static inner type within 'typeRef'. May be_<tt>null</tt> if the annotation targets 'typeRef' as a whole._@param desc_the class descriptor of the annotation class._@param visible_<tt>true</tt> if the annotation is visible at runtime._@return a visitor to visit the annotation values, or <tt>null</tt> if_this visitor is not interested in visiting this annotation.;public AnnotationVisitor visitInsnAnnotation(int typeRef,_            TypePath typePath, String desc, boolean visible) {_		_        if (mv != null) {_            return mv.visitInsnAnnotation(typeRef, typePath, desc, visible)__        }_        return null__    };visits,an,annotation,on,an,instruction,this,method,must,be,called,just,i,after,i,the,annotated,instruction,it,can,be,called,several,times,for,the,same,instruction,param,type,ref,a,reference,to,the,annotated,type,the,sort,of,this,type,reference,must,be,link,type,reference,instanceof,instanceof,link,type,reference,new,new,link,type,reference,link,type,reference,link,type,reference,cast,cast,link,type,reference,link,type,reference,link,type,reference,or,link,type,reference,see,link,type,reference,param,type,path,the,path,to,the,annotated,type,argument,wildcard,bound,array,element,type,or,static,inner,type,within,type,ref,may,be,tt,null,tt,if,the,annotation,targets,type,ref,as,a,whole,param,desc,the,class,descriptor,of,the,annotation,class,param,visible,tt,true,tt,if,the,annotation,is,visible,at,runtime,return,a,visitor,to,visit,the,annotation,values,or,tt,null,tt,if,this,visitor,is,not,interested,in,visiting,this,annotation;public,annotation,visitor,visit,insn,annotation,int,type,ref,type,path,type,path,string,desc,boolean,visible,if,mv,null,return,mv,visit,insn,annotation,type,ref,type,path,desc,visible,return,null
MethodVisitor -> public void visitInsn(final int opcode);1531241461;Visits a zero operand instruction.__@param opcode the opcode of the instruction to be visited. This opcode is either NOP,_ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,_LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,_FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,_AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,_SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,_FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,_LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,_D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.;public void visitInsn(final int opcode) {_    if (mv != null) {_      mv.visitInsn(opcode)__    }_  };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,final,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(final int opcode);1533573221;Visits a zero operand instruction.__@param opcode the opcode of the instruction to be visited. This opcode is either NOP,_ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,_LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,_FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,_AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,_SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,_FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,_LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,_D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.;public void visitInsn(final int opcode) {_    if (mv != null) {_      mv.visitInsn(opcode)__    }_  };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,final,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(final int opcode);1536664245;Visits a zero operand instruction.__@param opcode the opcode of the instruction to be visited. This opcode is either NOP,_ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,_LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,_FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,_AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,_SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,_FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,_LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,_D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.;public void visitInsn(final int opcode) {_    if (mv != null) {_      mv.visitInsn(opcode)__    }_  };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,final,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> public void visitInsn(final int opcode);1537204147;Visits a zero operand instruction.__@param opcode the opcode of the instruction to be visited. This opcode is either NOP,_ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,_LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,_FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,_AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,_SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,_FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,_LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,_D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,_DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.;public void visitInsn(final int opcode) {_    if (mv != null) {_      mv.visitInsn(opcode)__    }_  };visits,a,zero,operand,instruction,param,opcode,the,opcode,of,the,instruction,to,be,visited,this,opcode,is,either,nop,iaload,laload,faload,daload,aaload,baload,caload,saload,iastore,lastore,fastore,dastore,aastore,bastore,castore,sastore,pop,pop2,dup,dup2,swap,iadd,ladd,fadd,dadd,isub,lsub,fsub,dsub,imul,lmul,fmul,dmul,idiv,ldiv,fdiv,ddiv,irem,lrem,frem,drem,ineg,lneg,fneg,dneg,ishl,lshl,ishr,lshr,iushr,lushr,iand,land,ior,lor,ixor,lxor,i2l,i2f,i2d,l2i,l2f,l2d,f2i,f2l,f2d,d2i,d2l,d2f,i2b,i2c,i2s,lcmp,fcmpl,fcmpg,dcmpl,dcmpg,ireturn,lreturn,freturn,dreturn,areturn,return,arraylength,athrow,monitorenter,or,monitorexit;public,void,visit,insn,final,int,opcode,if,mv,null,mv,visit,insn,opcode
MethodVisitor -> @Deprecated   public void visitMethodInsn(       final int opcode, final String owner, final String name, final String descriptor);1531241461;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@deprecated;@Deprecated_  public void visitMethodInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (api >= Opcodes.ASM5) {_      boolean isInterface = opcode == Opcodes.INVOKEINTERFACE__      visitMethodInsn(opcode, owner, name, descriptor, isInterface)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,deprecated;deprecated,public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,api,opcodes,asm5,boolean,is,interface,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,descriptor,is,interface,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor
MethodVisitor -> @Deprecated   public void visitMethodInsn(       final int opcode, final String owner, final String name, final String descriptor);1533573221;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@deprecated;@Deprecated_  public void visitMethodInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (api >= Opcodes.ASM5) {_      boolean isInterface = opcode == Opcodes.INVOKEINTERFACE__      visitMethodInsn(opcode, owner, name, descriptor, isInterface)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,deprecated;deprecated,public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,api,opcodes,asm5,boolean,is,interface,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,descriptor,is,interface,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor
MethodVisitor -> @Deprecated   public void visitMethodInsn(       final int opcode, final String owner, final String name, final String descriptor);1536664245;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@deprecated;@Deprecated_  public void visitMethodInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (api >= Opcodes.ASM5) {_      boolean isInterface = opcode == Opcodes.INVOKEINTERFACE__      visitMethodInsn(opcode, owner, name, descriptor, isInterface)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,deprecated;deprecated,public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,api,opcodes,asm5,boolean,is,interface,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,descriptor,is,interface,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor
MethodVisitor -> @Deprecated   public void visitMethodInsn(       final int opcode, final String owner, final String name, final String descriptor);1537204147;Visits a method instruction. A method instruction is an instruction that invokes a method.__@param opcode the opcode of the type instruction to be visited. This opcode is either_INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE._@param owner the internal name of the method's owner class (see {@link_Type#getInternalName()})._@param name the method's name._@param descriptor the method's descriptor (see {@link Type})._@deprecated use {@link #visitMethodInsn(int, String, String, String, boolean)} instead.;@Deprecated_  public void visitMethodInsn(_      final int opcode, final String owner, final String name, final String descriptor) {_    if (api >= Opcodes.ASM5) {_      boolean isInterface = opcode == Opcodes.INVOKEINTERFACE__      visitMethodInsn(opcode, owner, name, descriptor, isInterface)__      return__    }_    if (mv != null) {_      mv.visitMethodInsn(opcode, owner, name, descriptor)__    }_  };visits,a,method,instruction,a,method,instruction,is,an,instruction,that,invokes,a,method,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,invokevirtual,invokespecial,invokestatic,or,invokeinterface,param,owner,the,internal,name,of,the,method,s,owner,class,see,link,type,get,internal,name,param,name,the,method,s,name,param,descriptor,the,method,s,descriptor,see,link,type,deprecated,use,link,visit,method,insn,int,string,string,string,boolean,instead;deprecated,public,void,visit,method,insn,final,int,opcode,final,string,owner,final,string,name,final,string,descriptor,if,api,opcodes,asm5,boolean,is,interface,opcode,opcodes,invokeinterface,visit,method,insn,opcode,owner,name,descriptor,is,interface,return,if,mv,null,mv,visit,method,insn,opcode,owner,name,descriptor
MethodVisitor -> public void visitParameter(final String name, final int access);1531241461;Visits a parameter of this method.__@param name parameter name or null if none is provided._@param access the parameter's access flags, only <tt>ACC_FINAL</tt>, <tt>ACC_SYNTHETIC</tt>_or/and <tt>ACC_MANDATED</tt> are allowed (see {@link Opcodes}).;public void visitParameter(final String name, final int access) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitParameter(name, access)__    }_  };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,final,string,name,final,int,access,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(final String name, final int access);1533573221;Visits a parameter of this method.__@param name parameter name or null if none is provided._@param access the parameter's access flags, only <tt>ACC_FINAL</tt>, <tt>ACC_SYNTHETIC</tt>_or/and <tt>ACC_MANDATED</tt> are allowed (see {@link Opcodes}).;public void visitParameter(final String name, final int access) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitParameter(name, access)__    }_  };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,tt,tt,tt,tt,or,and,tt,tt,are,allowed,see,link,opcodes;public,void,visit,parameter,final,string,name,final,int,access,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(final String name, final int access);1536664245;Visits a parameter of this method.__@param name parameter name or null if none is provided._@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}_or/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).;public void visitParameter(final String name, final int access) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitParameter(name, access)__    }_  };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,code,code,or,and,code,are,allowed,see,link,opcodes;public,void,visit,parameter,final,string,name,final,int,access,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitParameter(final String name, final int access);1537204147;Visits a parameter of this method.__@param name parameter name or null if none is provided._@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}_or/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).;public void visitParameter(final String name, final int access) {_    if (api < Opcodes.ASM5) {_      throw new UnsupportedOperationException(REQUIRES_ASM5)__    }_    if (mv != null) {_      mv.visitParameter(name, access)__    }_  };visits,a,parameter,of,this,method,param,name,parameter,name,or,null,if,none,is,provided,param,access,the,parameter,s,access,flags,only,code,code,or,and,code,are,allowed,see,link,opcodes;public,void,visit,parameter,final,string,name,final,int,access,if,api,opcodes,asm5,throw,new,unsupported,operation,exception,if,mv,null,mv,visit,parameter,name,access
MethodVisitor -> public void visitAnnotableParameterCount(final int parameterCount, final boolean visible);1531241461;Visits the number of method parameters that can have annotations. By default (i.e. when this_method is not called), all the method parameters defined by the method descriptor can have_annotations.__@param parameterCount the number of method parameters than can have annotations. This number_must be less or equal than the number of parameter types in the method descriptor. It can_be strictly less when a method has synthetic parameters and when these parameters are_ignored when computing parameter indices for the purpose of parameter annotations (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param visible <tt>true</tt> to define the number of method parameters that can have_annotations visible at runtime, <tt>false</tt> to define the number of method parameters_that can have annotations invisible at runtime.;public void visitAnnotableParameterCount(final int parameterCount, final boolean visible) {_    if (mv != null) {_      mv.visitAnnotableParameterCount(parameterCount, visible)__    }_  };visits,the,number,of,method,parameters,that,can,have,annotations,by,default,i,e,when,this,method,is,not,called,all,the,method,parameters,defined,by,the,method,descriptor,can,have,annotations,param,parameter,count,the,number,of,method,parameters,than,can,have,annotations,this,number,must,be,less,or,equal,than,the,number,of,parameter,types,in,the,method,descriptor,it,can,be,strictly,less,when,a,method,has,synthetic,parameters,and,when,these,parameters,are,ignored,when,computing,parameter,indices,for,the,purpose,of,parameter,annotations,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,visible,tt,true,tt,to,define,the,number,of,method,parameters,that,can,have,annotations,visible,at,runtime,tt,false,tt,to,define,the,number,of,method,parameters,that,can,have,annotations,invisible,at,runtime;public,void,visit,annotable,parameter,count,final,int,parameter,count,final,boolean,visible,if,mv,null,mv,visit,annotable,parameter,count,parameter,count,visible
MethodVisitor -> public void visitAnnotableParameterCount(final int parameterCount, final boolean visible);1533573221;Visits the number of method parameters that can have annotations. By default (i.e. when this_method is not called), all the method parameters defined by the method descriptor can have_annotations.__@param parameterCount the number of method parameters than can have annotations. This number_must be less or equal than the number of parameter types in the method descriptor. It can_be strictly less when a method has synthetic parameters and when these parameters are_ignored when computing parameter indices for the purpose of parameter annotations (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param visible <tt>true</tt> to define the number of method parameters that can have_annotations visible at runtime, <tt>false</tt> to define the number of method parameters_that can have annotations invisible at runtime.;public void visitAnnotableParameterCount(final int parameterCount, final boolean visible) {_    if (mv != null) {_      mv.visitAnnotableParameterCount(parameterCount, visible)__    }_  };visits,the,number,of,method,parameters,that,can,have,annotations,by,default,i,e,when,this,method,is,not,called,all,the,method,parameters,defined,by,the,method,descriptor,can,have,annotations,param,parameter,count,the,number,of,method,parameters,than,can,have,annotations,this,number,must,be,less,or,equal,than,the,number,of,parameter,types,in,the,method,descriptor,it,can,be,strictly,less,when,a,method,has,synthetic,parameters,and,when,these,parameters,are,ignored,when,computing,parameter,indices,for,the,purpose,of,parameter,annotations,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,visible,tt,true,tt,to,define,the,number,of,method,parameters,that,can,have,annotations,visible,at,runtime,tt,false,tt,to,define,the,number,of,method,parameters,that,can,have,annotations,invisible,at,runtime;public,void,visit,annotable,parameter,count,final,int,parameter,count,final,boolean,visible,if,mv,null,mv,visit,annotable,parameter,count,parameter,count,visible
MethodVisitor -> public void visitAnnotableParameterCount(final int parameterCount, final boolean visible);1536664245;Visits the number of method parameters that can have annotations. By default (i.e. when this_method is not called), all the method parameters defined by the method descriptor can have_annotations.__@param parameterCount the number of method parameters than can have annotations. This number_must be less or equal than the number of parameter types in the method descriptor. It can_be strictly less when a method has synthetic parameters and when these parameters are_ignored when computing parameter indices for the purpose of parameter annotations (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param visible {@literal true} to define the number of method parameters that can have_annotations visible at runtime, {@literal false} to define the number of method parameters_that can have annotations invisible at runtime.;public void visitAnnotableParameterCount(final int parameterCount, final boolean visible) {_    if (mv != null) {_      mv.visitAnnotableParameterCount(parameterCount, visible)__    }_  };visits,the,number,of,method,parameters,that,can,have,annotations,by,default,i,e,when,this,method,is,not,called,all,the,method,parameters,defined,by,the,method,descriptor,can,have,annotations,param,parameter,count,the,number,of,method,parameters,than,can,have,annotations,this,number,must,be,less,or,equal,than,the,number,of,parameter,types,in,the,method,descriptor,it,can,be,strictly,less,when,a,method,has,synthetic,parameters,and,when,these,parameters,are,ignored,when,computing,parameter,indices,for,the,purpose,of,parameter,annotations,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,visible,literal,true,to,define,the,number,of,method,parameters,that,can,have,annotations,visible,at,runtime,literal,false,to,define,the,number,of,method,parameters,that,can,have,annotations,invisible,at,runtime;public,void,visit,annotable,parameter,count,final,int,parameter,count,final,boolean,visible,if,mv,null,mv,visit,annotable,parameter,count,parameter,count,visible
MethodVisitor -> public void visitAnnotableParameterCount(final int parameterCount, final boolean visible);1537204147;Visits the number of method parameters that can have annotations. By default (i.e. when this_method is not called), all the method parameters defined by the method descriptor can have_annotations.__@param parameterCount the number of method parameters than can have annotations. This number_must be less or equal than the number of parameter types in the method descriptor. It can_be strictly less when a method has synthetic parameters and when these parameters are_ignored when computing parameter indices for the purpose of parameter annotations (see_https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18)._@param visible {@literal true} to define the number of method parameters that can have_annotations visible at runtime, {@literal false} to define the number of method parameters_that can have annotations invisible at runtime.;public void visitAnnotableParameterCount(final int parameterCount, final boolean visible) {_    if (mv != null) {_      mv.visitAnnotableParameterCount(parameterCount, visible)__    }_  };visits,the,number,of,method,parameters,that,can,have,annotations,by,default,i,e,when,this,method,is,not,called,all,the,method,parameters,defined,by,the,method,descriptor,can,have,annotations,param,parameter,count,the,number,of,method,parameters,than,can,have,annotations,this,number,must,be,less,or,equal,than,the,number,of,parameter,types,in,the,method,descriptor,it,can,be,strictly,less,when,a,method,has,synthetic,parameters,and,when,these,parameters,are,ignored,when,computing,parameter,indices,for,the,purpose,of,parameter,annotations,see,https,docs,oracle,com,javase,specs,jvms,se9,html,jvms,4,html,jvms,4,7,18,param,visible,literal,true,to,define,the,number,of,method,parameters,that,can,have,annotations,visible,at,runtime,literal,false,to,define,the,number,of,method,parameters,that,can,have,annotations,invisible,at,runtime;public,void,visit,annotable,parameter,count,final,int,parameter,count,final,boolean,visible,if,mv,null,mv,visit,annotable,parameter,count,parameter,count,visible
MethodVisitor -> public void visitTypeInsn(final int opcode, final String type);1531241461;Visits a type instruction. A type instruction is an instruction that takes the internal name of_a class as parameter.__@param opcode the opcode of the type instruction to be visited. This opcode is either NEW,_ANEWARRAY, CHECKCAST or INSTANCEOF._@param type the operand of the instruction to be visited. This operand must be the internal_name of an object or array class (see {@link Type#getInternalName()}).;public void visitTypeInsn(final int opcode, final String type) {_    if (mv != null) {_      mv.visitTypeInsn(opcode, type)__    }_  };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name;public,void,visit,type,insn,final,int,opcode,final,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(final int opcode, final String type);1533573221;Visits a type instruction. A type instruction is an instruction that takes the internal name of_a class as parameter.__@param opcode the opcode of the type instruction to be visited. This opcode is either NEW,_ANEWARRAY, CHECKCAST or INSTANCEOF._@param type the operand of the instruction to be visited. This operand must be the internal_name of an object or array class (see {@link Type#getInternalName()}).;public void visitTypeInsn(final int opcode, final String type) {_    if (mv != null) {_      mv.visitTypeInsn(opcode, type)__    }_  };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name;public,void,visit,type,insn,final,int,opcode,final,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(final int opcode, final String type);1536664245;Visits a type instruction. A type instruction is an instruction that takes the internal name of_a class as parameter.__@param opcode the opcode of the type instruction to be visited. This opcode is either NEW,_ANEWARRAY, CHECKCAST or INSTANCEOF._@param type the operand of the instruction to be visited. This operand must be the internal_name of an object or array class (see {@link Type#getInternalName()}).;public void visitTypeInsn(final int opcode, final String type) {_    if (mv != null) {_      mv.visitTypeInsn(opcode, type)__    }_  };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name;public,void,visit,type,insn,final,int,opcode,final,string,type,if,mv,null,mv,visit,type,insn,opcode,type
MethodVisitor -> public void visitTypeInsn(final int opcode, final String type);1537204147;Visits a type instruction. A type instruction is an instruction that takes the internal name of_a class as parameter.__@param opcode the opcode of the type instruction to be visited. This opcode is either NEW,_ANEWARRAY, CHECKCAST or INSTANCEOF._@param type the operand of the instruction to be visited. This operand must be the internal_name of an object or array class (see {@link Type#getInternalName()}).;public void visitTypeInsn(final int opcode, final String type) {_    if (mv != null) {_      mv.visitTypeInsn(opcode, type)__    }_  };visits,a,type,instruction,a,type,instruction,is,an,instruction,that,takes,the,internal,name,of,a,class,as,parameter,param,opcode,the,opcode,of,the,type,instruction,to,be,visited,this,opcode,is,either,new,anewarray,checkcast,or,instanceof,param,type,the,operand,of,the,instruction,to,be,visited,this,operand,must,be,the,internal,name,of,an,object,or,array,class,see,link,type,get,internal,name;public,void,visit,type,insn,final,int,opcode,final,string,type,if,mv,null,mv,visit,type,insn,opcode,type
