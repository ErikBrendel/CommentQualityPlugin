# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1328020251;Resolve the given resource location to a <code>java.net.URL</code>._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,code,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1329393628;Resolve the given resource location to a <code>java.net.URL</code>._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,code,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1346270425;Resolve the given resource location to a <code>java.net.URL</code>._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,code,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1356735495;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1363701206;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1378996094;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1397069848;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1398290095;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1403218981;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1408473285;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(_						description + " cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1414509535;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1444739760;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1444762049;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1468513830;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1468613531;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1468947211;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1474380862;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1474404071;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1489501142;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1495023763;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1496837955;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static URL getURL(String resourceLocation) throws FileNotFoundException;1530174524;Resolve the given resource location to a {@code java.net.URL}._<p>Does not check whether the URL actually exists_ simply returns_the URL that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding URL object_@throws FileNotFoundException if the resource cannot be resolved to a URL;public static URL getURL(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				String description = "class path resource [" + path + "]"__				throw new FileNotFoundException(description +_						" cannot be resolved to URL because it does not exist")__			}_			return url__		}_		try {_			_			return new URL(resourceLocation)__		}_		catch (MalformedURLException ex) {_			_			try {_				return new File(resourceLocation).toURI().toURL()__			}_			catch (MalformedURLException ex2) {_				throw new FileNotFoundException("Resource location [" + resourceLocation +_						"] is neither a URL not a well-formed file path")__			}_		}_	};resolve,the,given,resource,location,to,a,code,java,net,url,p,does,not,check,whether,the,url,actually,exists,simply,returns,the,url,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,url,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,url;public,static,url,get,url,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,string,description,class,path,resource,path,throw,new,file,not,found,exception,description,cannot,be,resolved,to,url,because,it,does,not,exist,return,url,try,return,new,url,resource,location,catch,malformed,urlexception,ex,try,return,new,file,resource,location,to,uri,to,url,catch,malformed,urlexception,ex2,throw,new,file,not,found,exception,resource,location,resource,location,is,neither,a,url,not,a,well,formed,file,path
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1328020251;Resolve the given resource location to a <code>java.io.File</code>,_i.e. to a file in the file system._<p>Does not check whether the fil actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,fil,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1329393628;Resolve the given resource location to a <code>java.io.File</code>,_i.e. to a file in the file system._<p>Does not check whether the fil actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,fil,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1346270425;Resolve the given resource location to a <code>java.io.File</code>,_i.e. to a file in the file system._<p>Does not check whether the fil actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,fil,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1356735495;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the fil actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,fil,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1363701206;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the fil actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,fil,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1378996094;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1397069848;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			URL url = ClassUtils.getDefaultClassLoader().getResource(path)__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,url,url,class,utils,get,default,class,loader,get,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1398290095;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1403218981;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1408473285;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(_						description + " cannot be resolved to absolute file path " +_						"because it does not reside in the file system")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1414509535;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1444739760;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1444762049;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1468513830;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1468613531;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1468947211;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1474380862;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1474404071;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1489501142;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1495023763;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1496837955;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static File getFile(String resourceLocation) throws FileNotFoundException;1530174524;Resolve the given resource location to a {@code java.io.File},_i.e. to a file in the file system._<p>Does not check whether the file actually exists_ simply returns_the File that the given location would correspond to._@param resourceLocation the resource location to resolve: either a_"classpath:" pseudo URL, a "file:" URL, or a plain file path_@return a corresponding File object_@throws FileNotFoundException if the resource cannot be resolved to_a file in the file system;public static File getFile(String resourceLocation) throws FileNotFoundException {_		Assert.notNull(resourceLocation, "Resource location must not be null")__		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length())__			String description = "class path resource [" + path + "]"__			ClassLoader cl = ClassUtils.getDefaultClassLoader()__			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path))__			if (url == null) {_				throw new FileNotFoundException(description +_						" cannot be resolved to absolute file path because it does not exist")__			}_			return getFile(url, description)__		}_		try {_			_			return getFile(new URL(resourceLocation))__		}_		catch (MalformedURLException ex) {_			_			return new File(resourceLocation)__		}_	};resolve,the,given,resource,location,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,p,does,not,check,whether,the,file,actually,exists,simply,returns,the,file,that,the,given,location,would,correspond,to,param,resource,location,the,resource,location,to,resolve,either,a,classpath,pseudo,url,a,file,url,or,a,plain,file,path,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,resource,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,string,resource,location,throws,file,not,found,exception,assert,not,null,resource,location,resource,location,must,not,be,null,if,resource,location,starts,with,string,path,resource,location,substring,length,string,description,class,path,resource,path,class,loader,cl,class,utils,get,default,class,loader,url,url,cl,null,cl,get,resource,path,class,loader,get,system,resource,path,if,url,null,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,exist,return,get,file,url,description,try,return,get,file,new,url,resource,location,catch,malformed,urlexception,ex,return,new,file,resource,location
ResourceUtils -> public static boolean isUrl(@Nullable String resourceLocation);1496837955;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(@Nullable String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,nullable,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(@Nullable String resourceLocation);1530174524;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(@Nullable String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,nullable,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1328020251;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1329393628;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1346270425;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1356735495;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1363701206;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1378996094;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1397069848;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1398290095;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1403218981;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1408473285;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1414509535;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1444739760;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1444762049;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1468513830;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1468613531;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1468947211;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1474380862;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1474404071;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1489501142;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1495023763;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1496837955;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static File getFile(URL resourceUrl, String description) throws FileNotFoundException;1530174524;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@param description a description of the original resource that_the URL was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {_		Assert.notNull(resourceUrl, "Resource URL must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUrl)__		}_		try {_			return new File(toURI(resourceUrl).getSchemeSpecificPart())__		}_		catch (URISyntaxException ex) {_			_			return new File(resourceUrl.getFile())__		}_	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,param,description,a,description,of,the,original,resource,that,the,url,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,string,description,throws,file,not,found,exception,assert,not,null,resource,url,resource,url,must,not,be,null,if,equals,resource,url,get,protocol,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,url,try,return,new,file,to,uri,resource,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,file,resource,url,get,file
ResourceUtils -> public static boolean isJarFileURL(URL url);1408473285;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1414509535;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1444739760;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1444762049;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1468513830;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1468613531;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1468947211;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1474380862;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1474404071;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1489501142;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1495023763;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1496837955;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean isJarFileURL(URL url);1530174524;Determine whether the given URL points to a jar file itself,_that is, has protocol "file" and ends with the ".jar" extension._@param url the URL to check_@return whether the URL has been identified as a JAR file URL_@since 4.1;public static boolean isJarFileURL(URL url) {_		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&_				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION))__	};determine,whether,the,given,url,points,to,a,jar,file,itself,that,is,has,protocol,file,and,ends,with,the,jar,extension,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,file,url,since,4,1;public,static,boolean,is,jar,file,url,url,url,return,equals,url,get,protocol,url,get,path,to,lower,case,ends,with
ResourceUtils -> public static boolean hasFile(Resource resource);1468513830;Indicates whether the given resource has a file, so that {@link_Resource#getFile()}_can be called without an {@link java.io.IOException}._@param resource the resource to check_@return {@code true} if the given resource has a file_ {@code false} otherwise_@since 5.0;public static boolean hasFile(Resource resource) {_		Assert.notNull(resource, "'resource' must not be null")___		_		if (resource instanceof ByteArrayResource ||_				resource instanceof DescriptiveResource ||_				resource instanceof InputStreamResource) {_			return false__		}_		try {_			URI resourceUri = resource.getURI()__			return URL_PROTOCOL_FILE.equals(resourceUri.getScheme())__		}_		catch (IOException ignored) {_		}_		return false__	};indicates,whether,the,given,resource,has,a,file,so,that,link,resource,get,file,can,be,called,without,an,link,java,io,ioexception,param,resource,the,resource,to,check,return,code,true,if,the,given,resource,has,a,file,code,false,otherwise,since,5,0;public,static,boolean,has,file,resource,resource,assert,not,null,resource,resource,must,not,be,null,if,resource,instanceof,byte,array,resource,resource,instanceof,descriptive,resource,resource,instanceof,input,stream,resource,return,false,try,uri,resource,uri,resource,get,uri,return,equals,resource,uri,get,scheme,catch,ioexception,ignored,return,false
ResourceUtils -> public static boolean hasFile(Resource resource);1468613531;Indicates whether the given resource has a file, so that {@link_Resource#getFile()}_can be called without an {@link java.io.IOException}._@param resource the resource to check_@return {@code true} if the given resource has a file_ {@code false} otherwise_@since 5.0;public static boolean hasFile(Resource resource) {_		Assert.notNull(resource, "'resource' must not be null")___		_		if (resource instanceof ByteArrayResource ||_				resource instanceof DescriptiveResource ||_				resource instanceof InputStreamResource) {_			return false__		}_		try {_			URI resourceUri = resource.getURI()__			return URL_PROTOCOL_FILE.equals(resourceUri.getScheme())__		}_		catch (IOException ignored) {_		}_		return false__	};indicates,whether,the,given,resource,has,a,file,so,that,link,resource,get,file,can,be,called,without,an,link,java,io,ioexception,param,resource,the,resource,to,check,return,code,true,if,the,given,resource,has,a,file,code,false,otherwise,since,5,0;public,static,boolean,has,file,resource,resource,assert,not,null,resource,resource,must,not,be,null,if,resource,instanceof,byte,array,resource,resource,instanceof,descriptive,resource,resource,instanceof,input,stream,resource,return,false,try,uri,resource,uri,resource,get,uri,return,equals,resource,uri,get,scheme,catch,ioexception,ignored,return,false
ResourceUtils -> public static boolean isFileURL(URL url);1328020251;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1329393628;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1346270425;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1356735495;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1363701206;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1378996094;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,protocol,starts,with
ResourceUtils -> public static boolean isFileURL(URL url);1397069848;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1398290095;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1403218981;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1408473285;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1414509535;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1444739760;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1444762049;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1468513830;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1468613531;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1468947211;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1474380862;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1474404071;Determine whether the given URL points to a resource in the file system,_that is, has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,that,is,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1489501142;Determine whether the given URL points to a resource in the file system,_i.e. has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,i,e,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1495023763;Determine whether the given URL points to a resource in the file system,_i.e. has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,i,e,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1496837955;Determine whether the given URL points to a resource in the file system,_i.e. has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,i,e,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isFileURL(URL url);1530174524;Determine whether the given URL points to a resource in the file system,_i.e. has protocol "file", "vfsfile" or "vfs"._@param url the URL to check_@return whether the URL has been identified as a file system URL;public static boolean isFileURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||_				URL_PROTOCOL_VFS.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,the,file,system,i,e,has,protocol,file,vfsfile,or,vfs,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,file,system,url;public,static,boolean,is,file,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1328020251;Create a URI instance for the given URL,_replacing spaces with "%20" quotes first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the <code>URL.toURI()</code> method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,quotes,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,code,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1329393628;Create a URI instance for the given URL,_replacing spaces with "%20" quotes first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the <code>URL.toURI()</code> method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,quotes,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,code,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1346270425;Create a URI instance for the given URL,_replacing spaces with "%20" quotes first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the <code>URL.toURI()</code> method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,quotes,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,code,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1356735495;Create a URI instance for the given URL,_replacing spaces with "%20" quotes first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,quotes,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1363701206;Create a URI instance for the given URL,_replacing spaces with "%20" quotes first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,quotes,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1378996094;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1397069848;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1398290095;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1403218981;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1408473285;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1414509535;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1444739760;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1444762049;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1468513830;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1468613531;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1468947211;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1474380862;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1474404071;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1489501142;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._<p>Furthermore, this method works on JDK 1.4 as well,_in contrast to the {@code URL.toURI()} method._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,p,furthermore,this,method,works,on,jdk,1,4,as,well,in,contrast,to,the,code,url,to,uri,method,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1495023763;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1496837955;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static URI toURI(URL url) throws URISyntaxException;1530174524;Create a URI instance for the given URL,_replacing spaces with "%20" URI encoding first._@param url the URL to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the URL wasn't a valid URI_@see java.net.URL#toURI();public static URI toURI(URL url) throws URISyntaxException {_		return toURI(url.toString())__	};create,a,uri,instance,for,the,given,url,replacing,spaces,with,20,uri,encoding,first,param,url,the,url,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,url,wasn,t,a,valid,uri,see,java,net,url,to,uri;public,static,uri,to,uri,url,url,throws,urisyntax,exception,return,to,uri,url,to,string
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1329393628;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring <code>false</code> but leaving the_flag at <code>true</code> for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,code,but,leaving,the,flag,at,code,true,code,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1346270425;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring <code>false</code> but leaving the_flag at <code>true</code> for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,code,but,leaving,the,flag,at,code,true,code,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1356735495;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1363701206;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1378996094;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1397069848;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1398290095;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1403218981;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1408473285;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1414509535;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1444739760;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1444762049;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1468513830;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1468613531;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1468947211;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1474380862;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1474404071;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1489501142;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1495023763;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1496837955;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static void useCachesIfNecessary(URLConnection con);1530174524;Set the {@link URLConnection#setUseCaches "useCaches"} flag on the_given connection, preferring {@code false} but leaving the_flag at {@code true} for JNLP based resources._@param con the URLConnection to set the flag on;public static void useCachesIfNecessary(URLConnection con) {_		con.setUseCaches(con.getClass().getSimpleName().startsWith("JNLP"))__	};set,the,link,urlconnection,set,use,caches,use,caches,flag,on,the,given,connection,preferring,code,false,but,leaving,the,flag,at,code,true,for,jnlp,based,resources,param,con,the,urlconnection,to,set,the,flag,on;public,static,void,use,caches,if,necessary,urlconnection,con,con,set,use,caches,con,get,class,get,simple,name,starts,with,jnlp
ResourceUtils -> public static boolean isUrl(String resourceLocation);1328020251;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1329393628;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1346270425;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1356735495;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1363701206;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1378996094;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1397069848;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1398290095;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1403218981;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1408473285;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1414509535;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1444739760;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1444762049;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1468513830;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1468613531;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1468947211;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1474380862;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1474404071;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1489501142;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static boolean isUrl(String resourceLocation);1495023763;Return whether the given resource location is a URL:_either a special "classpath" pseudo URL or a standard URL._@param resourceLocation the location String to check_@return whether the location qualifies as a URL_@see #CLASSPATH_URL_PREFIX_@see java.net.URL;public static boolean isUrl(String resourceLocation) {_		if (resourceLocation == null) {_			return false__		}_		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {_			return true__		}_		try {_			new URL(resourceLocation)__			return true__		}_		catch (MalformedURLException ex) {_			return false__		}_	};return,whether,the,given,resource,location,is,a,url,either,a,special,classpath,pseudo,url,or,a,standard,url,param,resource,location,the,location,string,to,check,return,whether,the,location,qualifies,as,a,url,see,see,java,net,url;public,static,boolean,is,url,string,resource,location,if,resource,location,null,return,false,if,resource,location,starts,with,return,true,try,new,url,resource,location,return,true,catch,malformed,urlexception,ex,return,false
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1444762049;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1468513830;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1468613531;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1468947211;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1474380862;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1474404071;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1489501142;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1495023763;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {_				return new URL(warFile)__			}_			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,if,equals,jar,url,get,protocol,return,new,url,war,file,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1496837955;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {_				return new URL(warFile)__			}_			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,if,equals,jar,url,get,protocol,return,new,url,war,file,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException;1530174524;Extract the URL for the outermost archive from the given jar/war URL_(which may point to a resource in a jar file or to a jar file itself)._<p>In the case of a jar file nested within a war file, this will return_a URL to the war file since that is the one resolvable in the file system._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted_@since 4.1.8_@see #extractJarFileURL(URL);public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()___		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR)__		if (endIndex != -1) {_			_			String warFile = urlFile.substring(0, endIndex)__			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {_				return new URL(warFile)__			}_			int startIndex = warFile.indexOf(WAR_URL_PREFIX)__			if (startIndex != -1) {_				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()))__			}_		}__		_		return extractJarFileURL(jarUrl)__	};extract,the,url,for,the,outermost,archive,from,the,given,jar,war,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,p,in,the,case,of,a,jar,file,nested,within,a,war,file,this,will,return,a,url,to,the,war,file,since,that,is,the,one,resolvable,in,the,file,system,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted,since,4,1,8,see,extract,jar,file,url,url;public,static,url,extract,archive,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,end,index,url,file,index,of,if,end,index,1,string,war,file,url,file,substring,0,end,index,if,equals,jar,url,get,protocol,return,new,url,war,file,int,start,index,war,file,index,of,if,start,index,1,return,new,url,war,file,substring,start,index,length,return,extract,jar,file,url,jar,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1328020251;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1329393628;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1346270425;Resolve the given resource URL to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1356735495;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1363701206;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1378996094;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1397069848;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1398290095;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1403218981;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1408473285;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1414509535;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1444739760;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1444762049;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1468513830;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1468613531;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1468947211;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1474380862;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1474404071;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1489501142;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1495023763;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1496837955;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URL resourceUrl) throws FileNotFoundException;1530174524;Resolve the given resource URL to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUrl the resource URL to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URL resourceUrl) throws FileNotFoundException {_		return getFile(resourceUrl, "URL")__	};resolve,the,given,resource,url,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,url,the,resource,url,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,url,resource,url,throws,file,not,found,exception,return,get,file,resource,url,url
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1328020251;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1329393628;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1346270425;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1356735495;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1363701206;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1378996094;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1397069848;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1398290095;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1403218981;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1408473285;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1414509535;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1444739760;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1444762049;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1468513830;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1468613531;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1468947211;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1474380862;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1474404071;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1489501142;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1495023763;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1496837955;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static File getFile(URI resourceUri, String description) throws FileNotFoundException;1530174524;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@param description a description of the original resource that_the URI was created for (for example, a class path location)_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri, String description) throws FileNotFoundException {_		Assert.notNull(resourceUri, "Resource URI must not be null")__		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {_			throw new FileNotFoundException(_					description + " cannot be resolved to absolute file path " +_					"because it does not reside in the file system: " + resourceUri)__		}_		return new File(resourceUri.getSchemeSpecificPart())__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,param,description,a,description,of,the,original,resource,that,the,uri,was,created,for,for,example,a,class,path,location,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,string,description,throws,file,not,found,exception,assert,not,null,resource,uri,resource,uri,must,not,be,null,if,equals,resource,uri,get,scheme,throw,new,file,not,found,exception,description,cannot,be,resolved,to,absolute,file,path,because,it,does,not,reside,in,the,file,system,resource,uri,return,new,file,resource,uri,get,scheme,specific,part
ResourceUtils -> public static boolean isJarURL(URL url);1328020251;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by BEA WebLogic Server and IBM WebSphere, respectively,_but can be treated like jar files. The same applies to "code-source" URLs on Oracle_OC4J, provided that the path contains a jar separator._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) ||_				(URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,the,same,applies,to,code,source,urls,on,oracle,oc4j,provided,that,the,path,contains,a,jar,separator,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,url,get,path,contains
ResourceUtils -> public static boolean isJarURL(URL url);1329393628;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by BEA WebLogic Server and IBM WebSphere, respectively,_but can be treated like jar files. The same applies to "code-source" URLs on Oracle_OC4J, provided that the path contains a jar separator._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) ||_				(URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,the,same,applies,to,code,source,urls,on,oracle,oc4j,provided,that,the,path,contains,a,jar,separator,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,url,get,path,contains
ResourceUtils -> public static boolean isJarURL(URL url);1346270425;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by BEA WebLogic Server and IBM WebSphere, respectively,_but can be treated like jar files. The same applies to "code-source" URLs on Oracle_OC4J, provided that the path contains a jar separator._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) ||_				(URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,the,same,applies,to,code,source,urls,on,oracle,oc4j,provided,that,the,path,contains,a,jar,separator,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,url,get,path,contains
ResourceUtils -> public static boolean isJarURL(URL url);1356735495;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by BEA WebLogic Server and IBM WebSphere, respectively,_but can be treated like jar files. The same applies to "code-source" URLs on Oracle_OC4J, provided that the path contains a jar separator._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) ||_				(URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,the,same,applies,to,code,source,urls,on,oracle,oc4j,provided,that,the,path,contains,a,jar,separator,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,url,get,path,contains
ResourceUtils -> public static boolean isJarURL(URL url);1363701206;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by WebLogic Server and WebSphere, respectively,_but can be treated like jar files._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String up = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(up) || URL_PROTOCOL_ZIP.equals(up) || URL_PROTOCOL_WSJAR.equals(up))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,web,logic,server,and,web,sphere,respectively,but,can,be,treated,like,jar,files,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,up,url,get,protocol,return,equals,up,equals,up,equals,up
ResourceUtils -> public static boolean isJarURL(URL url);1378996094;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by WebLogic Server and WebSphere, respectively,_but can be treated like jar files._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String up = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(up) || URL_PROTOCOL_ZIP.equals(up) || URL_PROTOCOL_WSJAR.equals(up))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,web,logic,server,and,web,sphere,respectively,but,can,be,treated,like,jar,files,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,up,url,get,protocol,return,equals,up,equals,up,equals,up
ResourceUtils -> public static boolean isJarURL(URL url);1397069848;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by WebLogic Server and WebSphere, respectively,_but can be treated like jar files._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,web,logic,server,and,web,sphere,respectively,but,can,be,treated,like,jar,files,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1398290095;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "wsjar" or "code-source"._<p>"zip" and "wsjar" are used by WebLogic Server and WebSphere, respectively,_but can be treated like jar files._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,wsjar,or,code,source,p,zip,and,wsjar,are,used,by,web,logic,server,and,web,sphere,respectively,but,can,be,treated,like,jar,files,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1403218981;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1408473285;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1414509535;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1444739760;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_WAR.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1444762049;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1468513830;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1468613531;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1468947211;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1474380862;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1474404071;Determine whether the given URL points to a resource in a jar file,_that is, has protocol "jar", "zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||_				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,that,is,has,protocol,jar,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1489501142;Determine whether the given URL points to a resource in a jar file._i.e. has protocol "jar", "war, ""zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,i,e,has,protocol,jar,war,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1495023763;Determine whether the given URL points to a resource in a jar file._i.e. has protocol "jar", "war, ""zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,i,e,has,protocol,jar,war,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1496837955;Determine whether the given URL points to a resource in a jar file._i.e. has protocol "jar", "war, ""zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,i,e,has,protocol,jar,war,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static boolean isJarURL(URL url);1530174524;Determine whether the given URL points to a resource in a jar file._i.e. has protocol "jar", "war, ""zip", "vfszip" or "wsjar"._@param url the URL to check_@return whether the URL has been identified as a JAR URL;public static boolean isJarURL(URL url) {_		String protocol = url.getProtocol()__		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||_				URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||_				URL_PROTOCOL_WSJAR.equals(protocol))__	};determine,whether,the,given,url,points,to,a,resource,in,a,jar,file,i,e,has,protocol,jar,war,zip,vfszip,or,wsjar,param,url,the,url,to,check,return,whether,the,url,has,been,identified,as,a,jar,url;public,static,boolean,is,jar,url,url,url,string,protocol,url,get,protocol,return,equals,protocol,equals,protocol,equals,protocol,equals,protocol,equals,protocol
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1328020251;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1329393628;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1346270425;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1356735495;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1363701206;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1378996094;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1397069848;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1398290095;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1403218981;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1408473285;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1414509535;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1444739760;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int startIndex = (urlFile.startsWith(JAR_URL_PREFIX) ? JAR_URL_PREFIX.length() : 0)__		int endIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (endIndex != -1) {_			String jarFile = urlFile.substring(startIndex, endIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,start,index,url,file,starts,with,length,0,int,end,index,url,file,index,of,if,end,index,1,string,jar,file,url,file,substring,start,index,end,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1444762049;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1468513830;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1468613531;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1468947211;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1474380862;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1474404071;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1489501142;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1495023763;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1496837955;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException;1530174524;Extract the URL for the actual jar file from the given URL_(which may point to a resource in a jar file or to a jar file itself)._@param jarUrl the original URL_@return the URL for the actual jar file_@throws MalformedURLException if no valid jar file URL could be extracted;public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {_		String urlFile = jarUrl.getFile()__		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR)__		if (separatorIndex != -1) {_			String jarFile = urlFile.substring(0, separatorIndex)__			try {_				return new URL(jarFile)__			}_			catch (MalformedURLException ex) {_				_				_				if (!jarFile.startsWith("/")) {_					jarFile = "/" + jarFile__				}_				return new URL(FILE_URL_PREFIX + jarFile)__			}_		}_		else {_			return jarUrl__		}_	};extract,the,url,for,the,actual,jar,file,from,the,given,url,which,may,point,to,a,resource,in,a,jar,file,or,to,a,jar,file,itself,param,jar,url,the,original,url,return,the,url,for,the,actual,jar,file,throws,malformed,urlexception,if,no,valid,jar,file,url,could,be,extracted;public,static,url,extract,jar,file,url,url,jar,url,throws,malformed,urlexception,string,url,file,jar,url,get,file,int,separator,index,url,file,index,of,if,separator,index,1,string,jar,file,url,file,substring,0,separator,index,try,return,new,url,jar,file,catch,malformed,urlexception,ex,if,jar,file,starts,with,jar,file,jar,file,return,new,url,jar,file,else,return,jar,url
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1328020251;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1329393628;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1346270425;Resolve the given resource URI to a <code>java.io.File</code>,_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,code,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1356735495;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1363701206;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1378996094;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1397069848;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1398290095;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1403218981;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1408473285;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1414509535;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1444739760;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1444762049;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1468513830;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1468613531;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1468947211;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1474380862;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1474404071;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1489501142;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1495023763;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1496837955;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static File getFile(URI resourceUri) throws FileNotFoundException;1530174524;Resolve the given resource URI to a {@code java.io.File},_i.e. to a file in the file system._@param resourceUri the resource URI to resolve_@return a corresponding File object_@throws FileNotFoundException if the URL cannot be resolved to_a file in the file system_@since 2.5;public static File getFile(URI resourceUri) throws FileNotFoundException {_		return getFile(resourceUri, "URI")__	};resolve,the,given,resource,uri,to,a,code,java,io,file,i,e,to,a,file,in,the,file,system,param,resource,uri,the,resource,uri,to,resolve,return,a,corresponding,file,object,throws,file,not,found,exception,if,the,url,cannot,be,resolved,to,a,file,in,the,file,system,since,2,5;public,static,file,get,file,uri,resource,uri,throws,file,not,found,exception,return,get,file,resource,uri,uri
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1328020251;Create a URI instance for the given location String,_replacing spaces with "%20" quotes first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,quotes,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1329393628;Create a URI instance for the given location String,_replacing spaces with "%20" quotes first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,quotes,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1346270425;Create a URI instance for the given location String,_replacing spaces with "%20" quotes first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,quotes,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1356735495;Create a URI instance for the given location String,_replacing spaces with "%20" quotes first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,quotes,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1363701206;Create a URI instance for the given location String,_replacing spaces with "%20" quotes first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,quotes,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1378996094;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1397069848;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1398290095;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1403218981;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1408473285;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1414509535;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1444739760;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1444762049;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1468513830;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1468613531;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1468947211;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1474380862;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1474404071;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1489501142;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1495023763;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1496837955;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
ResourceUtils -> public static URI toURI(String location) throws URISyntaxException;1530174524;Create a URI instance for the given location String,_replacing spaces with "%20" URI encoding first._@param location the location String to convert into a URI instance_@return the URI instance_@throws URISyntaxException if the location wasn't a valid URI;public static URI toURI(String location) throws URISyntaxException {_		return new URI(StringUtils.replace(location, " ", "%20"))__	};create,a,uri,instance,for,the,given,location,string,replacing,spaces,with,20,uri,encoding,first,param,location,the,location,string,to,convert,into,a,uri,instance,return,the,uri,instance,throws,urisyntax,exception,if,the,location,wasn,t,a,valid,uri;public,static,uri,to,uri,string,location,throws,urisyntax,exception,return,new,uri,string,utils,replace,location,20
