commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;4;/**  * Return a {@link Comparable} adapter.  * @see ComparableComparator#INSTANCE  */ ;/**  * Return a {@link Comparable} adapter.  * @see ComparableComparator#INSTANCE  */ @SuppressWarnings("unchecked") public static <T> Comparator<T> comparable() {     return ComparableComparator.INSTANCE. }
true;public,static;0;4;/**  * Return a {@link Comparable} adapter which accepts  * null values and sorts them lower than non-null values.  * @see NullSafeComparator#NULLS_LOW  */ ;/**  * Return a {@link Comparable} adapter which accepts  * null values and sorts them lower than non-null values.  * @see NullSafeComparator#NULLS_LOW  */ @SuppressWarnings("unchecked") public static <T> Comparator<T> nullsLow() {     return NullSafeComparator.NULLS_LOW. }
true;public,static;1;3;/**  * Return a decorator for the given comparator which accepts  * null values and sorts them lower than non-null values.  * @see NullSafeComparator#NullSafeComparator(boolean)  */ ;/**  * Return a decorator for the given comparator which accepts  * null values and sorts them lower than non-null values.  * @see NullSafeComparator#NullSafeComparator(boolean)  */ public static <T> Comparator<T> nullsLow(Comparator<T> comparator) {     return new NullSafeComparator<>(comparator, true). }
true;public,static;0;4;/**  * Return a {@link Comparable} adapter which accepts  * null values and sorts them higher than non-null values.  * @see NullSafeComparator#NULLS_HIGH  */ ;/**  * Return a {@link Comparable} adapter which accepts  * null values and sorts them higher than non-null values.  * @see NullSafeComparator#NULLS_HIGH  */ @SuppressWarnings("unchecked") public static <T> Comparator<T> nullsHigh() {     return NullSafeComparator.NULLS_HIGH. }
true;public,static;1;3;/**  * Return a decorator for the given comparator which accepts  * null values and sorts them higher than non-null values.  * @see NullSafeComparator#NullSafeComparator(boolean)  */ ;/**  * Return a decorator for the given comparator which accepts  * null values and sorts them higher than non-null values.  * @see NullSafeComparator#NullSafeComparator(boolean)  */ public static <T> Comparator<T> nullsHigh(Comparator<T> comparator) {     return new NullSafeComparator<>(comparator, false). }
