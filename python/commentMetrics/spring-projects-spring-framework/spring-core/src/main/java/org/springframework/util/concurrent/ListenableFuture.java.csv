commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Register the given {@code ListenableFutureCallback}.  * @param callback the callback to register  */ ;/**  * Register the given {@code ListenableFutureCallback}.  * @param callback the callback to register  */ void addCallback(ListenableFutureCallback<? super T> callback).
true;;2;1;/**  * Java 8 lambda-friendly alternative with success and failure callbacks.  * @param successCallback the success callback  * @param failureCallback the failure callback  * @since 4.1  */ ;/**  * Java 8 lambda-friendly alternative with success and failure callbacks.  * @param successCallback the success callback  * @param failureCallback the failure callback  * @since 4.1  */ void addCallback(SuccessCallback<? super T> successCallback, FailureCallback failureCallback).
true;default;0;5;/**  * Expose this {@link ListenableFuture} as a JDK {@link CompletableFuture}.  * @since 5.0  */ ;/**  * Expose this {@link ListenableFuture} as a JDK {@link CompletableFuture}.  * @since 5.0  */ default CompletableFuture<T> completable() {     CompletableFuture<T> completable = new DelegatingCompletableFuture<>(this).     addCallback(completable::complete, completable::completeExceptionally).     return completable. }
