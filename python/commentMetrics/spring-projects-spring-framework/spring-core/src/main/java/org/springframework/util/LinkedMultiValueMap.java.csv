# id;timestamp;commentText;codeText;commentWords;codeWords
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1328020251;Copy constructor: Create a new LinkedMultiValueMap with the same mappings_as the specified Map._@param otherMap the Map whose mappings are to be placed in this Map;public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<K, List<V>>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,k,list,v,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1356735495;Copy constructor: Create a new LinkedMultiValueMap with the same mappings_as the specified Map._@param otherMap the Map whose mappings are to be placed in this Map;public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<K, List<V>>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,k,list,v,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1357119239;Copy constructor: Create a new LinkedMultiValueMap with the same mappings_as the specified Map._@param otherMap the Map whose mappings are to be placed in this Map;public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<K, List<V>>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,k,list,v,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1368482696;Copy constructor: Create a new LinkedMultiValueMap with the same mappings_as the specified Map._@param otherMap the Map whose mappings are to be placed in this Map;public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<K, List<V>>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,k,list,v,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1436221479;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<K, List<V>>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,k,list,v,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1467730834;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1482515870;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1485782330;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1493370460;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1496259743;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1496837955;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1496955179;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1497269532;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1497271072;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1500448076;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1502974979;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1522103912;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1530174524;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap(Map<K, List<V>> otherMap);1536571897;Copy constructor: Create a new LinkedMultiValueMap with the same mappings as_the specified Map. Note that this will be a shallow copy_ its value-holding_List entries will get reused and therefore cannot get modified independently._@param otherMap the Map whose mappings are to be placed in this Map_@see #clone()_@see #deepCopy();public LinkedMultiValueMap(Map<K, List<V>> otherMap) {_		this.targetMap = new LinkedHashMap<>(otherMap)__	};copy,constructor,create,a,new,linked,multi,value,map,with,the,same,mappings,as,the,specified,map,note,that,this,will,be,a,shallow,copy,its,value,holding,list,entries,will,get,reused,and,therefore,cannot,get,modified,independently,param,other,map,the,map,whose,mappings,are,to,be,placed,in,this,map,see,clone,see,deep,copy;public,linked,multi,value,map,map,k,list,v,other,map,this,target,map,new,linked,hash,map,other,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1328020251;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<K, List<V>>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map,k,list,v
LinkedMultiValueMap -> public LinkedMultiValueMap();1356735495;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<K, List<V>>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map,k,list,v
LinkedMultiValueMap -> public LinkedMultiValueMap();1357119239;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<K, List<V>>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map,k,list,v
LinkedMultiValueMap -> public LinkedMultiValueMap();1368482696;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<K, List<V>>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map,k,list,v
LinkedMultiValueMap -> public LinkedMultiValueMap();1436221479;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<K, List<V>>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map,k,list,v
LinkedMultiValueMap -> public LinkedMultiValueMap();1467730834;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1482515870;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1485782330;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1493370460;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1496259743;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1496837955;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1496955179;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1497269532;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1497271072;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1500448076;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1502974979;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1522103912;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1530174524;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap();1536571897;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}.;public LinkedMultiValueMap() {_		this.targetMap = new LinkedHashMap<>()__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map;public,linked,multi,value,map,this,target,map,new,linked,hash,map
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1436221479;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<K, V>(this.targetMap.size())__		for (Map.Entry<K, List<V>> entry : this.targetMap.entrySet()) {_			copy.put(entry.getKey(), new LinkedList<V>(entry.getValue()))__		}_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,k,v,this,target,map,size,for,map,entry,k,list,v,entry,this,target,map,entry,set,copy,put,entry,get,key,new,linked,list,v,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1467730834;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		for (Map.Entry<K, List<V>> entry : this.targetMap.entrySet()) {_			copy.put(entry.getKey(), new LinkedList<>(entry.getValue()))__		}_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,for,map,entry,k,list,v,entry,this,target,map,entry,set,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1482515870;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		for (Map.Entry<K, List<V>> entry : this.targetMap.entrySet()) {_			copy.put(entry.getKey(), new LinkedList<>(entry.getValue()))__		}_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,for,map,entry,k,list,v,entry,this,target,map,entry,set,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1485782330;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		for (Map.Entry<K, List<V>> entry : this.targetMap.entrySet()) {_			copy.put(entry.getKey(), new LinkedList<>(entry.getValue()))__		}_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,for,map,entry,k,list,v,entry,this,target,map,entry,set,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1493370460;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.entrySet().forEach(entry -> _			copy.put(entry.getKey(), new LinkedList<>(entry.getValue())))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,entry,set,for,each,entry,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1496259743;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.entrySet().forEach(entry -> _			copy.put(entry.getKey(), new LinkedList<>(entry.getValue())))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,entry,set,for,each,entry,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1496837955;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.entrySet().forEach(entry -> _			copy.put(entry.getKey(), new LinkedList<>(entry.getValue())))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,entry,set,for,each,entry,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1496955179;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.entrySet().forEach(entry -> _			copy.put(entry.getKey(), new LinkedList<>(entry.getValue())))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,entry,set,for,each,entry,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1497269532;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.entrySet().forEach(entry -> _			copy.put(entry.getKey(), new LinkedList<>(entry.getValue())))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,entry,set,for,each,entry,copy,put,entry,get,key,new,linked,list,entry,get,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1497271072;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((k, v) -> copy.put(k, new LinkedList<>(v)))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,k,v,copy,put,k,new,linked,list,v,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1500448076;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((k, v) -> copy.put(k, new LinkedList<>(v)))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,k,v,copy,put,k,new,linked,list,v,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1502974979;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((k, v) -> copy.put(k, new LinkedList<>(v)))__		_		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,k,v,copy,put,k,new,linked,list,v,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1522103912;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((key, value) -> copy.put(key, new LinkedList<>(value)))__		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,key,value,copy,put,key,new,linked,list,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1530174524;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_@since 4.2_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((key, value) -> copy.put(key, new LinkedList<>(value)))__		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,since,4,2,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,key,value,copy,put,key,new,linked,list,value,return,copy
LinkedMultiValueMap -> public LinkedMultiValueMap<K, V> deepCopy();1536571897;Create a deep copy of this Map._@return a copy of this Map, including a copy of each value-holding List entry_(consistently using an independent modifiable {@link LinkedList} for each entry)_along the lines of {@code MultiValueMap.addAll} semantics_@since 4.2_@see #addAll(MultiValueMap)_@see #clone();public LinkedMultiValueMap<K, V> deepCopy() {_		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size())__		this.targetMap.forEach((key, value) -> copy.put(key, new LinkedList<>(value)))__		return copy__	};create,a,deep,copy,of,this,map,return,a,copy,of,this,map,including,a,copy,of,each,value,holding,list,entry,consistently,using,an,independent,modifiable,link,linked,list,for,each,entry,along,the,lines,of,code,multi,value,map,add,all,semantics,since,4,2,see,add,all,multi,value,map,see,clone;public,linked,multi,value,map,k,v,deep,copy,linked,multi,value,map,k,v,copy,new,linked,multi,value,map,this,target,map,size,this,target,map,for,each,key,value,copy,put,key,new,linked,list,value,return,copy
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1436221479;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<K, V>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,k,v,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1467730834;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1482515870;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1485782330;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1493370460;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1496259743;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1496837955;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1496955179;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1497269532;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1497271072;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1500448076;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1502974979;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1522103912;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1530174524;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_@since 4.2_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,since,4,2,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> @Override 	public LinkedMultiValueMap<K, V> clone();1536571897;Create a regular copy of this Map._@return a shallow copy of this Map, reusing this Map's value-holding List entries_(even if some entries are shared or unmodifiable) along the lines of standard_{@code Map.put} semantics_@since 4.2_@see #put(Object, List)_@see #putAll(Map)_@see LinkedMultiValueMap#LinkedMultiValueMap(Map)_@see #deepCopy();@Override_	public LinkedMultiValueMap<K, V> clone() {_		return new LinkedMultiValueMap<>(this)__	};create,a,regular,copy,of,this,map,return,a,shallow,copy,of,this,map,reusing,this,map,s,value,holding,list,entries,even,if,some,entries,are,shared,or,unmodifiable,along,the,lines,of,standard,code,map,put,semantics,since,4,2,see,put,object,list,see,put,all,map,see,linked,multi,value,map,linked,multi,value,map,map,see,deep,copy;override,public,linked,multi,value,map,k,v,clone,return,new,linked,multi,value,map,this
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1328020251;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,k,list,v,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1356735495;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,k,list,v,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1357119239;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,k,list,v,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1368482696;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,k,list,v,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1436221479;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<K, List<V>>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,k,list,v,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1467730834;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1482515870;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1485782330;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1493370460;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1496259743;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1496837955;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1496955179;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1497269532;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1497271072;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1500448076;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1502974979;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1522103912;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1530174524;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
LinkedMultiValueMap -> public LinkedMultiValueMap(int initialCapacity);1536571897;Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}_with the given initial capacity._@param initialCapacity the initial capacity;public LinkedMultiValueMap(int initialCapacity) {_		this.targetMap = new LinkedHashMap<>(initialCapacity)__	};create,a,new,linked,multi,value,map,that,wraps,a,link,linked,hash,map,with,the,given,initial,capacity,param,initial,capacity,the,initial,capacity;public,linked,multi,value,map,int,initial,capacity,this,target,map,new,linked,hash,map,initial,capacity
