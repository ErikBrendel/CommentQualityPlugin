commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object.class, Object[].class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), this.conversionService). }
false;public;3;13;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     TypeDescriptor targetElementType = targetType.getElementTypeDescriptor().     Assert.state(targetElementType != null, "No target element type").     Object target = Array.newInstance(targetElementType.getType(), 1).     Object targetElement = this.conversionService.convert(source, sourceType, targetElementType).     Array.set(target, 0, targetElement).     return target. }
