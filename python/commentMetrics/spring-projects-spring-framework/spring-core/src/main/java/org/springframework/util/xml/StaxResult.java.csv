commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the {@code XMLEventWriter} used by this {@code StaxResult}.  * <p>If this {@code StaxResult} was created with an {@code XMLStreamWriter},  * the result will be {@code null}.  * @return the StAX event writer used by this result  * @see #StaxResult(javax.xml.stream.XMLEventWriter)  */ ;/**  * Return the {@code XMLEventWriter} used by this {@code StaxResult}.  * <p>If this {@code StaxResult} was created with an {@code XMLStreamWriter},  * the result will be {@code null}.  * @return the StAX event writer used by this result  * @see #StaxResult(javax.xml.stream.XMLEventWriter)  */ @Nullable public XMLEventWriter getXMLEventWriter() {     return this.eventWriter. }
true;public;0;4;/**  * Return the {@code XMLStreamWriter} used by this {@code StaxResult}.  * <p>If this {@code StaxResult} was created with an {@code XMLEventConsumer},  * the result will be {@code null}.  * @return the StAX stream writer used by this result  * @see #StaxResult(javax.xml.stream.XMLStreamWriter)  */ ;/**  * Return the {@code XMLStreamWriter} used by this {@code StaxResult}.  * <p>If this {@code StaxResult} was created with an {@code XMLEventConsumer},  * the result will be {@code null}.  * @return the StAX stream writer used by this result  * @see #StaxResult(javax.xml.stream.XMLStreamWriter)  */ @Nullable public XMLStreamWriter getXMLStreamWriter() {     return this.streamWriter. }
true;public;1;4;/**  * Throws an {@code UnsupportedOperationException}.  * @throws UnsupportedOperationException always  */ ;/**  * Throws an {@code UnsupportedOperationException}.  * @throws UnsupportedOperationException always  */ @Override public void setHandler(ContentHandler handler) {     throw new UnsupportedOperationException("setHandler is not supported"). }
true;public;1;4;/**  * Throws an {@code UnsupportedOperationException}.  * @throws UnsupportedOperationException always  */ ;/**  * Throws an {@code UnsupportedOperationException}.  * @throws UnsupportedOperationException always  */ @Override public void setLexicalHandler(LexicalHandler handler) {     throw new UnsupportedOperationException("setLexicalHandler is not supported"). }
