commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {     Class<?> clazz = elementType.toClass().     return super.canEncode(elementType, mimeType) && DataBuffer.class.isAssignableFrom(clazz). }
false;public;5;16;;@Override public Flux<DataBuffer> encode(Publisher<? extends DataBuffer> inputStream, DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {     Flux<DataBuffer> flux = Flux.from(inputStream).     if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {         flux = flux.doOnNext(buffer -> {             String logPrefix = Hints.getLogPrefix(hints).             logger.debug(logPrefix + "Writing " + buffer.readableByteCount() + " bytes").         }).     }     return flux. }
