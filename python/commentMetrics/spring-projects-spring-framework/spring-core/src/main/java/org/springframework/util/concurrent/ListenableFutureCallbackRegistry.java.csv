# id;timestamp;commentText;codeText;commentWords;codeWords
ListenableFutureCallbackRegistry -> public void success(@Nullable T result);1500457438;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(@Nullable T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,nullable,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void success(@Nullable T result);1522360217;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(@Nullable T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			SuccessCallback<? super T> callback__			while ((callback = this.successCallbacks.poll()) != null) {_				notifySuccess(callback)__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,nullable,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,success,callback,super,t,callback,while,callback,this,success,callbacks,poll,null,notify,success,callback
ListenableFutureCallbackRegistry -> public void success(@Nullable T result);1530174524;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(@Nullable T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			SuccessCallback<? super T> callback__			while ((callback = this.successCallbacks.poll()) != null) {_				notifySuccess(callback)__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,nullable,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,success,callback,super,t,callback,while,callback,this,success,callbacks,poll,null,notify,success,callback
ListenableFutureCallbackRegistry -> public void addSuccessCallback(SuccessCallback<? super T> callback);1468334463;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void addSuccessCallback(SuccessCallback<? super T> callback);1498780456;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void addSuccessCallback(SuccessCallback<? super T> callback);1500457438;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void addSuccessCallback(SuccessCallback<? super T> callback);1522360217;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void addSuccessCallback(SuccessCallback<? super T> callback);1530174524;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1409784938;Triggers a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				this.failureCallbacks.poll().onFailure(ex)__			}_		}_	};triggers,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,this,failure,callbacks,poll,on,failure,ex
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1409790625;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				this.failureCallbacks.poll().onFailure(ex)__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,this,failure,callbacks,poll,on,failure,ex
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1440078573;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				this.failureCallbacks.poll().onFailure(ex)__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,this,failure,callbacks,poll,on,failure,ex
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1452811741;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1452851471;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1467730834;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1468334463;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1498780456;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1500457438;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			while (!this.failureCallbacks.isEmpty()) {_				notifyFailure(this.failureCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,while,this,failure,callbacks,is,empty,notify,failure,this,failure,callbacks,poll
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1522360217;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			FailureCallback callback__			while ((callback = this.failureCallbacks.poll()) != null) {_				notifyFailure(callback)__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,failure,callback,callback,while,callback,this,failure,callbacks,poll,null,notify,failure,callback
ListenableFutureCallbackRegistry -> public void failure(Throwable ex);1530174524;Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all_added callbacks with the given {@code Throwable}._@param ex the exception to trigger the callbacks with;public void failure(Throwable ex) {_		synchronized (this.mutex) {_			this.state = State.FAILURE__			this.result = ex__			FailureCallback callback__			while ((callback = this.failureCallbacks.poll()) != null) {_				notifyFailure(callback)__			}_		}_	};trigger,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,ex,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,ex,synchronized,this,mutex,this,state,state,failure,this,result,ex,failure,callback,callback,while,callback,this,failure,callbacks,poll,null,notify,failure,callback
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1405521701;Adds the given success callback to this registry._@param callback the success callback to add__@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")___		synchronized (mutex) {_			switch (state) {_				case NEW:_					successCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T)result)__					break__			}_		}_	};adds,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,mutex,switch,state,case,new,success,callbacks,add,callback,break,case,success,callback,on,success,t,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1409784938;Adds the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__			}_		}_	};adds,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1409790625;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1440078573;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1452811741;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1452851471;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addSuccessCallback(SuccessCallback<? super T> callback);1467730834;Add the given success callback to this registry._@param callback the success callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addSuccessCallback(SuccessCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__			}_		}_	};add,the,given,success,callback,to,this,registry,param,callback,the,success,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,success,callback,success,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,break,case,success,notify,success,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1452811741;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1452851471;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1467730834;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1468334463;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1498780456;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1500457438;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1522360217;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addCallback(ListenableFutureCallback<? super T> callback);1530174524;Add the given callback to this registry._@param callback the callback to add;public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					notifySuccess(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,notify,success,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addFailureCallback(FailureCallback callback);1405521701;Adds the given failure callback to this registry._@param callback the failure callback to add__@since 4.1;@SuppressWarnings("unchecked")_	public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")___		synchronized (mutex) {_			switch (state) {_				case NEW:_					failureCallbacks.add(callback)__					break__				case FAILURE:_					callback.onFailure((Throwable) result)__					break__			}_		}_	};adds,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,mutex,switch,state,case,new,failure,callbacks,add,callback,break,case,failure,callback,on,failure,throwable,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addFailureCallback(FailureCallback callback);1409784938;Adds the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};adds,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,callback,on,failure,throwable,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addFailureCallback(FailureCallback callback);1409790625;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;@SuppressWarnings("unchecked")_	public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;suppress,warnings,unchecked,public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,callback,on,failure,throwable,this,result,break
ListenableFutureCallbackRegistry -> public void failure(Throwable t);1378298362;Triggers a {@link ListenableFutureCallback#onFailure(Throwable)} call on all added_callbacks with the given {@code Throwable}._@param t the exception to trigger the callbacks with;public void failure(Throwable t) {_		synchronized (mutex) {_			state = State.FAILURE__			this.result = t___			while (!callbacks.isEmpty()) {_				callbacks.poll().onFailure(t)__			}_		}_	};triggers,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,t,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,t,synchronized,mutex,state,state,failure,this,result,t,while,callbacks,is,empty,callbacks,poll,on,failure,t
ListenableFutureCallbackRegistry -> public void failure(Throwable t);1385501137;Triggers a {@link ListenableFutureCallback#onFailure(Throwable)} call on all added_callbacks with the given {@code Throwable}._@param t the exception to trigger the callbacks with;public void failure(Throwable t) {_		synchronized (mutex) {_			state = State.FAILURE__			this.result = t___			while (!callbacks.isEmpty()) {_				callbacks.poll().onFailure(t)__			}_		}_	};triggers,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,t,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,t,synchronized,mutex,state,state,failure,this,result,t,while,callbacks,is,empty,callbacks,poll,on,failure,t
ListenableFutureCallbackRegistry -> public void failure(Throwable t);1405521701;Triggers a {@link ListenableFutureCallback#onFailure(Throwable)} call on all added_callbacks with the given {@code Throwable}._@param t the exception to trigger the callbacks with;public void failure(Throwable t) {_		synchronized (mutex) {_			state = State.FAILURE__			this.result = t___			while (!failureCallbacks.isEmpty()) {_				failureCallbacks.poll().onFailure(t)__			}_		}_	};triggers,a,link,listenable,future,callback,on,failure,throwable,call,on,all,added,callbacks,with,the,given,code,throwable,param,t,the,exception,to,trigger,the,callbacks,with;public,void,failure,throwable,t,synchronized,mutex,state,state,failure,this,result,t,while,failure,callbacks,is,empty,failure,callbacks,poll,on,failure,t
ListenableFutureCallbackRegistry -> public void success(T result);1378298362;Triggers a {@link ListenableFutureCallback#onSuccess(Object)} call on all added_callbacks with the given result_@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (mutex) {_			state = State.SUCCESS__			this.result = result___			while (!callbacks.isEmpty()) {_				callbacks.poll().onSuccess(result)__			}_		}_	};triggers,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,mutex,state,state,success,this,result,result,while,callbacks,is,empty,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1385501137;Triggers a {@link ListenableFutureCallback#onSuccess(Object)} call on all added_callbacks with the given result_@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (mutex) {_			state = State.SUCCESS__			this.result = result___			while (!callbacks.isEmpty()) {_				callbacks.poll().onSuccess(result)__			}_		}_	};triggers,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,mutex,state,state,success,this,result,result,while,callbacks,is,empty,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1405521701;Triggers a {@link ListenableFutureCallback#onSuccess(Object)} call on all added_callbacks with the given result_@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (mutex) {_			state = State.SUCCESS__			this.result = result___			while (!successCallbacks.isEmpty()) {_				successCallbacks.poll().onSuccess(result)__			}_		}_	};triggers,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,mutex,state,state,success,this,result,result,while,success,callbacks,is,empty,success,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1409784938;Triggers a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result_@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				this.successCallbacks.poll().onSuccess(result)__			}_		}_	};triggers,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,this,success,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1409790625;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				this.successCallbacks.poll().onSuccess(result)__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,this,success,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1440078573;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				this.successCallbacks.poll().onSuccess(result)__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,this,success,callbacks,poll,on,success,result
ListenableFutureCallbackRegistry -> public void success(T result);1452811741;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void success(T result);1452851471;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void success(T result);1467730834;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void success(T result);1468334463;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void success(T result);1498780456;Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all_added callbacks with the given result._@param result the result to trigger the callbacks with;public void success(T result) {_		synchronized (this.mutex) {_			this.state = State.SUCCESS__			this.result = result__			while (!this.successCallbacks.isEmpty()) {_				notifySuccess(this.successCallbacks.poll())__			}_		}_	};trigger,a,link,listenable,future,callback,on,success,object,call,on,all,added,callbacks,with,the,given,result,param,result,the,result,to,trigger,the,callbacks,with;public,void,success,t,result,synchronized,this,mutex,this,state,state,success,this,result,result,while,this,success,callbacks,is,empty,notify,success,this,success,callbacks,poll
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1440078573;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,callback,on,failure,throwable,this,result,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1452811741;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1452851471;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1467730834;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1468334463;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1498780456;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1500457438;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1522360217;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> public void addFailureCallback(FailureCallback callback);1530174524;Add the given failure callback to this registry._@param callback the failure callback to add_@since 4.1;public void addFailureCallback(FailureCallback callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.failureCallbacks.add(callback)__					break__				case FAILURE:_					notifyFailure(callback)__					break__			}_		}_	};add,the,given,failure,callback,to,this,registry,param,callback,the,failure,callback,to,add,since,4,1;public,void,add,failure,callback,failure,callback,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,failure,callbacks,add,callback,break,case,failure,notify,failure,callback,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1378298362;Adds the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")___		synchronized (mutex) {_			switch (state) {_				case NEW:_					callbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T)result)__					break__				case FAILURE:_					callback.onFailure((Throwable) result)__					break__			}_		}_	};adds,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,mutex,switch,state,case,new,callbacks,add,callback,break,case,success,callback,on,success,t,result,break,case,failure,callback,on,failure,throwable,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1385501137;Adds the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")___		synchronized (mutex) {_			switch (state) {_				case NEW:_					callbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T)result)__					break__				case FAILURE:_					callback.onFailure((Throwable) result)__					break__			}_		}_	};adds,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,mutex,switch,state,case,new,callbacks,add,callback,break,case,success,callback,on,success,t,result,break,case,failure,callback,on,failure,throwable,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1405521701;Adds the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")___		synchronized (mutex) {_			switch (state) {_				case NEW:_					successCallbacks.add(callback)__					failureCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T)result)__					break__				case FAILURE:_					callback.onFailure((Throwable) result)__					break__			}_		}_	};adds,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,mutex,switch,state,case,new,success,callbacks,add,callback,failure,callbacks,add,callback,break,case,success,callback,on,success,t,result,break,case,failure,callback,on,failure,throwable,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1409784938;Adds the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};adds,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break,case,failure,callback,on,failure,throwable,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1409790625;Add the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break,case,failure,callback,on,failure,throwable,this,result,break
ListenableFutureCallbackRegistry -> @SuppressWarnings("unchecked") 	public void addCallback(ListenableFutureCallback<? super T> callback);1440078573;Add the given callback to this registry._@param callback the callback to add;@SuppressWarnings("unchecked")_	public void addCallback(ListenableFutureCallback<? super T> callback) {_		Assert.notNull(callback, "'callback' must not be null")__		synchronized (this.mutex) {_			switch (this.state) {_				case NEW:_					this.successCallbacks.add(callback)__					this.failureCallbacks.add(callback)__					break__				case SUCCESS:_					callback.onSuccess((T) this.result)__					break__				case FAILURE:_					callback.onFailure((Throwable) this.result)__					break__			}_		}_	};add,the,given,callback,to,this,registry,param,callback,the,callback,to,add;suppress,warnings,unchecked,public,void,add,callback,listenable,future,callback,super,t,callback,assert,not,null,callback,callback,must,not,be,null,synchronized,this,mutex,switch,this,state,case,new,this,success,callbacks,add,callback,this,failure,callbacks,add,callback,break,case,success,callback,on,success,t,this,result,break,case,failure,callback,on,failure,throwable,this,result,break
