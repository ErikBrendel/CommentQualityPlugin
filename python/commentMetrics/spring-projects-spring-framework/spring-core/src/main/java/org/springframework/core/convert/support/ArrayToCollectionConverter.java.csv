commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object[].class, Collection.class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService). }
false;public;3;28;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     int length = Array.getLength(source).     TypeDescriptor elementDesc = targetType.getElementTypeDescriptor().     Collection<Object> target = CollectionFactory.createCollection(targetType.getType(), (elementDesc != null ? elementDesc.getType() : null), length).     if (elementDesc == null) {         for (int i = 0. i < length. i++) {             Object sourceElement = Array.get(source, i).             target.add(sourceElement).         }     } else {         for (int i = 0. i < length. i++) {             Object sourceElement = Array.get(source, i).             Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), elementDesc).             target.add(targetElement).         }     }     return target. }
