# id;timestamp;commentText;codeText;commentWords;codeWords
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1328020251;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (!Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1356735495;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (!Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1362408075;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && !Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1381389591;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && !Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1385412762;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && !Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1417981938;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && !Object.class.equals(superclass)) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,equals,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1432125256;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1467730834;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> private static Method findGenericDeclaration(Method bridgeMethod);1467846264;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1381389591;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1385412762;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1417981938;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1432125256;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1467730834;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1467846264;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1495868221;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1496837955;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1508799709;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1515662307;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1530532518;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1532520919;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass);1546963894;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,class,declaring,class,if,is,resolved,type,match,candidate,method,bridge,method,declaring,class,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,declaring,class
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1328020251;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or <code>null</code> if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Map<TypeVariable, Type> typeParameterMap = GenericTypeResolver.getTypeVariableMap(bridgeMethod.getDeclaringClass())__		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,code,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,map,type,variable,type,type,parameter,map,generic,type,resolver,get,type,variable,map,bridge,method,get,declaring,class,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,type,parameter,map,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1356735495;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Map<TypeVariable, Type> typeParameterMap = GenericTypeResolver.getTypeVariableMap(bridgeMethod.getDeclaringClass())__		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,map,type,variable,type,type,parameter,map,generic,type,resolver,get,type,variable,map,bridge,method,get,declaring,class,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,type,parameter,map,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1362408075;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Map<TypeVariable, Type> typeParameterMap = GenericTypeResolver.getTypeVariableMap(bridgeMethod.getDeclaringClass())__		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,map,type,variable,type,type,parameter,map,generic,type,resolver,get,type,variable,map,bridge,method,get,declaring,class,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,type,parameter,map,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1381389591;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1385412762;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1417981938;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1432125256;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1467730834;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1467846264;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass);1508799709;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass);1515662307;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass);1530532518;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass);1532520919;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.toClass())) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,to,class,return,false,if,candidate,parameter,equals,generic,parameter,to,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass);1546963894;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.toClass())) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,to,class,return,false,if,candidate,parameter,equals,generic,parameter,to,class,return,false,return,true
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1495868221;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1496837955;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		_		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		for (Class<?> ifc : interfaces) {_			Method method = searchForMatch(ifc, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_		}__		return null__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,for,class,ifc,interfaces,method,method,search,for,match,ifc,bridge,method,if,method,null,method,is,bridge,return,method,return,null
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1508799709;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		return searchInterfaces(interfaces, bridgeMethod)__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,return,search,interfaces,interfaces,bridge,method
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1515662307;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		return searchInterfaces(interfaces, bridgeMethod)__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,return,search,interfaces,interfaces,bridge,method
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1530532518;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		return searchInterfaces(interfaces, bridgeMethod)__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,return,search,interfaces,interfaces,bridge,method
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1532520919;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		return searchInterfaces(interfaces, bridgeMethod)__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,return,search,interfaces,interfaces,bridge,method
BridgeMethodResolver -> @Nullable 	private static Method findGenericDeclaration(Method bridgeMethod);1546963894;Searches for the generic {@link Method} declaration whose erased signature_matches that of the supplied bridge method._@throws IllegalStateException if the generic declaration cannot be found;@Nullable_	private static Method findGenericDeclaration(Method bridgeMethod) {_		_		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass()__		while (superclass != null && Object.class != superclass) {_			Method method = searchForMatch(superclass, bridgeMethod)__			if (method != null && !method.isBridge()) {_				return method__			}_			superclass = superclass.getSuperclass()__		}__		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass())__		return searchInterfaces(interfaces, bridgeMethod)__	};searches,for,the,generic,link,method,declaration,whose,erased,signature,matches,that,of,the,supplied,bridge,method,throws,illegal,state,exception,if,the,generic,declaration,cannot,be,found;nullable,private,static,method,find,generic,declaration,method,bridge,method,class,superclass,bridge,method,get,declaring,class,get,superclass,while,superclass,null,object,class,superclass,method,method,search,for,match,superclass,bridge,method,if,method,null,method,is,bridge,return,method,superclass,superclass,get,superclass,class,interfaces,class,utils,get,all,interfaces,for,class,bridge,method,get,declaring,class,return,search,interfaces,interfaces,bridge,method
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1328020251;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, typeVariableMap)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, typeVariableMap))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,map,type,variable,type,type,variable,map,if,is,resolved,type,match,candidate,method,bridge,method,type,variable,map,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,type,variable,map
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1356735495;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, typeVariableMap)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, typeVariableMap))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,map,type,variable,type,type,variable,map,if,is,resolved,type,match,candidate,method,bridge,method,type,variable,map,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,type,variable,map
BridgeMethodResolver -> static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1362408075;Determines whether or not the bridge {@link Method} is the bridge for the_supplied candidate {@link Method}.;static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {_		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, typeVariableMap)) {_			return true__		}_		Method method = findGenericDeclaration(bridgeMethod)__		return (method != null && isResolvedTypeMatch(method, candidateMethod, typeVariableMap))__	};determines,whether,or,not,the,bridge,link,method,is,the,bridge,for,the,supplied,candidate,link,method;static,boolean,is,bridge,method,for,method,bridge,method,method,candidate,method,map,type,variable,type,type,variable,map,if,is,resolved,type,match,candidate,method,bridge,method,type,variable,map,return,true,method,method,find,generic,declaration,bridge,method,return,method,null,is,resolved,type,match,method,candidate,method,type,variable,map
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1328020251;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1356735495;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1362408075;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1381389591;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1385412762;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1417981938;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1432125256;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<Method>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1467730834;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1467846264;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1495868221;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (bridgeMethod == null || !bridgeMethod.isBridge()) {_			return bridgeMethod__		}_		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}_		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}_		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,null,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1496837955;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1508799709;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1515662307;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1530532518;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1532520919;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> public static Method findBridgedMethod(Method bridgeMethod);1546963894;Find the original method for the supplied {@link Method bridge Method}._<p>It is safe to call this method passing in a non-bridge {@link Method} instance._In such a case, the supplied {@link Method} instance is returned directly to the caller._Callers are <strong>not</strong> required to check for bridging before calling this method._@param bridgeMethod the method to introspect_@return the original method (either the bridged method or the passed-in method_if no more specific one could be found);public static Method findBridgedMethod(Method bridgeMethod) {_		if (!bridgeMethod.isBridge()) {_			return bridgeMethod__		}__		_		List<Method> candidateMethods = new ArrayList<>()__		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bridgeMethod.getDeclaringClass())__		for (Method candidateMethod : methods) {_			if (isBridgedCandidateFor(candidateMethod, bridgeMethod)) {_				candidateMethods.add(candidateMethod)__			}_		}__		_		if (candidateMethods.size() == 1) {_			return candidateMethods.get(0)__		}__		_		Method bridgedMethod = searchCandidates(candidateMethods, bridgeMethod)__		if (bridgedMethod != null) {_			_			return bridgedMethod__		}_		else {_			_			_			return bridgeMethod__		}_	};find,the,original,method,for,the,supplied,link,method,bridge,method,p,it,is,safe,to,call,this,method,passing,in,a,non,bridge,link,method,instance,in,such,a,case,the,supplied,link,method,instance,is,returned,directly,to,the,caller,callers,are,strong,not,strong,required,to,check,for,bridging,before,calling,this,method,param,bridge,method,the,method,to,introspect,return,the,original,method,either,the,bridged,method,or,the,passed,in,method,if,no,more,specific,one,could,be,found;public,static,method,find,bridged,method,method,bridge,method,if,bridge,method,is,bridge,return,bridge,method,list,method,candidate,methods,new,array,list,method,methods,reflection,utils,get,all,declared,methods,bridge,method,get,declaring,class,for,method,candidate,method,methods,if,is,bridged,candidate,for,candidate,method,bridge,method,candidate,methods,add,candidate,method,if,candidate,methods,size,1,return,candidate,methods,get,0,method,bridged,method,search,candidates,candidate,methods,bridge,method,if,bridged,method,null,return,bridged,method,else,return,bridge,method
BridgeMethodResolver -> private static Method searchForMatch(Class<?> type, Method bridgeMethod);1385412762;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class<?> type, Method bridgeMethod);1417981938;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class<?> type, Method bridgeMethod);1432125256;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class<?> type, Method bridgeMethod);1467730834;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class<?> type, Method bridgeMethod);1467846264;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1328020251;Returns <code>true</code> if the supplied '<code>candidateMethod</code>' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,code,if,the,supplied,code,candidate,method,code,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1356735495;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1362408075;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1381389591;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1385412762;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1417981938;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1432125256;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1467730834;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterTypes().length == bridgeMethod.getParameterTypes().length)__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,types,length,bridge,method,get,parameter,types,length
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1467846264;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1495868221;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1496837955;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1508799709;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1515662307;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1530532518;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1532520919;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod);1546963894;Returns {@code true} if the supplied '{@code candidateMethod}' can be_consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}_by the supplied {@link Method bridge Method}. This method performs inexpensive_checks and can be used quickly filter for a set of possible matches.;private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {_		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&_				candidateMethod.getName().equals(bridgeMethod.getName()) &&_				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount())__	};returns,code,true,if,the,supplied,code,candidate,method,can,be,consider,a,validate,candidate,for,the,link,method,that,is,link,method,is,bridge,bridged,by,the,supplied,link,method,bridge,method,this,method,performs,inexpensive,checks,and,can,be,used,quickly,filter,for,a,set,of,possible,matches;private,static,boolean,is,bridged,candidate,for,method,candidate,method,method,bridge,method,return,candidate,method,is,bridge,candidate,method,equals,bridge,method,candidate,method,get,name,equals,bridge,method,get,name,candidate,method,get,parameter,count,bridge,method,get,parameter,count
BridgeMethodResolver -> private static Method searchForMatch(Class type, Method bridgeMethod);1328020251;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise <code>null</code> is returned.;private static Method searchForMatch(Class type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,code,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class type, Method bridgeMethod);1356735495;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class type, Method bridgeMethod);1362408075;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> private static Method searchForMatch(Class type, Method bridgeMethod);1381389591;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;private static Method searchForMatch(Class type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1496837955;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1508799709;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1515662307;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1530532518;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1532520919;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> @Nullable 	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod);1546963894;Searches for the bridged method in the given candidates._@param candidateMethods the List of candidate Methods_@param bridgeMethod the bridge method_@return the bridged method, or {@code null} if none found;@Nullable_	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {_		if (candidateMethods.isEmpty()) {_			return null__		}_		Method previousMethod = null__		boolean sameSig = true__		for (Method candidateMethod : candidateMethods) {_			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {_				return candidateMethod__			}_			else if (previousMethod != null) {_				sameSig = sameSig &&_						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes())__			}_			previousMethod = candidateMethod__		}_		return (sameSig ? candidateMethods.get(0) : null)__	};searches,for,the,bridged,method,in,the,given,candidates,param,candidate,methods,the,list,of,candidate,methods,param,bridge,method,the,bridge,method,return,the,bridged,method,or,code,null,if,none,found;nullable,private,static,method,search,candidates,list,method,candidate,methods,method,bridge,method,if,candidate,methods,is,empty,return,null,method,previous,method,null,boolean,same,sig,true,for,method,candidate,method,candidate,methods,if,is,bridge,method,for,bridge,method,candidate,method,bridge,method,get,declaring,class,return,candidate,method,else,if,previous,method,null,same,sig,same,sig,arrays,equals,candidate,method,get,generic,parameter,types,previous,method,get,generic,parameter,types,previous,method,candidate,method,return,same,sig,candidate,methods,get,0,null
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1328020251;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		Assert.isTrue(bridgeMethod != null)__		Assert.isTrue(bridgedMethod != null)__		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType())__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,assert,is,true,bridge,method,null,assert,is,true,bridged,method,null,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1356735495;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		Assert.isTrue(bridgeMethod != null)__		Assert.isTrue(bridgedMethod != null)__		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType())__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,assert,is,true,bridge,method,null,assert,is,true,bridged,method,null,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1362408075;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType())__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1381389591;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType())__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1385412762;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType())__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1417981938;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1432125256;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1467730834;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1467846264;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1495868221;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1496837955;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1508799709;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1515662307;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1530532518;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1532520919;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()) &&_				bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types,bridge,method,get,return,type,equals,bridged,method,get,return,type
BridgeMethodResolver -> public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod);1546963894;Compare the signatures of the bridge method and the method which it bridges. If_the parameter and return types are the same, it is a 'visibility' bridge method_introduced in Java 6 to fix http://bugs.sun.com/view_bug.do?bug_id=6342411._See also http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html_@return whether signatures match as described;public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {_		if (bridgeMethod == bridgedMethod) {_			return true__		}_		return (bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()) &&_				Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()))__	};compare,the,signatures,of,the,bridge,method,and,the,method,which,it,bridges,if,the,parameter,and,return,types,are,the,same,it,is,a,visibility,bridge,method,introduced,in,java,6,to,fix,http,bugs,sun,com,do,6342411,see,also,http,stas,blogspot,blogspot,com,2010,03,java,bridge,methods,explained,html,return,whether,signatures,match,as,described;public,static,boolean,is,visibility,bridge,method,pair,method,bridge,method,method,bridged,method,if,bridge,method,bridged,method,return,true,return,bridge,method,get,return,type,equals,bridged,method,get,return,type,arrays,equals,bridge,method,get,parameter,types,bridged,method,get,parameter,types
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1328020251;Returns <code>true</code> if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all {@link TypeVariable TypeVariables} using the supplied_TypeVariable Map, otherwise returns <code>false</code>.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {__		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < genericParameters.length_ i++) {_			Type genericParameter = genericParameters[i]__			Class candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				Type rawType = GenericTypeResolver.getRawType(genericParameter, typeVariableMap)__				if (rawType instanceof GenericArrayType) {_					if (!candidateParameter.getComponentType().equals(_							GenericTypeResolver.resolveType(((GenericArrayType) rawType).getGenericComponentType(), typeVariableMap))) {_						return false__					}_					break__				}_			}_			_			Class resolvedParameter = GenericTypeResolver.resolveType(genericParameter, typeVariableMap)__			if (!candidateParameter.equals(resolvedParameter)) {_				return false__			}_		}_		return true__	};returns,code,true,code,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,link,type,variable,type,variables,using,the,supplied,type,variable,map,otherwise,returns,code,false,code;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,map,type,variable,type,type,variable,map,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,generic,parameters,length,i,type,generic,parameter,generic,parameters,i,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,type,raw,type,generic,type,resolver,get,raw,type,generic,parameter,type,variable,map,if,raw,type,instanceof,generic,array,type,if,candidate,parameter,get,component,type,equals,generic,type,resolver,resolve,type,generic,array,type,raw,type,get,generic,component,type,type,variable,map,return,false,break,class,resolved,parameter,generic,type,resolver,resolve,type,generic,parameter,type,variable,map,if,candidate,parameter,equals,resolved,parameter,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1356735495;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all {@link TypeVariable TypeVariables} using the supplied_TypeVariable Map, otherwise returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {__		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < genericParameters.length_ i++) {_			Type genericParameter = genericParameters[i]__			Class candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				Type rawType = GenericTypeResolver.getRawType(genericParameter, typeVariableMap)__				if (rawType instanceof GenericArrayType) {_					if (!candidateParameter.getComponentType().equals(_							GenericTypeResolver.resolveType(((GenericArrayType) rawType).getGenericComponentType(), typeVariableMap))) {_						return false__					}_					break__				}_			}_			_			Class resolvedParameter = GenericTypeResolver.resolveType(genericParameter, typeVariableMap)__			if (!candidateParameter.equals(resolvedParameter)) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,link,type,variable,type,variables,using,the,supplied,type,variable,map,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,map,type,variable,type,type,variable,map,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,generic,parameters,length,i,type,generic,parameter,generic,parameters,i,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,type,raw,type,generic,type,resolver,get,raw,type,generic,parameter,type,variable,map,if,raw,type,instanceof,generic,array,type,if,candidate,parameter,get,component,type,equals,generic,type,resolver,resolve,type,generic,array,type,raw,type,get,generic,component,type,type,variable,map,return,false,break,class,resolved,parameter,generic,type,resolver,resolve,type,generic,parameter,type,variable,map,if,candidate,parameter,equals,resolved,parameter,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap);1362408075;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all {@link TypeVariable TypeVariables} using the supplied_TypeVariable Map, otherwise returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Map<TypeVariable, Type> typeVariableMap) {__		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < genericParameters.length_ i++) {_			Type genericParameter = genericParameters[i]__			Class candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				Type rawType = GenericTypeResolver.getRawType(genericParameter, typeVariableMap)__				if (rawType instanceof GenericArrayType) {_					if (!candidateParameter.getComponentType().equals(_							GenericTypeResolver.resolveType(((GenericArrayType) rawType).getGenericComponentType(), typeVariableMap))) {_						return false__					}_					break__				}_			}_			_			Class resolvedParameter = GenericTypeResolver.resolveType(genericParameter, typeVariableMap)__			if (!candidateParameter.equals(resolvedParameter)) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,link,type,variable,type,variables,using,the,supplied,type,variable,map,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,map,type,variable,type,type,variable,map,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,generic,parameters,length,i,type,generic,parameter,generic,parameters,i,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,type,raw,type,generic,type,resolver,get,raw,type,generic,parameter,type,variable,map,if,raw,type,instanceof,generic,array,type,if,candidate,parameter,get,component,type,equals,generic,type,resolver,resolve,type,generic,array,type,raw,type,get,generic,component,type,type,variable,map,return,false,break,class,resolved,parameter,generic,type,resolver,resolve,type,generic,parameter,type,variable,map,if,candidate,parameter,equals,resolved,parameter,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1381389591;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1385412762;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1417981938;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1432125256;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1467730834;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1467846264;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1495868221;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> private static boolean isResolvedTypeMatch( 			Method genericMethod, Method candidateMethod, Class<?> declaringClass);1496837955;Returns {@code true} if the {@link Type} signature of both the supplied_{@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}_are equal after resolving all types against the declaringType, otherwise_returns {@code false}.;private static boolean isResolvedTypeMatch(_			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {_		Type[] genericParameters = genericMethod.getGenericParameterTypes()__		Class<?>[] candidateParameters = candidateMethod.getParameterTypes()__		if (genericParameters.length != candidateParameters.length) {_			return false__		}_		for (int i = 0_ i < candidateParameters.length_ i++) {_			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass)__			Class<?> candidateParameter = candidateParameters[i]__			if (candidateParameter.isArray()) {_				_				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {_					return false__				}_			}_			_			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {_				return false__			}_		}_		return true__	};returns,code,true,if,the,link,type,signature,of,both,the,supplied,link,method,get,generic,parameter,types,generic,method,and,concrete,link,method,are,equal,after,resolving,all,types,against,the,declaring,type,otherwise,returns,code,false;private,static,boolean,is,resolved,type,match,method,generic,method,method,candidate,method,class,declaring,class,type,generic,parameters,generic,method,get,generic,parameter,types,class,candidate,parameters,candidate,method,get,parameter,types,if,generic,parameters,length,candidate,parameters,length,return,false,for,int,i,0,i,candidate,parameters,length,i,resolvable,type,generic,parameter,resolvable,type,for,method,parameter,generic,method,i,declaring,class,class,candidate,parameter,candidate,parameters,i,if,candidate,parameter,is,array,if,candidate,parameter,get,component,type,equals,generic,parameter,get,component,type,resolve,object,class,return,false,if,candidate,parameter,equals,generic,parameter,resolve,object,class,return,false,return,true
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1495868221;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1496837955;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		return ReflectionUtils.findMethod(type, bridgeMethod.getName(), bridgeMethod.getParameterTypes())__	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,return,reflection,utils,find,method,type,bridge,method,get,name,bridge,method,get,parameter,types
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1508799709;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		try {_			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes())__		}_		catch (NoSuchMethodException ex) {_			return null__		}_	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,try,return,type,get,declared,method,bridge,method,get,name,bridge,method,get,parameter,types,catch,no,such,method,exception,ex,return,null
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1515662307;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		try {_			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes())__		}_		catch (NoSuchMethodException ex) {_			return null__		}_	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,try,return,type,get,declared,method,bridge,method,get,name,bridge,method,get,parameter,types,catch,no,such,method,exception,ex,return,null
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1530532518;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		try {_			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes())__		}_		catch (NoSuchMethodException ex) {_			return null__		}_	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,try,return,type,get,declared,method,bridge,method,get,name,bridge,method,get,parameter,types,catch,no,such,method,exception,ex,return,null
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1532520919;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		try {_			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes())__		}_		catch (NoSuchMethodException ex) {_			return null__		}_	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,try,return,type,get,declared,method,bridge,method,get,name,bridge,method,get,parameter,types,catch,no,such,method,exception,ex,return,null
BridgeMethodResolver -> @Nullable 	private static Method searchForMatch(Class<?> type, Method bridgeMethod);1546963894;If the supplied {@link Class} has a declared {@link Method} whose signature matches_that of the supplied {@link Method}, then this matching {@link Method} is returned,_otherwise {@code null} is returned.;@Nullable_	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {_		try {_			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes())__		}_		catch (NoSuchMethodException ex) {_			return null__		}_	};if,the,supplied,link,class,has,a,declared,link,method,whose,signature,matches,that,of,the,supplied,link,method,then,this,matching,link,method,is,returned,otherwise,code,null,is,returned;nullable,private,static,method,search,for,match,class,type,method,bridge,method,try,return,type,get,declared,method,bridge,method,get,name,bridge,method,get,parameter,types,catch,no,such,method,exception,ex,return,null
