# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1433445833;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray()_				&& expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1434136173;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray()_				&& expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1436182516;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1436186512;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1440781118;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468334463;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468583965;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468605093;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468605234;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468605293;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468613531;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1468951740;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1495868221;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1496837955;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1498780456;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType);1549958959;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		assertNotException(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray() &&_				expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,get,required,attribute,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,assert,not,exception,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1329142650;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1351673950;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1356735495;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1368482696;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1377099356;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1431254607;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1431256204;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432246071;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432302769;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432323470;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432398350;Create a new, empty {@link AnnotationAttributes} instance with the given initial_capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432736125;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1432738981;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1433381203;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1433445833;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1434136173;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1436182516;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1436186512;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1440781118;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468334463;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468583965;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468605093;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468605234;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468605293;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468613531;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1468951740;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1495868221;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1496837955;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1498780456;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(int initialCapacity);1549958959;Create a new, empty {@link AnnotationAttributes} instance with the_given initial capacity to optimize performance._@param initialCapacity initial size of the underlying map;public AnnotationAttributes(int initialCapacity) {_		super(initialCapacity)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance,with,the,given,initial,capacity,to,optimize,performance,param,initial,capacity,initial,size,of,the,underlying,map;public,annotation,attributes,int,initial,capacity,super,initial,capacity,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468605293;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468613531;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468951740;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader);1495868221;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,nullable,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader);1496837955;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,nullable,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader);1498780456;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,nullable,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader);1549958959;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the annotation type name represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = getAnnotationType(annotationType, classLoader)__		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,annotation,type,name,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;public,annotation,attributes,string,annotation,type,nullable,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,get,annotation,type,annotation,type,class,loader,this,display,name,annotation,type
AnnotationAttributes -> @Nullable 	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map);1496837955;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;@Nullable_	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;nullable,public,static,annotation,attributes,from,map,nullable,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> @Nullable 	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map);1498780456;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;@Nullable_	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;nullable,public,static,annotation,attributes,from,map,nullable,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> @Nullable 	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map);1549958959;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;@Nullable_	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;nullable,public,static,annotation,attributes,from,map,nullable,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1432302769;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1432323470;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1432398350;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1432736125;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1432738981;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1433381203;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1433445833;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1434136173;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1436182516;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1436186512;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1440781118;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468334463;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468583965;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468605093;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468605234;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468605293;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468613531;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1468951740;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1495868221;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1496837955;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1498780456;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> @Override 	public Object putIfAbsent(String key, Object value);1549958959;Store the supplied {@code value} in this map under the specified_{@code key}, unless a value is already stored under the key._@param key the key under which to store the value_@param value the value to store_@return the current value stored in this map, or {@code null} if no_value was previously stored in this map_@see #get_@see #put_@since 4.2;@Override_	public Object putIfAbsent(String key, Object value) {_		Object obj = get(key)__		if (obj == null) {_			obj = put(key, value)__		}_		return obj__	};store,the,supplied,code,value,in,this,map,under,the,specified,code,key,unless,a,value,is,already,stored,under,the,key,param,key,the,key,under,which,to,store,the,value,param,value,the,value,to,store,return,the,current,value,stored,in,this,map,or,code,null,if,no,value,was,previously,stored,in,this,map,see,get,see,put,since,4,2;override,public,object,put,if,absent,string,key,object,value,object,obj,get,key,if,obj,null,obj,put,key,value,return,obj
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432246071;Get the type of annotation represented by this {@code AnnotationAttributes}_instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432302769;Get the type of annotation represented by this {@code AnnotationAttributes}_instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432323470;Get the type of annotation represented by this {@code AnnotationAttributes}_instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432398350;Get the type of annotation represented by this {@code AnnotationAttributes}_instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432736125;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1432738981;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1433381203;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1433445833;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1434136173;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1436182516;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1436186512;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1440781118;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468334463;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468583965;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468605093;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468605234;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468605293;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468613531;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public Class<? extends Annotation> annotationType();1468951740;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1432736125;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return doGet(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1432738981;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return doGet(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1433381203;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return doGet(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1433445833;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1434136173;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1436182516;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1436186512;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1440781118;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468334463;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468583965;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468605093;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468605234;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468605293;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468613531;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1468951740;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1495868221;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1496837955;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1498780456;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes getAnnotation(String attributeName);1549958959;Get the {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>Note: if you expect an actual annotation, invoke_{@link #getAnnotation(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes getAnnotation(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes.class)__	};get,the,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,note,if,you,expect,an,actual,annotation,invoke,link,get,annotation,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1329142650;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1351673950;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1356735495;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1368482696;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1377099356;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1431254607;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1431256204;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432246071;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432302769;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432323470;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432398350;Create a new {@link AnnotationAttributes} instance, wrapping the provided map_and all its key/value pairs._@param map original source of annotation attribute key/value pairs to wrap_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,key,value,pairs,param,map,original,source,of,annotation,attribute,key,value,pairs,to,wrap,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432736125;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1432738981;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1433381203;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1433445833;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1434136173;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1436182516;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1436186512;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1440781118;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468334463;Create a new {@link AnnotationAttributes} instance, wrapping the_provided map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em>_pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468583965;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468605093;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468605234;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468605293;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468613531;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1468951740;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1495868221;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1496837955;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1498780456;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Map<String, Object> map);1549958959;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param map original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(Map<String, Object> map) {_		super(map)__		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,map,string,object,map,super,map,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return doGet(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return doGet(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return doGet(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as a_class._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as a class._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as a class._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <T> Class<? extends T> getClass(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as a class._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <T> Class<? extends T> getClass(String attributeName) {_		return getRequiredAttribute(attributeName, Class.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,class,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,t,class,extends,t,get,class,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T doGet(String attributeName, Class<T> expectedType);1432736125;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	private <T> T doGet(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		if (value == null) {_			throw new IllegalArgumentException(String.format(_				"Attribute '%s' not found in attributes for annotation [%s]", attributeName, this.displayName))__		}_		if (!expectedType.isInstance(value)) {_			if (expectedType.isArray() && expectedType.getComponentType().isInstance(value)) {_				Object array = Array.newInstance(expectedType.getComponentType(), 1)__				Array.set(array, 0, value)__				value = array__			}_			else {_				throw new IllegalArgumentException(String.format(_					"Attribute '%s' is of type [%s], but [%s] was expected in attributes for annotation [%s]",_					attributeName, value.getClass().getSimpleName(), expectedType.getSimpleName(), this.displayName))__			}_		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,private,t,t,do,get,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,if,value,null,throw,new,illegal,argument,exception,string,format,attribute,s,not,found,in,attributes,for,annotation,s,attribute,name,this,display,name,if,expected,type,is,instance,value,if,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,else,throw,new,illegal,argument,exception,string,format,attribute,s,is,of,type,s,but,s,was,expected,in,attributes,for,annotation,s,attribute,name,value,get,class,get,simple,name,expected,type,get,simple,name,this,display,name,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T doGet(String attributeName, Class<T> expectedType);1432738981;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	private <T> T doGet(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		if (value == null) {_			throw new IllegalArgumentException(String.format(_				"Attribute '%s' not found in attributes for annotation [%s]", attributeName, this.displayName))__		}_		if (!expectedType.isInstance(value)) {_			if (expectedType.isArray() && expectedType.getComponentType().isInstance(value)) {_				Object array = Array.newInstance(expectedType.getComponentType(), 1)__				Array.set(array, 0, value)__				value = array__			}_			else {_				throw new IllegalArgumentException(String.format(_					"Attribute '%s' is of type [%s], but [%s] was expected in attributes for annotation [%s]",_					attributeName, value.getClass().getSimpleName(), expectedType.getSimpleName(), this.displayName))__			}_		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,private,t,t,do,get,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,if,value,null,throw,new,illegal,argument,exception,string,format,attribute,s,not,found,in,attributes,for,annotation,s,attribute,name,this,display,name,if,expected,type,is,instance,value,if,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,else,throw,new,illegal,argument,exception,string,format,attribute,s,is,of,type,s,but,s,was,expected,in,attributes,for,annotation,s,attribute,name,value,get,class,get,simple,name,expected,type,get,simple,name,this,display,name,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T doGet(String attributeName, Class<T> expectedType);1433381203;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._<p>If the {@code expectedType} is an array and the value stored_under the specified {@code attributeName} is a single element of the_component type of the expected array type, the single element will be_wrapped in a single-element array of the appropriate type before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	private <T> T doGet(String attributeName, Class<T> expectedType) {_		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Object value = get(attributeName)__		assertAttributePresence(attributeName, value)__		if (!expectedType.isInstance(value) && expectedType.isArray()_				&& expectedType.getComponentType().isInstance(value)) {_			Object array = Array.newInstance(expectedType.getComponentType(), 1)__			Array.set(array, 0, value)__			value = array__		}_		assertAttributeType(attributeName, value, expectedType)__		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,p,if,the,code,expected,type,is,an,array,and,the,value,stored,under,the,specified,code,attribute,name,is,a,single,element,of,the,component,type,of,the,expected,array,type,the,single,element,will,be,wrapped,in,a,single,element,array,of,the,appropriate,type,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,private,t,t,do,get,string,attribute,name,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,object,value,get,attribute,name,assert,attribute,presence,attribute,name,value,if,expected,type,is,instance,value,expected,type,is,array,expected,type,get,component,type,is,instance,value,object,array,array,new,instance,expected,type,get,component,type,1,array,set,array,0,value,value,array,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1432736125;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return doGet(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1432738981;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return doGet(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1433381203;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return doGet(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,do,get,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1433445833;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1434136173;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1436182516;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1436186512;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1440781118;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468334463;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468583965;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468605093;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468605234;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468605293;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468613531;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1468951740;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1495868221;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1496837955;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1498780456;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public AnnotationAttributes[] getAnnotationArray(String attributeName);1549958959;Get the array of {@link AnnotationAttributes} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an instance of {@code AnnotationAttributes}, it will be wrapped in_a single-element array before returning it._<p>Note: if you expect an actual array of annotations, invoke_{@link #getAnnotationArray(String, Class)} instead._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the array of {@code AnnotationAttributes}_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public AnnotationAttributes[] getAnnotationArray(String attributeName) {_		return getRequiredAttribute(attributeName, AnnotationAttributes[].class)__	};get,the,array,of,link,annotation,attributes,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,instance,of,code,annotation,attributes,it,will,be,wrapped,in,a,single,element,array,before,returning,it,p,note,if,you,expect,an,actual,array,of,annotations,invoke,link,get,annotation,array,string,class,instead,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,array,of,code,annotation,attributes,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,annotation,attributes,get,annotation,array,string,attribute,name,return,get,required,attribute,attribute,name,annotation,attributes,class
AnnotationAttributes -> public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1434136173;Get the value stored under the specified {@code attributeName} as a_string, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the string value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {_		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,string,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;public,string,get,aliased,string,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436182516;Get the value stored under the specified {@code attributeName} as a_string, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the string value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,string,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;public,string,get,aliased,string,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436186512;Get the value stored under the specified {@code attributeName} as a_string, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the string value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,string,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;public,string,get,aliased,string,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1440781118;Get the value stored under the specified {@code attributeName} as a_string, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the string value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,string,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;public,string,get,aliased,string,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1468334463;Get the value stored under the specified {@code attributeName} as a_string, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the string value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,string,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;public,string,get,aliased,string,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1433381203;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")___		String[] attributeValue = getStringArrayWithoutNullCheck(attributeName)__		String aliasName = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		String[] aliasValue = getStringArrayWithoutNullCheck(aliasName)__		boolean attributeDeclared = !ObjectUtils.isEmpty(attributeValue)__		boolean aliasDeclared = !ObjectUtils.isEmpty(aliasValue)___		if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && attributeDeclared && aliasDeclared) {_			String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__			String msg = String.format("In annotation [%s] declared on [%s], "_					+ "attribute [%s] and its alias [%s] are present with values of [%s] and [%s], "_					+ "but only one is permitted.", this.displayName, elementName, attributeName, aliasName,_				ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__			throw new AnnotationConfigurationException(msg)__		}__		if (!attributeDeclared) {_			attributeValue = aliasValue__		}__		assertAttributePresence(attributeName, aliasName, attributeValue)___		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,string,attribute,value,get,string,array,without,null,check,attribute,name,string,alias,name,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,string,alias,value,get,string,array,without,null,check,alias,name,boolean,attribute,declared,object,utils,is,empty,attribute,value,boolean,alias,declared,object,utils,is,empty,alias,value,if,object,utils,null,safe,equals,attribute,value,alias,value,attribute,declared,alias,declared,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,this,display,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,attribute,declared,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,name,attribute,value,return,attribute,value
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1433445833;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {_		return getRequiredArrayWithAttributeAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,array,with,attribute,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1434136173;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {_		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436182516;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436186512;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1440781118;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1468334463;Get the value stored under the specified {@code attributeName} as an_array of strings, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of strings_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code String[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public String[] getAliasedStringArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,strings,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,string,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,string,get,aliased,string,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,string,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1433445833;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1434136173;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1436182516;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertNotException(attributeName, value)__			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,not,exception,attribute,name,value,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1436186512;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertNotException(attributeName, value)__			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,not,exception,attribute,name,value,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1440781118;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertNotException(attributeName, value)__			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,not,exception,attribute,name,value,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1468334463;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertNotException(attributeName, value)__			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,not,exception,attribute,name,value,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	private <T> T getAttribute(String attributeName, Class<T> expectedType);1468583965;Get the value stored under the specified {@code attributeName},_ensuring that the value is of the {@code expectedType}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute is not of the_expected type_@see #getRequiredAttribute(String, Class);@SuppressWarnings("unchecked")_	private <T> T getAttribute(String attributeName, Class<T> expectedType) {_		Object value = get(attributeName)__		if (value != null) {_			assertNotException(attributeName, value)__			assertAttributeType(attributeName, value, expectedType)__		}_		return (T) value__	};get,the,value,stored,under,the,specified,code,attribute,name,ensuring,that,the,value,is,of,the,code,expected,type,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,is,not,of,the,expected,type,see,get,required,attribute,string,class;suppress,warnings,unchecked,private,t,t,get,attribute,string,attribute,name,class,t,expected,type,object,value,get,attribute,name,if,value,null,assert,not,exception,attribute,name,value,assert,attribute,type,attribute,name,value,expected,type,return,t,value
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) doGet(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,do,get,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) doGet(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,do,get,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) doGet(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,do,get,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as a_number._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as a number._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as a number._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <N extends Number> N getNumber(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as a number._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <N extends Number> N getNumber(String attributeName) {_		return (N) getRequiredAttribute(attributeName, Number.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,number,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,n,extends,number,n,get,number,string,attribute,name,return,n,get,required,attribute,attribute,name,number,class
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1432738981;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return doGet(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,do,get,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1433381203;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return doGet(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,do,get,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1433445833;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1434136173;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1436182516;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1436186512;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1440781118;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468334463;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468583965;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468605093;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468605234;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468605293;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468613531;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1468951740;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1495868221;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1496837955;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1498780456;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType);1549958959;Get the annotation of type {@code annotationType} stored under the_specified {@code attributeName}._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {_		return getRequiredAttribute(attributeName, annotationType)__	};get,the,annotation,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;public,a,extends,annotation,a,get,annotation,string,attribute,name,class,a,annotation,type,return,get,required,attribute,attribute,name,annotation,type
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1434136173;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")__		Assert.notNull(expectedType, "expectedType must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)__		String aliasName = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		T aliasValue = getAttribute(aliasName, expectedType)__		boolean attributeDeclared = !ObjectUtils.isEmpty(attributeValue)__		boolean aliasDeclared = !ObjectUtils.isEmpty(aliasValue)___		if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && attributeDeclared && aliasDeclared) {_			String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__			String msg = String.format("In annotation [%s] declared on [%s], "_					+ "attribute [%s] and its alias [%s] are present with values of [%s] and [%s], "_					+ "but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName,_				ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__			throw new AnnotationConfigurationException(msg)__		}__		if (!attributeDeclared) {_			attributeValue = aliasValue__		}__		assertAttributePresence(attributeName, aliasName, attributeValue)___		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,string,alias,name,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,declared,object,utils,is,empty,attribute,value,boolean,alias,declared,object,utils,is,empty,alias,value,if,object,utils,null,safe,equals,attribute,value,alias,value,attribute,declared,alias,declared,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,attribute,declared,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,name,attribute,value,return,attribute,value
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1436182516;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")__		Assert.notNull(expectedType, "expectedType must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)__		String aliasName = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		T aliasValue = getAttribute(aliasName, expectedType)__		boolean attributeDeclared = !ObjectUtils.isEmpty(attributeValue)__		boolean aliasDeclared = !ObjectUtils.isEmpty(aliasValue)___		if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && attributeDeclared && aliasDeclared) {_			String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__			String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +_					"are present with values of [%s] and [%s], but only one is permitted.",_					annotationType.getName(), elementName, attributeName, aliasName,_					ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__			throw new AnnotationConfigurationException(msg)__		}__		if (!attributeDeclared) {_			attributeValue = aliasValue__		}__		assertAttributePresence(attributeName, aliasName, attributeValue)___		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,string,alias,name,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,declared,object,utils,is,empty,attribute,value,boolean,alias,declared,object,utils,is,empty,alias,value,if,object,utils,null,safe,equals,attribute,value,alias,value,attribute,declared,alias,declared,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,attribute,declared,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,name,attribute,value,return,attribute,value
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1436186512;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")__		Assert.notNull(expectedType, "expectedType must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)__		String aliasName = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		T aliasValue = getAttribute(aliasName, expectedType)__		boolean attributeDeclared = !ObjectUtils.isEmpty(attributeValue)__		boolean aliasDeclared = !ObjectUtils.isEmpty(aliasValue)___		if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && attributeDeclared && aliasDeclared) {_			String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__			String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +_					"are present with values of [%s] and [%s], but only one is permitted.",_					annotationType.getName(), elementName, attributeName, aliasName,_					ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__			throw new AnnotationConfigurationException(msg)__		}__		if (!attributeDeclared) {_			attributeValue = aliasValue__		}__		assertAttributePresence(attributeName, aliasName, attributeValue)___		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,string,alias,name,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,declared,object,utils,is,empty,attribute,value,boolean,alias,declared,object,utils,is,empty,alias,value,if,object,utils,null,safe,equals,attribute,value,alias,value,attribute,declared,alias,declared,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,attribute,declared,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,name,attribute,value,return,attribute,value
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1440781118;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")__		Assert.notNull(expectedType, "expectedType must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)___		List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		if (aliasNames != null) {_			for (String aliasName : aliasNames) {_				T aliasValue = getAttribute(aliasName, expectedType)__				boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)__				boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)___				if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) {_					String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__					String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +_							"are present with values of [%s] and [%s], but only one is permitted.",_							annotationType.getName(), elementName, attributeName, aliasName,_							ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__					throw new AnnotationConfigurationException(msg)__				}__				_				_				_				if (expectedType.isArray() && attributeValue == null && aliasValue != null) {_					attributeValue = aliasValue__				}_				_				_				else if (attributeEmpty && !aliasEmpty) {_					attributeValue = aliasValue__				}_			}_			assertAttributePresence(attributeName, aliasNames, attributeValue)__		}__		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,list,string,alias,names,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,if,alias,names,null,for,string,alias,name,alias,names,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,empty,object,utils,is,empty,attribute,value,boolean,alias,empty,object,utils,is,empty,alias,value,if,attribute,empty,alias,empty,object,utils,null,safe,equals,attribute,value,alias,value,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,expected,type,is,array,attribute,value,null,alias,value,null,attribute,value,alias,value,else,if,attribute,empty,alias,empty,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,names,attribute,value,return,attribute,value
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1468334463;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "attributeName must not be null or empty")__		Assert.notNull(annotationType, "annotationType must not be null")__		Assert.notNull(expectedType, "expectedType must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)___		List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		if (aliasNames != null) {_			for (String aliasName : aliasNames) {_				T aliasValue = getAttribute(aliasName, expectedType)__				boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)__				boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)___				if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) {_					String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__					String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +_							"are present with values of [%s] and [%s], but only one is permitted.",_							annotationType.getName(), elementName, attributeName, aliasName,_							ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__					throw new AnnotationConfigurationException(msg)__				}__				_				_				_				if (expectedType.isArray() && attributeValue == null && aliasValue != null) {_					attributeValue = aliasValue__				}_				_				_				else if (attributeEmpty && !aliasEmpty) {_					attributeValue = aliasValue__				}_			}_			assertAttributePresence(attributeName, aliasNames, attributeValue)__		}__		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,list,string,alias,names,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,if,alias,names,null,for,string,alias,name,alias,names,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,empty,object,utils,is,empty,attribute,value,boolean,alias,empty,object,utils,is,empty,alias,value,if,attribute,empty,alias,empty,object,utils,null,safe,equals,attribute,value,alias,value,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,expected,type,is,array,attribute,value,null,alias,value,null,attribute,value,alias,value,else,if,attribute,empty,alias,empty,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,names,attribute,value,return,attribute,value
AnnotationAttributes -> private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource, Class<T> expectedType);1468583965;Get the value stored under the specified {@code attributeName} as an_object of the {@code expectedType}, taking into account alias semantics_defined via {@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@param expectedType the expected type_ never {@code null}_@return the value_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of the {@code expectedType}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2_@see ObjectUtils#isEmpty(Object);private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource, Class<T> expectedType) {__		Assert.hasText(attributeName, "'attributeName' must not be null or empty")__		Assert.notNull(annotationType, "'annotationType' must not be null")__		Assert.notNull(expectedType, "'expectedType' must not be null")___		T attributeValue = getAttribute(attributeName, expectedType)___		List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)__		if (aliasNames != null) {_			for (String aliasName : aliasNames) {_				T aliasValue = getAttribute(aliasName, expectedType)__				boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)__				boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)___				if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) {_					String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())__					String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its " +_							"alias [%s] are present with values of [%s] and [%s], but only one is permitted.",_							annotationType.getName(), elementName, attributeName, aliasName,_							ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))__					throw new AnnotationConfigurationException(msg)__				}__				_				_				_				if (expectedType.isArray() && attributeValue == null && aliasValue != null) {_					attributeValue = aliasValue__				}_				_				_				else if (attributeEmpty && !aliasEmpty) {_					attributeValue = aliasValue__				}_			}_			assertAttributePresence(attributeName, aliasNames, attributeValue)__		}__		return attributeValue__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,object,of,the,code,expected,type,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,param,expected,type,the,expected,type,never,code,null,return,the,value,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,the,code,expected,type,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2,see,object,utils,is,empty,object;private,t,t,get,required,attribute,with,alias,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,class,t,expected,type,assert,has,text,attribute,name,attribute,name,must,not,be,null,or,empty,assert,not,null,annotation,type,annotation,type,must,not,be,null,assert,not,null,expected,type,expected,type,must,not,be,null,t,attribute,value,get,attribute,attribute,name,expected,type,list,string,alias,names,annotation,utils,get,attribute,alias,map,annotation,type,get,attribute,name,if,alias,names,null,for,string,alias,name,alias,names,t,alias,value,get,attribute,alias,name,expected,type,boolean,attribute,empty,object,utils,is,empty,attribute,value,boolean,alias,empty,object,utils,is,empty,alias,value,if,attribute,empty,alias,empty,object,utils,null,safe,equals,attribute,value,alias,value,string,element,name,annotation,source,null,unknown,element,annotation,source,to,string,string,msg,string,format,in,annotation,s,declared,on,s,attribute,s,and,its,alias,s,are,present,with,values,of,s,and,s,but,only,one,is,permitted,annotation,type,get,name,element,name,attribute,name,alias,name,object,utils,null,safe,to,string,attribute,value,object,utils,null,safe,to,string,alias,value,throw,new,annotation,configuration,exception,msg,if,expected,type,is,array,attribute,value,null,alias,value,null,attribute,value,alias,value,else,if,attribute,empty,alias,empty,attribute,value,alias,value,assert,attribute,presence,attribute,name,alias,names,attribute,value,return,attribute,value
AnnotationAttributes -> public boolean getBoolean(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return doGet(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,do,get,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return doGet(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,do,get,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return doGet(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,do,get,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as a_boolean._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as a boolean._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as a boolean._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> public boolean getBoolean(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as a boolean._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public boolean getBoolean(String attributeName) {_		return getRequiredAttribute(attributeName, Boolean.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,boolean,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,boolean,get,boolean,string,attribute,name,return,get,required,attribute,attribute,name,boolean,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1432738981;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) doGet(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,do,get,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1433381203;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) doGet(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,do,get,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1433445833;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1434136173;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1436182516;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1436186512;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1440781118;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468334463;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468583965;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468605093;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468605234;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468605293;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468613531;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1468951740;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1495868221;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1496837955;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1498780456;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType);1549958959;Get the array of type {@code annotationType} stored under the specified_{@code attributeName}._<p>If the value stored under the specified {@code attributeName} is_an {@code Annotation}, it will be wrapped in a single-element array_before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@param annotationType the expected annotation type_ never {@code null}_@return the annotation array_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type_@since 4.2;@SuppressWarnings("unchecked")_	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {_		Object array = Array.newInstance(annotationType, 0)__		return (A[]) getRequiredAttribute(attributeName, array.getClass())__	};get,the,array,of,type,code,annotation,type,stored,under,the,specified,code,attribute,name,p,if,the,value,stored,under,the,specified,code,attribute,name,is,an,code,annotation,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,expected,annotation,type,never,code,null,return,the,annotation,array,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type,since,4,2;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,array,string,attribute,name,class,a,annotation,type,object,array,array,new,instance,annotation,type,0,return,a,get,required,attribute,attribute,name,array,get,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return doGet(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return doGet(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return doGet(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String[] getStringArray(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as an_array of strings._<p>If the value stored under the specified {@code attributeName} is_a string, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String[] getStringArray(String attributeName) {_		return getRequiredAttribute(attributeName, String[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,strings,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,string,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,array,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1329142650;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}__		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}__		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1351673950;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}__		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}__		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1356735495;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}__		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}__		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1368482696;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}__		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}__		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1377099356;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1431254607;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1431256204;Return an {@link AnnotationAttributes} instance based on the given map_ if the map_is already an {@code AnnotationAttributes} instance, it is casted and returned_immediately without creating any new instance_ otherwise create a new instance by_wrapping the map with the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,if,the,map,is,already,an,code,annotation,attributes,instance,it,is,casted,and,returned,immediately,without,creating,any,new,instance,otherwise,create,a,new,instance,by,wrapping,the,map,with,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432246071;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432302769;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432323470;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432398350;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute key/value pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,key,value,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432736125;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1432738981;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1433381203;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1433445833;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1434136173;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1436182516;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1436186512;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1440781118;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468334463;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468583965;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468605093;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468605234;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468605293;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468613531;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1468951740;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public static AnnotationAttributes fromMap(Map<String, Object> map);1495868221;Return an {@link AnnotationAttributes} instance based on the given map._<p>If the map is already an {@code AnnotationAttributes} instance, it_will be cast and returned immediately without creating a new instance._Otherwise a new instance will be created by passing the supplied map_to the {@link #AnnotationAttributes(Map)} constructor._@param map original source of annotation attribute <em>key-value</em> pairs;public static AnnotationAttributes fromMap(Map<String, Object> map) {_		if (map == null) {_			return null__		}_		if (map instanceof AnnotationAttributes) {_			return (AnnotationAttributes) map__		}_		return new AnnotationAttributes(map)__	};return,an,link,annotation,attributes,instance,based,on,the,given,map,p,if,the,map,is,already,an,code,annotation,attributes,instance,it,will,be,cast,and,returned,immediately,without,creating,a,new,instance,otherwise,a,new,instance,will,be,created,by,passing,the,supplied,map,to,the,link,annotation,attributes,map,constructor,param,map,original,source,of,annotation,attribute,em,key,value,em,pairs;public,static,annotation,attributes,from,map,map,string,object,map,if,map,null,return,null,if,map,instanceof,annotation,attributes,return,annotation,attributes,map,return,new,annotation,attributes,map
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return doGet(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return doGet(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return doGet(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,do,get,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is_a class, it will be wrapped in a single-element array before_returning it._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is a class,_it will be wrapped in a single-element array before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is a class,_it will be wrapped in a single-element array before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getClassArray(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as an_array of classes._<p>If the value stored under the specified {@code attributeName} is a class,_it will be wrapped in a single-element array before returning it._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public Class<?>[] getClassArray(String attributeName) {_		return getRequiredAttribute(attributeName, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,p,if,the,value,stored,under,the,specified,code,attribute,name,is,a,class,it,will,be,wrapped,in,a,single,element,array,before,returning,it,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,class,get,class,array,string,attribute,name,return,get,required,attribute,attribute,name,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1433445833;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {_		return getRequiredArrayWithAttributeAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,array,with,attribute,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1434136173;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned.__@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {_		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436182516;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1436186512;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1440781118;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType, 			Object annotationSource);1468334463;Get the value stored under the specified {@code attributeName} as an_array of classes, taking into account alias semantics defined via_{@link AliasFor @AliasFor}._<p>If there is no value stored under the specified {@code attributeName}_but the attribute has an alias declared via {@code @AliasFor}, the_value of the alias will be returned._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param annotationSource the source of the annotation represented by_this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement})__or {@code null} if unknown_@return the array of classes_@throws IllegalArgumentException if the attribute and its alias do_not exist or are not of type {@code Class[]}_@throws AnnotationConfigurationException if the attribute and its_alias are both present with different non-empty values_@since 4.2;public Class<?>[] getAliasedClassArray(String attributeName, Class<? extends Annotation> annotationType,_			Object annotationSource) {__		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,array,of,classes,taking,into,account,alias,semantics,defined,via,link,alias,for,alias,for,p,if,there,is,no,value,stored,under,the,specified,code,attribute,name,but,the,attribute,has,an,alias,declared,via,code,alias,for,the,value,of,the,alias,will,be,returned,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,annotation,source,the,source,of,the,annotation,represented,by,this,code,annotation,attributes,e,g,the,link,annotated,element,or,code,null,if,unknown,return,the,array,of,classes,throws,illegal,argument,exception,if,the,attribute,and,its,alias,do,not,exist,or,are,not,of,type,code,class,throws,annotation,configuration,exception,if,the,attribute,and,its,alias,are,both,present,with,different,non,empty,values,since,4,2;public,class,get,aliased,class,array,string,attribute,name,class,extends,annotation,annotation,type,object,annotation,source,return,get,required,attribute,with,alias,attribute,name,annotation,type,annotation,source,class,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468583965;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;@SuppressWarnings("unchecked")_	public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		if (classLoader != null) {_			try {_				this.annotationType = (Class<? extends Annotation>) classLoader.loadClass(annotationType)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;suppress,warnings,unchecked,public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,if,class,loader,null,try,this,annotation,type,class,extends,annotation,class,loader,load,class,annotation,type,catch,class,not,found,exception,ex,this,display,name,annotation,type
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468605093;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;@SuppressWarnings("unchecked")_	public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		if (classLoader != null) {_			try {_				this.annotationType = (Class<? extends Annotation>) classLoader.loadClass(annotationType)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;suppress,warnings,unchecked,public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,if,class,loader,null,try,this,annotation,type,class,extends,annotation,class,loader,load,class,annotation,type,catch,class,not,found,exception,ex,this,display,name,annotation,type
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public AnnotationAttributes(String annotationType, ClassLoader classLoader);1468605234;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@param classLoader the ClassLoader to try to load the annotation type on,_or {@code null} to just store the annotation type name_@since 4.3.2;@SuppressWarnings("unchecked")_	public AnnotationAttributes(String annotationType, ClassLoader classLoader) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		if (classLoader != null) {_			try {_				this.annotationType = (Class<? extends Annotation>) classLoader.loadClass(annotationType)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		this.displayName = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,param,class,loader,the,class,loader,to,try,to,load,the,annotation,type,on,or,code,null,to,just,store,the,annotation,type,name,since,4,3,2;suppress,warnings,unchecked,public,annotation,attributes,string,annotation,type,class,loader,class,loader,assert,not,null,annotation,type,annotation,type,must,not,be,null,if,class,loader,null,try,this,annotation,type,class,extends,annotation,class,loader,load,class,annotation,type,catch,class,not,found,exception,ex,this,display,name,annotation,type
AnnotationAttributes -> public AnnotationAttributes();1329142650;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1351673950;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1356735495;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1368482696;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1377099356;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1431254607;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1431256204;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes
AnnotationAttributes -> public AnnotationAttributes();1432246071;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes();1432302769;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null
AnnotationAttributes -> public AnnotationAttributes();1432323470;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1432398350;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1432736125;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1432738981;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1433381203;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1433445833;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1434136173;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1436182516;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1436186512;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1440781118;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468334463;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = "unknown"__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468583965;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468605093;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468605234;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468605293;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468613531;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1468951740;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1495868221;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1496837955;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1498780456;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> public AnnotationAttributes();1549958959;Create a new, empty {@link AnnotationAttributes} instance.;public AnnotationAttributes() {_		this.annotationType = null__		this.displayName = UNKNOWN__	};create,a,new,empty,link,annotation,attributes,instance;public,annotation,attributes,this,annotation,type,null,this,display,name,unknown
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) doGet(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,do,get,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) doGet(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,do,get,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) doGet(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,do,get,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as an_enum._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as an enum._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as an enum._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @SuppressWarnings("unchecked") 	public <E extends Enum<?>> E getEnum(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as an enum._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;@SuppressWarnings("unchecked")_	public <E extends Enum<?>> E getEnum(String attributeName) {_		return (E) getRequiredAttribute(attributeName, Enum.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,an,enum,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;suppress,warnings,unchecked,public,e,extends,enum,e,get,enum,string,attribute,name,return,e,get,required,attribute,attribute,name,enum,class
AnnotationAttributes -> @Nullable 	public Class<? extends Annotation> annotationType();1495868221;Get the type of annotation represented by this_{@code AnnotationAttributes} instance._@return the annotation type, or {@code null} if unknown_@since 4.2;@Nullable_	public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,return,the,annotation,type,or,code,null,if,unknown,since,4,2;nullable,public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> @Nullable 	public Class<? extends Annotation> annotationType();1496837955;Get the type of annotation represented by this {@code AnnotationAttributes}._@return the annotation type, or {@code null} if unknown_@since 4.2;@Nullable_	public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,return,the,annotation,type,or,code,null,if,unknown,since,4,2;nullable,public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> @Nullable 	public Class<? extends Annotation> annotationType();1498780456;Get the type of annotation represented by this {@code AnnotationAttributes}._@return the annotation type, or {@code null} if unknown_@since 4.2;@Nullable_	public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,return,the,annotation,type,or,code,null,if,unknown,since,4,2;nullable,public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> @Nullable 	public Class<? extends Annotation> annotationType();1549958959;Get the type of annotation represented by this {@code AnnotationAttributes}._@return the annotation type, or {@code null} if unknown_@since 4.2;@Nullable_	public Class<? extends Annotation> annotationType() {_		return this.annotationType__	};get,the,type,of,annotation,represented,by,this,code,annotation,attributes,return,the,annotation,type,or,code,null,if,unknown,since,4,2;nullable,public,class,extends,annotation,annotation,type,return,this,annotation,type
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432246071;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		this.annotationType = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,this,annotation,type,annotation,type
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432302769;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		this.annotationType = annotationType__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,this,annotation,type,annotation,type
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432323470;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		this.annotationType = annotationType__		this.displayName = (annotationType() != null ? annotationType.getName() : "unknown")__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,this,annotation,type,annotation,type,this,display,name,annotation,type,null,annotation,type,get,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432398350;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		this.annotationType = annotationType__		this.displayName = (annotationType() != null ? annotationType.getName() : "unknown")__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,this,annotation,type,annotation,type,this,display,name,annotation,type,null,annotation,type,get,name,unknown
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432736125;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1432738981;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1433381203;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1433445833;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1434136173;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1436182516;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1436186512;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1440781118;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468334463;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "annotationType must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468583965;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468605093;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468605234;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468605293;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468613531;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1468951740;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1495868221;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1496837955;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1498780456;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public AnnotationAttributes(Class<? extends Annotation> annotationType);1549958959;Create a new, empty {@link AnnotationAttributes} instance for the_specified {@code annotationType}._@param annotationType the type of annotation represented by this_{@code AnnotationAttributes} instance_ never {@code null}_@since 4.2;public AnnotationAttributes(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "'annotationType' must not be null")__		this.annotationType = annotationType__		this.displayName = annotationType.getName()__	};create,a,new,empty,link,annotation,attributes,instance,for,the,specified,code,annotation,type,param,annotation,type,the,type,of,annotation,represented,by,this,code,annotation,attributes,instance,never,code,null,since,4,2;public,annotation,attributes,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,display,name,annotation,type,get,name
AnnotationAttributes -> public String getString(String attributeName);1432736125;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return doGet(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1432738981;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return doGet(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1433381203;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return doGet(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,do,get,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1433445833;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1434136173;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1436182516;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1436186512;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1440781118;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468334463;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468583965;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468605093;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468605234;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468605293;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468613531;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1468951740;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1495868221;Get the value stored under the specified {@code attributeName} as a_string._@param attributeName the name of the attribute to get_ never_{@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1496837955;Get the value stored under the specified {@code attributeName} as a string._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1498780456;Get the value stored under the specified {@code attributeName} as a string._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public String getString(String attributeName);1549958959;Get the value stored under the specified {@code attributeName} as a string._@param attributeName the name of the attribute to get__never {@code null} or empty_@return the value_@throws IllegalArgumentException if the attribute does not exist or_if it is not of the expected type;public String getString(String attributeName) {_		return getRequiredAttribute(attributeName, String.class)__	};get,the,value,stored,under,the,specified,code,attribute,name,as,a,string,param,attribute,name,the,name,of,the,attribute,to,get,never,code,null,or,empty,return,the,value,throws,illegal,argument,exception,if,the,attribute,does,not,exist,or,if,it,is,not,of,the,expected,type;public,string,get,string,string,attribute,name,return,get,required,attribute,attribute,name,string,class
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468583965;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468605093;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468605234;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468605293;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468613531;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1468951740;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1495868221;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1496837955;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1498780456;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
AnnotationAttributes -> public AnnotationAttributes(AnnotationAttributes other);1549958959;Create a new {@link AnnotationAttributes} instance, wrapping the provided_map and all its <em>key-value</em> pairs._@param other original source of annotation attribute <em>key-value</em> pairs_@see #fromMap(Map);public AnnotationAttributes(AnnotationAttributes other) {_		super(other)__		this.annotationType = other.annotationType__		this.displayName = other.displayName__		this.validated = other.validated__	};create,a,new,link,annotation,attributes,instance,wrapping,the,provided,map,and,all,its,em,key,value,em,pairs,param,other,original,source,of,annotation,attribute,em,key,value,em,pairs,see,from,map,map;public,annotation,attributes,annotation,attributes,other,super,other,this,annotation,type,other,annotation,type,this,display,name,other,display,name,this,validated,other,validated
