# id;timestamp;commentText;codeText;commentWords;codeWords
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1328020251;Convert the source to targetType._The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations._@param source the source object to convert (may be null)_@param sourceType context about the source type converting from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}</code>_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,source,to,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,null,param,source,type,context,about,the,source,type,converting,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,code,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1351285766;Convert the source to targetType._The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations._@param source the source object to convert (may be null)_@param sourceType context about the source type converting from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}</code>_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,source,to,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,null,param,source,type,context,about,the,source,type,converting,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,code,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1351584957;Convert the source to targetType._The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations._@param source the source object to convert (may be null)_@param sourceType context about the source type converting from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}</code>_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,source,to,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,null,param,source,type,context,about,the,source,type,converting,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,code,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1351630812;Convert the source to targetType._The TypeDescriptors provide additional context about the source and target locations where conversion will occur, often object fields or property locations._@param source the source object to convert (may be null)_@param sourceType context about the source type converting from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}</code>_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null_@throws IllegalArgumentException if sourceType is null but source is not null;Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,source,to,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,null,param,source,type,context,about,the,source,type,converting,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,code,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null,throws,illegal,argument,exception,if,source,type,is,null,but,source,is,not,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1387312780;Convert the given {@code source} to the specified {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion will occur, often object fields or property locations._@param source the source object to convert (may be null)_@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or {@code sourceType} is {@code null} but source is not {@code null};Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,given,code,source,to,the,specified,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,null,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,code,source,type,is,code,null,but,source,is,not,code,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;1467190636;Convert the given {@code source} to the specified {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion will occur, often object fields or property locations._@param source the source object to convert (may be {@code null})_@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null},_or {@code sourceType} is {@code null} but source is not {@code null};Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,the,given,code,source,to,the,specified,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,will,occur,often,object,fields,or,property,locations,param,source,the,source,object,to,convert,may,be,code,null,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,link,type,descriptor,get,object,type,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null,or,code,source,type,is,code,null,but,source,is,not,code,null;object,convert,object,source,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1328020251;Returns true if objects of sourceType can be converted to the targetType._The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations._If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if a conversion can be performed between the source and target types, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,the,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,if,this,method,returns,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1351285766;Returns true if objects of sourceType can be converted to the targetType._The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations._If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if a conversion can be performed between the source and target types, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,the,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,if,this,method,returns,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1351584957;Returns true if objects of sourceType can be converted to the targetType._The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations._If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if a conversion can be performed between the source and target types, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,the,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,if,this,method,returns,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1351630812;Returns true if objects of sourceType can be converted to the targetType._The TypeDescriptors provide additional context about the source and target locations where conversion would occur, often object fields or property locations._If this method returns true, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType context about the source type to convert from (may be null if source is null)_@param targetType context about the target type to convert to (required)_@return true if a conversion can be performed between the source and target types, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,the,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,if,this,method,returns,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1387312780;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion would occur, often object fields or property locations._<p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}_is capable of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if a conversion can be performed between the source and target types,_{@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,p,if,this,method,returns,code,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1467190636;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion would occur, often object fields or property locations._<p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}_is capable of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if a conversion can be performed between the source and target types,_{@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,p,if,this,method,returns,code,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1328020251;Convert the source to targetType._@param source the source object to convert (may be null)_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null;<T> T convert(Object source, Class<T> targetType)_;convert,the,source,to,target,type,param,source,the,source,object,to,convert,may,be,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null;t,t,convert,object,source,class,t,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1351285766;Convert the source to targetType._@param source the source object to convert (may be null)_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null;<T> T convert(Object source, Class<T> targetType)_;convert,the,source,to,target,type,param,source,the,source,object,to,convert,may,be,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null;t,t,convert,object,source,class,t,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1351584957;Convert the source to targetType._@param source the source object to convert (may be null)_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null;<T> T convert(Object source, Class<T> targetType)_;convert,the,source,to,target,type,param,source,the,source,object,to,convert,may,be,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null;t,t,convert,object,source,class,t,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1351630812;Convert the source to targetType._@param source the source object to convert (may be null)_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null;<T> T convert(Object source, Class<T> targetType)_;convert,the,source,to,target,type,param,source,the,source,object,to,convert,may,be,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null;t,t,convert,object,source,class,t,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1387312780;Convert the given {@code source} to the specified {@code targetType}._@param source the source object to convert (may be null)_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is null;<T> T convert(Object source, Class<T> targetType)_;convert,the,given,code,source,to,the,specified,code,target,type,param,source,the,source,object,to,convert,may,be,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,null;t,t,convert,object,source,class,t,target,type
ConversionService -> <T> T convert(Object source, Class<T> targetType)_;1467190636;Convert the given {@code source} to the specified {@code targetType}._@param source the source object to convert (may be {@code null})_@param targetType the target type to convert to (required)_@return the converted object, an instance of targetType_@throws ConversionException if a conversion exception occurred_@throws IllegalArgumentException if targetType is {@code null};<T> T convert(Object source, Class<T> targetType)_;convert,the,given,code,source,to,the,specified,code,target,type,param,source,the,source,object,to,convert,may,be,code,null,param,target,type,the,target,type,to,convert,to,required,return,the,converted,object,an,instance,of,target,type,throws,conversion,exception,if,a,conversion,exception,occurred,throws,illegal,argument,exception,if,target,type,is,code,null;t,t,convert,object,source,class,t,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1328020251;Returns true if objects of sourceType can be converted to targetType._If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType the source type to convert from (may be null if source is null)_@param targetType the target type to convert to (required)_@return true if a conversion can be performed, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(Class<?> sourceType, Class<?> targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,target,type,if,this,method,returns,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1351285766;Returns true if objects of sourceType can be converted to targetType._If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType the source type to convert from (may be null if source is null)_@param targetType the target type to convert to (required)_@return true if a conversion can be performed, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(Class<?> sourceType, Class<?> targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,target,type,if,this,method,returns,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1351584957;Returns true if objects of sourceType can be converted to targetType._If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType the source type to convert from (may be null if source is null)_@param targetType the target type to convert to (required)_@return true if a conversion can be performed, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(Class<?> sourceType, Class<?> targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,target,type,if,this,method,returns,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1351630812;Returns true if objects of sourceType can be converted to targetType._If this method returns true, it means {@link #convert(Object, Class)} is capable of converting an instance of sourceType to targetType._Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return 'true'_even though a convert invocation may still generate a {@link ConversionException} if the underlying elements are not convertible._Callers are expected to handle this exceptional case when working with collections and maps._@param sourceType the source type to convert from (may be null if source is null)_@param targetType the target type to convert to (required)_@return true if a conversion can be performed, false if not_@throws IllegalArgumentException if targetType is null;boolean canConvert(Class<?> sourceType, Class<?> targetType)_;returns,true,if,objects,of,source,type,can,be,converted,to,target,type,if,this,method,returns,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,source,type,to,target,type,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,null,if,source,is,null,param,target,type,the,target,type,to,convert,to,required,return,true,if,a,conversion,can,be,performed,false,if,not,throws,illegal,argument,exception,if,target,type,is,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1387312780;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._<p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable_of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType the source type to convert from (may be {@code null} if source is {@code null})_@param targetType the target type to convert to (required)_@return {@code true} if a conversion can be performed, {@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(Class<?> sourceType, Class<?> targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,p,if,this,method,returns,code,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(Class<?> sourceType, Class<?> targetType)_;1467190636;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._<p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable_of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType the source type to convert from (may be {@code null} if source is {@code null})_@param targetType the target type to convert to (required)_@return {@code true} if a conversion can be performed, {@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(Class<?> sourceType, Class<?> targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,p,if,this,method,returns,code,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,class,source,type,class,target,type
ConversionService -> boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType)_;1495868221;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion would occur, often object fields or property locations._<p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}_is capable of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if a conversion can be performed between the source and target types,_{@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,p,if,this,method,returns,code,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,nullable,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType)_;1496837955;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._The TypeDescriptors provide additional context about the source and target locations_where conversion would occur, often object fields or property locations._<p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}_is capable of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType context about the source type to convert from_(may be {@code null} if source is {@code null})_@param targetType context about the target type to convert to (required)_@return {@code true} if a conversion can be performed between the source and target types,_{@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,the,type,descriptors,provide,additional,context,about,the,source,and,target,locations,where,conversion,would,occur,often,object,fields,or,property,locations,p,if,this,method,returns,code,true,it,means,link,convert,object,type,descriptor,type,descriptor,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,context,about,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,context,about,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,between,the,source,and,target,types,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,nullable,type,descriptor,source,type,type,descriptor,target,type
ConversionService -> boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType)_;1495868221;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._<p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable_of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType the source type to convert from (may be {@code null} if source is {@code null})_@param targetType the target type to convert to (required)_@return {@code true} if a conversion can be performed, {@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,p,if,this,method,returns,code,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,nullable,class,source,type,class,target,type
ConversionService -> boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType)_;1496837955;Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}._<p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable_of converting an instance of {@code sourceType} to {@code targetType}._<p>Special note on collections, arrays, and maps types:_For conversion between collection, array, and map types, this method will return {@code true}_even though a convert invocation may still generate a {@link ConversionException} if the_underlying elements are not convertible. Callers are expected to handle this exceptional case_when working with collections and maps._@param sourceType the source type to convert from (may be {@code null} if source is {@code null})_@param targetType the target type to convert to (required)_@return {@code true} if a conversion can be performed, {@code false} if not_@throws IllegalArgumentException if {@code targetType} is {@code null};boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType)_;return,code,true,if,objects,of,code,source,type,can,be,converted,to,the,code,target,type,p,if,this,method,returns,code,true,it,means,link,convert,object,class,is,capable,of,converting,an,instance,of,code,source,type,to,code,target,type,p,special,note,on,collections,arrays,and,maps,types,for,conversion,between,collection,array,and,map,types,this,method,will,return,code,true,even,though,a,convert,invocation,may,still,generate,a,link,conversion,exception,if,the,underlying,elements,are,not,convertible,callers,are,expected,to,handle,this,exceptional,case,when,working,with,collections,and,maps,param,source,type,the,source,type,to,convert,from,may,be,code,null,if,source,is,code,null,param,target,type,the,target,type,to,convert,to,required,return,code,true,if,a,conversion,can,be,performed,code,false,if,not,throws,illegal,argument,exception,if,code,target,type,is,code,null;boolean,can,convert,nullable,class,source,type,class,target,type
