# id;timestamp;commentText;codeText;commentWords;codeWords
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1409784073;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1420620704;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1424335640;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1438262644;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1456234269;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> Object getOrderSource(Object obj)_;1467808333;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;object,get,order,source,object,obj
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1495868221;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1496259743;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1496837955;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1501148345;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1518772998;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> @Nullable 	public Integer getPriority(Object obj);1536962185;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;@Nullable_	public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;nullable,public,integer,get,priority,object,obj,return,null
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1409784073;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			order = findOrder(sourceProvider.getOrderSource(obj))__		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,order,find,order,source,provider,get,order,source,obj,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1420620704;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			order = findOrder(sourceProvider.getOrderSource(obj))__		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,order,find,order,source,provider,get,order,source,obj,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1424335640;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1438262644;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1456234269;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1467808333;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1495868221;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(Object obj, OrderSourceProvider sourceProvider);1496259743;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(Object obj, OrderSourceProvider sourceProvider) {_		Integer order = null__		if (sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null && orderSource.getClass().isArray()) {_				Object[] sources = ObjectUtils.toObjectArray(orderSource)__				for (Object source : sources) {_					order = findOrder(source)__					if (order != null) {_						break__					}_				}_			}_			else {_				order = findOrder(orderSource)__			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,object,obj,order,source,provider,source,provider,integer,order,null,if,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> protected int getOrder(@Nullable Object obj);1501148345;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(@Nullable Object obj) {_		if (obj != null) {_			Integer order = findOrder(obj)__			if (order != null) {_				return order__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,nullable,object,obj,if,obj,null,integer,order,find,order,obj,if,order,null,return,order,return,ordered
OrderComparator -> protected int getOrder(@Nullable Object obj);1518772998;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(@Nullable Object obj) {_		if (obj != null) {_			Integer order = findOrder(obj)__			if (order != null) {_				return order__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,nullable,object,obj,if,obj,null,integer,order,find,order,obj,if,order,null,return,order,return,ordered
OrderComparator -> protected int getOrder(@Nullable Object obj);1536962185;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(@Nullable Object obj) {_		if (obj != null) {_			Integer order = findOrder(obj)__			if (order != null) {_				return order__			}_		}_		return Ordered.LOWEST_PRECEDENCE__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,nullable,object,obj,if,obj,null,integer,order,find,order,obj,if,order,null,return,order,return,ordered
OrderComparator -> public static void sort(Object[] array);1328020251;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1329142650;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1356735495;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1357119239;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1368482696;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1377182590;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1385412762;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1409784073;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1420620704;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1424335640;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1438262644;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1456234269;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1467808333;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1495868221;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1496259743;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1496837955;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1501148345;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1518772998;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public static void sort(Object[] array);1536962185;Sort the given array with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
OrderComparator -> public Integer getPriority(Object obj);1409784073;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> public Integer getPriority(Object obj);1420620704;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> public Integer getPriority(Object obj);1424335640;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> public Integer getPriority(Object obj);1438262644;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> public Integer getPriority(Object obj);1456234269;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> public Integer getPriority(Object obj);1467808333;Determine a priority value for the given object, if any._<p>The default implementation always returns {@code null}._Subclasses may override this to give specific kinds of values a_'priority' characteristic, in addition to their 'order' semantics._A priority indicates that it may be used for selecting one object over_another, in addition to serving for ordering purposes in a list/array._@param obj the object to check_@return the priority value, or {@code null} if none_@since 4.1;public Integer getPriority(Object obj) {_		return null__	};determine,a,priority,value,for,the,given,object,if,any,p,the,default,implementation,always,returns,code,null,subclasses,may,override,this,to,give,specific,kinds,of,values,a,priority,characteristic,in,addition,to,their,order,semantics,a,priority,indicates,that,it,may,be,used,for,selecting,one,object,over,another,in,addition,to,serving,for,ordering,purposes,in,a,list,array,param,obj,the,object,to,check,return,the,priority,value,or,code,null,if,none,since,4,1;public,integer,get,priority,object,obj,return,null
OrderComparator -> protected Integer findOrder(Object obj);1409784073;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> protected Integer findOrder(Object obj);1420620704;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> protected Integer findOrder(Object obj);1424335640;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> protected Integer findOrder(Object obj);1438262644;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> protected Integer findOrder(Object obj);1456234269;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> protected Integer findOrder(Object obj);1467808333;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> public static void sort(List<?> list);1328020251;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1329142650;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1356735495;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1357119239;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1368482696;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1377182590;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1385412762;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1409784073;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1420620704;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1424335640;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1438262644;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1456234269;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1467808333;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1495868221;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1496259743;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1496837955;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1501148345;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
OrderComparator -> public static void sort(List<?> list);1518772998;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.List#sort(java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			list.sort(INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,list,sort,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,list,sort,instance
OrderComparator -> public static void sort(List<?> list);1536962185;Sort the given List with a default OrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.List#sort(java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			list.sort(INSTANCE)__		}_	};sort,the,given,list,with,a,default,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,list,sort,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,list,sort,instance
OrderComparator -> protected int getOrder(Object obj);1328020251;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or <code>Ordered.LOWEST_PRECEDENCE</code> as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,code,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1329142650;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or <code>Ordered.LOWEST_PRECEDENCE</code> as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,code,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1356735495;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1357119239;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1368482696;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1377182590;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1385412762;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered}_interface. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,ordered
OrderComparator -> protected int getOrder(Object obj);1409784073;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1420620704;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1424335640;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1438262644;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1456234269;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1467808333;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1495868221;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1496259743;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> protected int getOrder(Object obj);1496837955;Determine the order value for the given object._<p>The default implementation checks against the {@link Ordered} interface_through delegating to {@link #findOrder}. Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;protected int getOrder(Object obj) {_		Integer order = findOrder(obj)__		return (order != null ? order : Ordered.LOWEST_PRECEDENCE)__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,through,delegating,to,link,find,order,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;protected,int,get,order,object,obj,integer,order,find,order,obj,return,order,null,order,ordered
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1495868221;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1496259743;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1496837955;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1501148345;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1518772998;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> OrderSourceProvider -> @Nullable 		Object getOrderSource(Object obj)_;1536962185;Return an order source for the specified object, i.e. an object that_should be checked for an order value as a replacement to the given object._<p>Can also be an array of order source objects._<p>If the returned object does not indicate any order, the comparator_will fall back to checking the original object._@param obj the object to find an order source for_@return the order source for that object, or {@code null} if none found;@Nullable_		Object getOrderSource(Object obj)_;return,an,order,source,for,the,specified,object,i,e,an,object,that,should,be,checked,for,an,order,value,as,a,replacement,to,the,given,object,p,can,also,be,an,array,of,order,source,objects,p,if,the,returned,object,does,not,indicate,any,order,the,comparator,will,fall,back,to,checking,the,original,object,param,obj,the,object,to,find,an,order,source,for,return,the,order,source,for,that,object,or,code,null,if,none,found;nullable,object,get,order,source,object,obj
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1409784073;Build an adapted order comparator with the given soruce provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,soruce,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1420620704;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1424335640;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1438262644;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1456234269;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1467808333;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1495868221;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1496259743;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return new Comparator<Object>() {_			@Override_			public int compare(Object o1, Object o2) {_				return doCompare(o1, o2, sourceProvider)__			}_		}__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,new,comparator,object,override,public,int,compare,object,o1,object,o2,return,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1496837955;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return (o1, o2) -> doCompare(o1, o2, sourceProvider)__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,o1,o2,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1501148345;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return (o1, o2) -> doCompare(o1, o2, sourceProvider)__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,o1,o2,do,compare,o1,o2,source,provider
OrderComparator -> public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider);1518772998;Build an adapted order comparator with the given source provider._@param sourceProvider the order source provider to use_@return the adapted comparator_@since 4.1;public Comparator<Object> withSourceProvider(final OrderSourceProvider sourceProvider) {_		return (o1, o2) -> doCompare(o1, o2, sourceProvider)__	};build,an,adapted,order,comparator,with,the,given,source,provider,param,source,provider,the,order,source,provider,to,use,return,the,adapted,comparator,since,4,1;public,comparator,object,with,source,provider,final,order,source,provider,source,provider,return,o1,o2,do,compare,o1,o2,source,provider
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1495868221;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1496259743;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1496837955;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1501148345;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1518772998;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> @Nullable 	protected Integer findOrder(Object obj);1536962185;Find an order value indicated by the given object._<p>The default implementation checks against the {@link Ordered} interface._Can be overridden in subclasses._@param obj the object to check_@return the order value, or {@code null} if none found;@Nullable_	protected Integer findOrder(Object obj) {_		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null)__	};find,an,order,value,indicated,by,the,given,object,p,the,default,implementation,checks,against,the,link,ordered,interface,can,be,overridden,in,subclasses,param,obj,the,object,to,check,return,the,order,value,or,code,null,if,none,found;nullable,protected,integer,find,order,object,obj,return,obj,instanceof,ordered,ordered,obj,get,order,null
OrderComparator -> private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider);1501148345;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {_		Integer order = null__		if (obj != null && sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null) {_				if (orderSource.getClass().isArray()) {_					Object[] sources = ObjectUtils.toObjectArray(orderSource)__					for (Object source : sources) {_						order = findOrder(source)__						if (order != null) {_							break__						}_					}_				}_				else {_					order = findOrder(orderSource)__				}_			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,nullable,object,obj,nullable,order,source,provider,source,provider,integer,order,null,if,obj,null,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,if,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider);1518772998;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {_		Integer order = null__		if (obj != null && sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null) {_				if (orderSource.getClass().isArray()) {_					Object[] sources = ObjectUtils.toObjectArray(orderSource)__					for (Object source : sources) {_						order = findOrder(source)__						if (order != null) {_							break__						}_					}_				}_				else {_					order = findOrder(orderSource)__				}_			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,nullable,object,obj,nullable,order,source,provider,source,provider,integer,order,null,if,obj,null,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,if,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider);1536962185;Determine the order value for the given object._<p>The default implementation checks against the given {@link OrderSourceProvider}_using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call._@param obj the object to check_@return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback;private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {_		Integer order = null__		if (obj != null && sourceProvider != null) {_			Object orderSource = sourceProvider.getOrderSource(obj)__			if (orderSource != null) {_				if (orderSource.getClass().isArray()) {_					Object[] sources = ObjectUtils.toObjectArray(orderSource)__					for (Object source : sources) {_						order = findOrder(source)__						if (order != null) {_							break__						}_					}_				}_				else {_					order = findOrder(orderSource)__				}_			}_		}_		return (order != null ? order : getOrder(obj))__	};determine,the,order,value,for,the,given,object,p,the,default,implementation,checks,against,the,given,link,order,source,provider,using,link,find,order,and,falls,back,to,a,regular,link,get,order,object,call,param,obj,the,object,to,check,return,the,order,value,or,code,ordered,as,fallback;private,int,get,order,nullable,object,obj,nullable,order,source,provider,source,provider,integer,order,null,if,obj,null,source,provider,null,object,order,source,source,provider,get,order,source,obj,if,order,source,null,if,order,source,get,class,is,array,object,sources,object,utils,to,object,array,order,source,for,object,source,sources,order,find,order,source,if,order,null,break,else,order,find,order,order,source,return,order,null,order,get,order,obj
OrderComparator -> public static void sortIfNecessary(Object value);1377182590;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1385412762;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1409784073;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1420620704;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1424335640;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1438262644;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1456234269;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1467808333;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1495868221;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1496259743;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1496837955;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1501148345;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1518772998;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
OrderComparator -> public static void sortIfNecessary(Object value);1536962185;Sort the given array or List with a default OrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
