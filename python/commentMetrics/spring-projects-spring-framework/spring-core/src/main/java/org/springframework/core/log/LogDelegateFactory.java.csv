commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;7;/**  * Create a composite logger that delegates to a primary or falls back on a  * secondary logger if logging for the primary logger is not enabled.  * <p>This may be used for fallback logging from lower level packages that  * logically should log together with some higher level package but the two  * don't happen to share a suitable parent package (e.g. logging for the web  * and lower level http and codec packages). For such cases the primary,  * class-based logger can be wrapped with a shared fallback logger.  * @param primaryLogger primary logger to try first  * @param secondaryLogger secondary logger  * @param tertiaryLoggers optionally, more fallback loggers  * @return the resulting logger to use  */ ;/**  * Create a composite logger that delegates to a primary or falls back on a  * secondary logger if logging for the primary logger is not enabled.  * <p>This may be used for fallback logging from lower level packages that  * logically should log together with some higher level package but the two  * don't happen to share a suitable parent package (e.g. logging for the web  * and lower level http and codec packages). For such cases the primary,  * class-based logger can be wrapped with a shared fallback logger.  * @param primaryLogger primary logger to try first  * @param secondaryLogger secondary logger  * @param tertiaryLoggers optionally, more fallback loggers  * @return the resulting logger to use  */ public static Log getCompositeLog(Log primaryLogger, Log secondaryLogger, Log... tertiaryLoggers) {     List<Log> loggers = new ArrayList<>(2 + tertiaryLoggers.length).     loggers.add(primaryLogger).     loggers.add(secondaryLogger).     Collections.addAll(loggers, tertiaryLoggers).     return new CompositeLog(loggers). }
true;public,static;1;3;/**  * Create a "hidden" logger whose name is intentionally prefixed with "_"  * because its output is either too verbose or otherwise deemed as optional  * or unnecessary to see at any log level by default under the normal package  * based log hierarchy.  * @param clazz the class for which to create a logger  * @return the created logger  */ ;/**  * Create a "hidden" logger whose name is intentionally prefixed with "_"  * because its output is either too verbose or otherwise deemed as optional  * or unnecessary to see at any log level by default under the normal package  * based log hierarchy.  * @param clazz the class for which to create a logger  * @return the created logger  */ public static Log getHiddenLog(Class<?> clazz) {     return LogFactory.getLog("_" + clazz.getName()). }
