commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the {@code Resource} held by this {@code EncodedResource}.  */ ;/**  * Return the {@code Resource} held by this {@code EncodedResource}.  */ public final Resource getResource() {     return this.resource. }
true;public,final;0;4;/**  * Return the encoding to use for reading from the {@linkplain #getResource() resource},  * or {@code null} if none specified.  */ ;/**  * Return the encoding to use for reading from the {@linkplain #getResource() resource},  * or {@code null} if none specified.  */ @Nullable public final String getEncoding() {     return this.encoding. }
true;public,final;0;4;/**  * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},  * or {@code null} if none specified.  */ ;/**  * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},  * or {@code null} if none specified.  */ @Nullable public final Charset getCharset() {     return this.charset. }
true;public;0;3;/**  * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},  * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}  * has been specified.  * @see #getReader()  * @see #getInputStream()  */ ;/**  * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},  * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}  * has been specified.  * @see #getReader()  * @see #getInputStream()  */ public boolean requiresReader() {     return (this.encoding != null || this.charset != null). }
true;public;0;11;/**  * Open a {@code java.io.Reader} for the specified resource, using the specified  * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}  * (if any).  * @throws IOException if opening the Reader failed  * @see #requiresReader()  * @see #getInputStream()  */ ;/**  * Open a {@code java.io.Reader} for the specified resource, using the specified  * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}  * (if any).  * @throws IOException if opening the Reader failed  * @see #requiresReader()  * @see #getInputStream()  */ public Reader getReader() throws IOException {     if (this.charset != null) {         return new InputStreamReader(this.resource.getInputStream(), this.charset).     } else if (this.encoding != null) {         return new InputStreamReader(this.resource.getInputStream(), this.encoding).     } else {         return new InputStreamReader(this.resource.getInputStream()).     } }
true;public;0;4;/**  * Open an {@code InputStream} for the specified resource, ignoring any specified  * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}.  * @throws IOException if opening the InputStream failed  * @see #requiresReader()  * @see #getReader()  */ ;/**  * Open an {@code InputStream} for the specified resource, ignoring any specified  * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}.  * @throws IOException if opening the InputStream failed  * @see #requiresReader()  * @see #getReader()  */ @Override public InputStream getInputStream() throws IOException {     return this.resource.getInputStream(). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof EncodedResource)) {         return false.     }     EncodedResource otherResource = (EncodedResource) other.     return (this.resource.equals(otherResource.resource) && ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) && ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding)). }
false;public;0;4;;@Override public int hashCode() {     return this.resource.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.resource.toString(). }
