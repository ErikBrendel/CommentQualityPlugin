commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public String getNamespaceURI(String prefix) {     Assert.notNull(prefix, "No prefix given").     if (XMLConstants.XML_NS_PREFIX.equals(prefix)) {         return XMLConstants.XML_NS_URI.     } else if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {         return XMLConstants.XMLNS_ATTRIBUTE_NS_URI.     } else if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {         return this.defaultNamespaceUri.     } else if (this.prefixToNamespaceUri.containsKey(prefix)) {         return this.prefixToNamespaceUri.get(prefix).     }     return "". }
false;public;1;6;;@Override @Nullable public String getPrefix(String namespaceUri) {     Set<String> prefixes = getPrefixesSet(namespaceUri).     return (!prefixes.isEmpty() ? prefixes.iterator().next() : null). }
false;public;1;4;;@Override public Iterator<String> getPrefixes(String namespaceUri) {     return getPrefixesSet(namespaceUri).iterator(). }
false;private;1;16;;private Set<String> getPrefixesSet(String namespaceUri) {     Assert.notNull(namespaceUri, "No namespaceUri given").     if (this.defaultNamespaceUri.equals(namespaceUri)) {         return Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX).     } else if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {         return Collections.singleton(XMLConstants.XML_NS_PREFIX).     } else if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri)) {         return Collections.singleton(XMLConstants.XMLNS_ATTRIBUTE).     } else {         Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri).         return (prefixes != null ? Collections.unmodifiableSet(prefixes) : Collections.emptySet()).     } }
true;public;1;3;/**  * Set the bindings for this namespace context.  * The supplied map must consist of string key value pairs.  */ ;/**  * Set the bindings for this namespace context.  * The supplied map must consist of string key value pairs.  */ public void setBindings(Map<String, String> bindings) {     bindings.forEach(this::bindNamespaceUri). }
true;public;1;3;/**  * Bind the given namespace as default namespace.  * @param namespaceUri the namespace uri  */ ;/**  * Bind the given namespace as default namespace.  * @param namespaceUri the namespace uri  */ public void bindDefaultNamespaceUri(String namespaceUri) {     bindNamespaceUri(XMLConstants.DEFAULT_NS_PREFIX, namespaceUri). }
true;public;2;13;/**  * Bind the given prefix to the given namespace.  * @param prefix the namespace prefix  * @param namespaceUri the namespace uri  */ ;/**  * Bind the given prefix to the given namespace.  * @param prefix the namespace prefix  * @param namespaceUri the namespace uri  */ public void bindNamespaceUri(String prefix, String namespaceUri) {     Assert.notNull(prefix, "No prefix given").     Assert.notNull(namespaceUri, "No namespaceUri given").     if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {         this.defaultNamespaceUri = namespaceUri.     } else {         this.prefixToNamespaceUri.put(prefix, namespaceUri).         Set<String> prefixes = this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>()).         prefixes.add(prefix).     } }
true;public;1;17;/**  * Remove the given prefix from this context.  * @param prefix the prefix to be removed  */ ;/**  * Remove the given prefix from this context.  * @param prefix the prefix to be removed  */ public void removeBinding(@Nullable String prefix) {     if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {         this.defaultNamespaceUri = "".     } else if (prefix != null) {         String namespaceUri = this.prefixToNamespaceUri.remove(prefix).         if (namespaceUri != null) {             Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri).             if (prefixes != null) {                 prefixes.remove(prefix).                 if (prefixes.isEmpty()) {                     this.namespaceUriToPrefixes.remove(namespaceUri).                 }             }         }     } }
true;public;0;4;/**  * Remove all declared prefixes.  */ ;/**  * Remove all declared prefixes.  */ public void clear() {     this.prefixToNamespaceUri.clear().     this.namespaceUriToPrefixes.clear(). }
true;public;0;3;/**  * Return all declared prefixes.  */ ;/**  * Return all declared prefixes.  */ public Iterator<String> getBoundPrefixes() {     return this.prefixToNamespaceUri.keySet().iterator(). }
