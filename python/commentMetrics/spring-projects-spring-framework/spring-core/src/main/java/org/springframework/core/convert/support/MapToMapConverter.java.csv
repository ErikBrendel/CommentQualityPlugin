commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Map.class, Map.class)). }
false;public;2;4;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return canConvertKey(sourceType, targetType) && canConvertValue(sourceType, targetType). }
false;public;3;40;;@Override @SuppressWarnings("unchecked") @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     Map<Object, Object> sourceMap = (Map<Object, Object>) source.     // Shortcut if possible...     boolean copyRequired = !targetType.getType().isInstance(source).     if (!copyRequired && sourceMap.isEmpty()) {         return sourceMap.     }     TypeDescriptor keyDesc = targetType.getMapKeyTypeDescriptor().     TypeDescriptor valueDesc = targetType.getMapValueTypeDescriptor().     List<MapEntry> targetEntries = new ArrayList<>(sourceMap.size()).     for (Map.Entry<Object, Object> entry : sourceMap.entrySet()) {         Object sourceKey = entry.getKey().         Object sourceValue = entry.getValue().         Object targetKey = convertKey(sourceKey, sourceType, keyDesc).         Object targetValue = convertValue(sourceValue, sourceType, valueDesc).         targetEntries.add(new MapEntry(targetKey, targetValue)).         if (sourceKey != targetKey || sourceValue != targetValue) {             copyRequired = true.         }     }     if (!copyRequired) {         return sourceMap.     }     Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(), (keyDesc != null ? keyDesc.getType() : null), sourceMap.size()).     for (MapEntry entry : targetEntries) {         entry.addToMap(targetMap).     }     return targetMap. }
false;private;2;4;;// internal helpers private boolean canConvertKey(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getMapKeyTypeDescriptor(), targetType.getMapKeyTypeDescriptor(), this.conversionService). }
false;private;2;4;;private boolean canConvertValue(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getMapValueTypeDescriptor(), targetType.getMapValueTypeDescriptor(), this.conversionService). }
false;private;3;7;;@Nullable private Object convertKey(Object sourceKey, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {     if (targetType == null) {         return sourceKey.     }     return this.conversionService.convert(sourceKey, sourceType.getMapKeyTypeDescriptor(sourceKey), targetType). }
false;private;3;7;;@Nullable private Object convertValue(Object sourceValue, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {     if (targetType == null) {         return sourceValue.     }     return this.conversionService.convert(sourceValue, sourceType.getMapValueTypeDescriptor(sourceValue), targetType). }
false;public;1;3;;public void addToMap(Map<Object, Object> map) {     map.put(this.key, this.value). }
