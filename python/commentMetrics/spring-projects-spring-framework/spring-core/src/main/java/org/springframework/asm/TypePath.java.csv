# id;timestamp;commentText;codeText;commentWords;codeWords
TypePath -> TypePath(final byte[] typePathContainer, final int typePathOffset);1531241461;Constructs a new TypePath.__@param typePathContainer a byte array containing a type_path JVMS structure._@param typePathOffset the offset of the first byte of the type_path structure in_typePathContainer.;TypePath(final byte[] typePathContainer, final int typePathOffset) {_    this.typePathContainer = typePathContainer__    this.typePathOffset = typePathOffset__  };constructs,a,new,type,path,param,type,path,container,a,byte,array,containing,a,jvms,structure,param,type,path,offset,the,offset,of,the,first,byte,of,the,structure,in,type,path,container;type,path,final,byte,type,path,container,final,int,type,path,offset,this,type,path,container,type,path,container,this,type,path,offset,type,path,offset
TypePath -> TypePath(final byte[] typePathContainer, final int typePathOffset);1536664245;Constructs a new TypePath.__@param typePathContainer a byte array containing a type_path JVMS structure._@param typePathOffset the offset of the first byte of the type_path structure in_typePathContainer.;TypePath(final byte[] typePathContainer, final int typePathOffset) {_    this.typePathContainer = typePathContainer__    this.typePathOffset = typePathOffset__  };constructs,a,new,type,path,param,type,path,container,a,byte,array,containing,a,jvms,structure,param,type,path,offset,the,offset,of,the,first,byte,of,the,structure,in,type,path,container;type,path,final,byte,type,path,container,final,int,type,path,offset,this,type,path,container,type,path,container,this,type,path,offset,type,path,offset
TypePath -> TypePath(final byte[] typePathContainer, final int typePathOffset);1539119582;Constructs a new TypePath.__@param typePathContainer a byte array containing a type_path JVMS structure._@param typePathOffset the offset of the first byte of the type_path structure in_typePathContainer.;TypePath(final byte[] typePathContainer, final int typePathOffset) {_    this.typePathContainer = typePathContainer__    this.typePathOffset = typePathOffset__  };constructs,a,new,type,path,param,type,path,container,a,byte,array,containing,a,jvms,structure,param,type,path,offset,the,offset,of,the,first,byte,of,the,structure,in,type,path,container;type,path,final,byte,type,path,container,final,int,type,path,offset,this,type,path,container,type,path,container,this,type,path,offset,type,path,offset
TypePath -> public static TypePath fromString(final String typePath);1395273982;Converts a type path in string form, in the format used by_{@link #toString()}, into a TypePath object.__@param typePath_a type path in string form, in the format used by_{@link #toString()}. May be null or empty._@return the corresponding TypePath object, or null if the path is empty.;public static TypePath fromString(final String typePath) {_        if (typePath == null || typePath.length() == 0) {_            return null__        }_        int n = typePath.length()__        ByteVector out = new ByteVector(n)__        out.putByte(0)__        for (int i = 0_ i < n_) {_            char c = typePath.charAt(i++)__            if (c == '[') {_                out.put11(ARRAY_ELEMENT, 0)__            } else if (c == '.') {_                out.put11(INNER_TYPE, 0)__            } else if (c == '*') {_                out.put11(WILDCARD_BOUND, 0)__            } else if (c >= '0' && c <= '9') {_                int typeArg = c - '0'__                while (i < n && (c = typePath.charAt(i)) >= '0' && c <= '9') {_                    typeArg = typeArg * 10 + c - '0'__                    i += 1__                }_                out.put11(TYPE_ARGUMENT, typeArg)__            }_        }_        out.data[0] = (byte) (out.length / 2)__        return new TypePath(out.data, 0)__    };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,null,or,empty,return,the,corresponding,type,path,object,or,null,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,n,type,path,length,byte,vector,out,new,byte,vector,n,out,put,byte,0,for,int,i,0,i,n,char,c,type,path,char,at,i,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,i,n,c,type,path,char,at,i,0,c,9,type,arg,type,arg,10,c,0,i,1,out,put11,type,arg,out,data,0,byte,out,length,2,return,new,type,path,out,data,0
TypePath -> public static TypePath fromString(final String typePath);1411740421;Converts a type path in string form, in the format used by_{@link #toString()}, into a TypePath object.__@param typePath_a type path in string form, in the format used by_{@link #toString()}. May be null or empty._@return the corresponding TypePath object, or null if the path is empty.;public static TypePath fromString(final String typePath) {_        if (typePath == null || typePath.length() == 0) {_            return null__        }_        int n = typePath.length()__        ByteVector out = new ByteVector(n)__        out.putByte(0)__        for (int i = 0_ i < n_) {_            char c = typePath.charAt(i++)__            if (c == '[') {_                out.put11(ARRAY_ELEMENT, 0)__            } else if (c == '.') {_                out.put11(INNER_TYPE, 0)__            } else if (c == '*') {_                out.put11(WILDCARD_BOUND, 0)__            } else if (c >= '0' && c <= '9') {_                int typeArg = c - '0'__                while (i < n && (c = typePath.charAt(i)) >= '0' && c <= '9') {_                    typeArg = typeArg * 10 + c - '0'__                    i += 1__                }_                if (i < n && typePath.charAt(i) == '_') {_                    i += 1__                }_                out.put11(TYPE_ARGUMENT, typeArg)__            }_        }_        out.data[0] = (byte) (out.length / 2)__        return new TypePath(out.data, 0)__    };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,null,or,empty,return,the,corresponding,type,path,object,or,null,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,n,type,path,length,byte,vector,out,new,byte,vector,n,out,put,byte,0,for,int,i,0,i,n,char,c,type,path,char,at,i,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,i,n,c,type,path,char,at,i,0,c,9,type,arg,type,arg,10,c,0,i,1,if,i,n,type,path,char,at,i,i,1,out,put11,type,arg,out,data,0,byte,out,length,2,return,new,type,path,out,data,0
TypePath -> public static TypePath fromString(final String typePath);1520528267;Converts a type path in string form, in the format used by_{@link #toString()}, into a TypePath object.__@param typePath_a type path in string form, in the format used by_{@link #toString()}. May be null or empty._@return the corresponding TypePath object, or null if the path is empty.;public static TypePath fromString(final String typePath) {_        if (typePath == null || typePath.length() == 0) {_            return null__        }_        int n = typePath.length()__        ByteVector out = new ByteVector(n)__        out.putByte(0)__        for (int i = 0_ i < n_) {_            char c = typePath.charAt(i++)__            if (c == '[') {_                out.put11(ARRAY_ELEMENT, 0)__            } else if (c == '.') {_                out.put11(INNER_TYPE, 0)__            } else if (c == '*') {_                out.put11(WILDCARD_BOUND, 0)__            } else if (c >= '0' && c <= '9') {_                int typeArg = c - '0'__                while (i < n && (c = typePath.charAt(i)) >= '0' && c <= '9') {_                    typeArg = typeArg * 10 + c - '0'__                    i += 1__                }_                if (i < n && typePath.charAt(i) == '_') {_                    i += 1__                }_                out.put11(TYPE_ARGUMENT, typeArg)__            }_        }_        out.data[0] = (byte) (out.length / 2)__        return new TypePath(out.data, 0)__    };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,null,or,empty,return,the,corresponding,type,path,object,or,null,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,n,type,path,length,byte,vector,out,new,byte,vector,n,out,put,byte,0,for,int,i,0,i,n,char,c,type,path,char,at,i,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,out,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,i,n,c,type,path,char,at,i,0,c,9,type,arg,type,arg,10,c,0,i,1,if,i,n,type,path,char,at,i,i,1,out,put11,type,arg,out,data,0,byte,out,length,2,return,new,type,path,out,data,0
TypePath -> public static TypePath fromString(final String typePath);1531241461;Converts a type path in string form, in the format used by {@link #toString()}, into a TypePath_object.__@param typePath a type path in string form, in the format used by {@link #toString()}. May be_<tt>null</tt> or empty._@return the corresponding TypePath object, or <tt>null</tt> if the path is empty.;public static TypePath fromString(final String typePath) {_    if (typePath == null || typePath.length() == 0) {_      return null__    }_    int typePathLength = typePath.length()__    ByteVector output = new ByteVector(typePathLength)__    output.putByte(0)__    int typePathIndex = 0__    while (typePathIndex < typePathLength) {_      char c = typePath.charAt(typePathIndex++)__      if (c == '[') {_        output.put11(ARRAY_ELEMENT, 0)__      } else if (c == '.') {_        output.put11(INNER_TYPE, 0)__      } else if (c == '*') {_        output.put11(WILDCARD_BOUND, 0)__      } else if (c >= '0' && c <= '9') {_        int typeArg = c - '0'__        while (typePathIndex < typePathLength) {_          c = typePath.charAt(typePathIndex++)__          if (c >= '0' && c <= '9') {_            typeArg = typeArg * 10 + c - '0'__          } else if (c == '_') {_            break__          } else {_            throw new IllegalArgumentException()__          }_        }_        output.put11(TYPE_ARGUMENT, typeArg)__      } else {_        throw new IllegalArgumentException()__      }_    }_    output.data[0] = (byte) (output.length / 2)__    return new TypePath(output.data, 0)__  };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,tt,null,tt,or,empty,return,the,corresponding,type,path,object,or,tt,null,tt,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,type,path,length,type,path,length,byte,vector,output,new,byte,vector,type,path,length,output,put,byte,0,int,type,path,index,0,while,type,path,index,type,path,length,char,c,type,path,char,at,type,path,index,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,type,path,index,type,path,length,c,type,path,char,at,type,path,index,if,c,0,c,9,type,arg,type,arg,10,c,0,else,if,c,break,else,throw,new,illegal,argument,exception,output,put11,type,arg,else,throw,new,illegal,argument,exception,output,data,0,byte,output,length,2,return,new,type,path,output,data,0
TypePath -> public static TypePath fromString(final String typePath);1536664245;Converts a type path in string form, in the format used by {@link #toString()}, into a TypePath_object.__@param typePath a type path in string form, in the format used by {@link #toString()}. May be_{@literal null} or empty._@return the corresponding TypePath object, or {@literal null} if the path is empty.;public static TypePath fromString(final String typePath) {_    if (typePath == null || typePath.length() == 0) {_      return null__    }_    int typePathLength = typePath.length()__    ByteVector output = new ByteVector(typePathLength)__    output.putByte(0)__    int typePathIndex = 0__    while (typePathIndex < typePathLength) {_      char c = typePath.charAt(typePathIndex++)__      if (c == '[') {_        output.put11(ARRAY_ELEMENT, 0)__      } else if (c == '.') {_        output.put11(INNER_TYPE, 0)__      } else if (c == '*') {_        output.put11(WILDCARD_BOUND, 0)__      } else if (c >= '0' && c <= '9') {_        int typeArg = c - '0'__        while (typePathIndex < typePathLength) {_          c = typePath.charAt(typePathIndex++)__          if (c >= '0' && c <= '9') {_            typeArg = typeArg * 10 + c - '0'__          } else if (c == '_') {_            break__          } else {_            throw new IllegalArgumentException()__          }_        }_        output.put11(TYPE_ARGUMENT, typeArg)__      } else {_        throw new IllegalArgumentException()__      }_    }_    output.data[0] = (byte) (output.length / 2)__    return new TypePath(output.data, 0)__  };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,literal,null,or,empty,return,the,corresponding,type,path,object,or,literal,null,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,type,path,length,type,path,length,byte,vector,output,new,byte,vector,type,path,length,output,put,byte,0,int,type,path,index,0,while,type,path,index,type,path,length,char,c,type,path,char,at,type,path,index,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,type,path,index,type,path,length,c,type,path,char,at,type,path,index,if,c,0,c,9,type,arg,type,arg,10,c,0,else,if,c,break,else,throw,new,illegal,argument,exception,output,put11,type,arg,else,throw,new,illegal,argument,exception,output,data,0,byte,output,length,2,return,new,type,path,output,data,0
TypePath -> public static TypePath fromString(final String typePath);1539119582;Converts a type path in string form, in the format used by {@link #toString()}, into a TypePath_object.__@param typePath a type path in string form, in the format used by {@link #toString()}. May be_{@literal null} or empty._@return the corresponding TypePath object, or {@literal null} if the path is empty.;public static TypePath fromString(final String typePath) {_    if (typePath == null || typePath.length() == 0) {_      return null__    }_    int typePathLength = typePath.length()__    ByteVector output = new ByteVector(typePathLength)__    output.putByte(0)__    int typePathIndex = 0__    while (typePathIndex < typePathLength) {_      char c = typePath.charAt(typePathIndex++)__      if (c == '[') {_        output.put11(ARRAY_ELEMENT, 0)__      } else if (c == '.') {_        output.put11(INNER_TYPE, 0)__      } else if (c == '*') {_        output.put11(WILDCARD_BOUND, 0)__      } else if (c >= '0' && c <= '9') {_        int typeArg = c - '0'__        while (typePathIndex < typePathLength) {_          c = typePath.charAt(typePathIndex++)__          if (c >= '0' && c <= '9') {_            typeArg = typeArg * 10 + c - '0'__          } else if (c == '_') {_            break__          } else {_            throw new IllegalArgumentException()__          }_        }_        output.put11(TYPE_ARGUMENT, typeArg)__      } else {_        throw new IllegalArgumentException()__      }_    }_    output.data[0] = (byte) (output.length / 2)__    return new TypePath(output.data, 0)__  };converts,a,type,path,in,string,form,in,the,format,used,by,link,to,string,into,a,type,path,object,param,type,path,a,type,path,in,string,form,in,the,format,used,by,link,to,string,may,be,literal,null,or,empty,return,the,corresponding,type,path,object,or,literal,null,if,the,path,is,empty;public,static,type,path,from,string,final,string,type,path,if,type,path,null,type,path,length,0,return,null,int,type,path,length,type,path,length,byte,vector,output,new,byte,vector,type,path,length,output,put,byte,0,int,type,path,index,0,while,type,path,index,type,path,length,char,c,type,path,char,at,type,path,index,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,output,put11,0,else,if,c,0,c,9,int,type,arg,c,0,while,type,path,index,type,path,length,c,type,path,char,at,type,path,index,if,c,0,c,9,type,arg,type,arg,10,c,0,else,if,c,break,else,throw,new,illegal,argument,exception,output,put11,type,arg,else,throw,new,illegal,argument,exception,output,data,0,byte,output,length,2,return,new,type,path,output,data,0
TypePath -> public int getStepArgument(final int index);1531241461;Returns the index of the type argument that the given step is stepping into. This method should_only be used for steps whose value is {@link #TYPE_ARGUMENT}.__@param index an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping into.;public int getStepArgument(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 2]__  };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,final,int,index,return,type,path,container,type,path,offset,2,index,2
TypePath -> public int getStepArgument(final int index);1536664245;Returns the index of the type argument that the given step is stepping into. This method should_only be used for steps whose value is {@link #TYPE_ARGUMENT}.__@param index an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping into.;public int getStepArgument(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 2]__  };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,final,int,index,return,type,path,container,type,path,offset,2,index,2
TypePath -> public int getStepArgument(final int index);1539119582;Returns the index of the type argument that the given step is stepping into. This method should_only be used for steps whose value is {@link #TYPE_ARGUMENT}.__@param index an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping into.;public int getStepArgument(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 2]__  };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,final,int,index,return,type,path,container,type,path,offset,2,index,2
TypePath -> @Override   public String toString();1531241461;Returns a string representation of this type path. {@link #ARRAY_ELEMENT} steps are represented_with '[', {@link #INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND} steps with '*' and {@link_#TYPE_ARGUMENT} steps with their type argument index in decimal form followed by '_'.;@Override_  public String toString() {_    int length = getLength()__    StringBuilder result = new StringBuilder(length * 2)__    for (int i = 0_ i < length_ ++i) {_      switch (getStep(i)) {_        case ARRAY_ELEMENT:_          result.append('[')__          break__        case INNER_TYPE:_          result.append('.')__          break__        case WILDCARD_BOUND:_          result.append('*')__          break__        case TYPE_ARGUMENT:_          result.append(getStepArgument(i)).append('_')__          break__        default:_          throw new AssertionError()__      }_    }_    return result.toString()__  };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form,followed,by;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,append,break,default,throw,new,assertion,error,return,result,to,string
TypePath -> @Override   public String toString();1536664245;Returns a string representation of this type path. {@link #ARRAY_ELEMENT} steps are represented_with '[', {@link #INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND} steps with '*' and {@link_#TYPE_ARGUMENT} steps with their type argument index in decimal form followed by '_'.;@Override_  public String toString() {_    int length = getLength()__    StringBuilder result = new StringBuilder(length * 2)__    for (int i = 0_ i < length_ ++i) {_      switch (getStep(i)) {_        case ARRAY_ELEMENT:_          result.append('[')__          break__        case INNER_TYPE:_          result.append('.')__          break__        case WILDCARD_BOUND:_          result.append('*')__          break__        case TYPE_ARGUMENT:_          result.append(getStepArgument(i)).append('_')__          break__        default:_          throw new AssertionError()__      }_    }_    return result.toString()__  };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form,followed,by;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,append,break,default,throw,new,assertion,error,return,result,to,string
TypePath -> @Override   public String toString();1539119582;Returns a string representation of this type path. {@link #ARRAY_ELEMENT} steps are represented_with '[', {@link #INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND} steps with '*' and {@link_#TYPE_ARGUMENT} steps with their type argument index in decimal form followed by '_'.;@Override_  public String toString() {_    int length = getLength()__    StringBuilder result = new StringBuilder(length * 2)__    for (int i = 0_ i < length_ ++i) {_      switch (getStep(i)) {_        case ARRAY_ELEMENT:_          result.append('[')__          break__        case INNER_TYPE:_          result.append('.')__          break__        case WILDCARD_BOUND:_          result.append('*')__          break__        case TYPE_ARGUMENT:_          result.append(getStepArgument(i)).append('_')__          break__        default:_          throw new AssertionError()__      }_    }_    return result.toString()__  };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form,followed,by;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,append,break,default,throw,new,assertion,error,return,result,to,string
TypePath -> @Override     public String toString();1395273982;Returns a string representation of this type path. {@link #ARRAY_ELEMENT_ARRAY_ELEMENT} steps are represented with '[', {@link #INNER_TYPE_INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND WILDCARD_BOUND} steps_with '*' and {@link #TYPE_ARGUMENT TYPE_ARGUMENT} steps with their type_argument index in decimal form.;@Override_    public String toString() {_        int length = getLength()__        StringBuilder result = new StringBuilder(length * 2)__        for (int i = 0_ i < length_ ++i) {_            switch (getStep(i)) {_            case ARRAY_ELEMENT:_                result.append('[')__                break__            case INNER_TYPE:_                result.append('.')__                break__            case WILDCARD_BOUND:_                result.append('*')__                break__            case TYPE_ARGUMENT:_                result.append(getStepArgument(i))__                break__            default:_                result.append('_')__            }_        }_        return result.toString()__    };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,break,default,result,append,return,result,to,string
TypePath -> @Override     public String toString();1411740421;Returns a string representation of this type path. {@link #ARRAY_ELEMENT_ARRAY_ELEMENT} steps are represented with '[', {@link #INNER_TYPE_INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND WILDCARD_BOUND} steps_with '*' and {@link #TYPE_ARGUMENT TYPE_ARGUMENT} steps with their type_argument index in decimal form followed by '_'.;@Override_    public String toString() {_        int length = getLength()__        StringBuilder result = new StringBuilder(length * 2)__        for (int i = 0_ i < length_ ++i) {_            switch (getStep(i)) {_            case ARRAY_ELEMENT:_                result.append('[')__                break__            case INNER_TYPE:_                result.append('.')__                break__            case WILDCARD_BOUND:_                result.append('*')__                break__            case TYPE_ARGUMENT:_                result.append(getStepArgument(i)).append('_')__                break__            default:_                result.append('_')__            }_        }_        return result.toString()__    };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form,followed,by;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,append,break,default,result,append,return,result,to,string
TypePath -> @Override     public String toString();1520528267;Returns a string representation of this type path. {@link #ARRAY_ELEMENT_ARRAY_ELEMENT} steps are represented with '[', {@link #INNER_TYPE_INNER_TYPE} steps with '.', {@link #WILDCARD_BOUND WILDCARD_BOUND} steps_with '*' and {@link #TYPE_ARGUMENT TYPE_ARGUMENT} steps with their type_argument index in decimal form followed by '_'.;@Override_    public String toString() {_        int length = getLength()__        StringBuilder result = new StringBuilder(length * 2)__        for (int i = 0_ i < length_ ++i) {_            switch (getStep(i)) {_            case ARRAY_ELEMENT:_                result.append('[')__                break__            case INNER_TYPE:_                result.append('.')__                break__            case WILDCARD_BOUND:_                result.append('*')__                break__            case TYPE_ARGUMENT:_                result.append(getStepArgument(i)).append('_')__                break__            default:_                result.append('_')__            }_        }_        return result.toString()__    };returns,a,string,representation,of,this,type,path,link,steps,are,represented,with,link,steps,with,link,steps,with,and,link,steps,with,their,type,argument,index,in,decimal,form,followed,by;override,public,string,to,string,int,length,get,length,string,builder,result,new,string,builder,length,2,for,int,i,0,i,length,i,switch,get,step,i,case,result,append,break,case,result,append,break,case,result,append,break,case,result,append,get,step,argument,i,append,break,default,result,append,return,result,to,string
TypePath -> public int getStepArgument(int index);1395273982;Returns the index of the type argument that the given step is stepping_into. This method should only be used for steps whose value is_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping_into.;public int getStepArgument(int index) {_        return b[offset + 2 * index + 2]__    };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,int,index,return,b,offset,2,index,2
TypePath -> public int getStepArgument(int index);1411740421;Returns the index of the type argument that the given step is stepping_into. This method should only be used for steps whose value is_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping_into.;public int getStepArgument(int index) {_        return b[offset + 2 * index + 2]__    };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,int,index,return,b,offset,2,index,2
TypePath -> public int getStepArgument(int index);1520528267;Returns the index of the type argument that the given step is stepping_into. This method should only be used for steps whose value is_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return the index of the type argument that the given step is stepping_into.;public int getStepArgument(int index) {_        return b[offset + 2 * index + 2]__    };returns,the,index,of,the,type,argument,that,the,given,step,is,stepping,into,this,method,should,only,be,used,for,steps,whose,value,is,link,param,index,an,index,between,0,and,link,get,length,exclusive,return,the,index,of,the,type,argument,that,the,given,step,is,stepping,into;public,int,get,step,argument,int,index,return,b,offset,2,index,2
TypePath -> public int getStep(final int index);1531241461;Returns the value of the given step of this path.__@param index an index between 0 and {@link #getLength()}, exclusive._@return one of {@link #ARRAY_ELEMENT}, {@link #INNER_TYPE}, {@link #WILDCARD_BOUND}, or {@link_#TYPE_ARGUMENT}.;public int getStep(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 1]__  };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,one,of,link,link,link,or,link;public,int,get,step,final,int,index,return,type,path,container,type,path,offset,2,index,1
TypePath -> public int getStep(final int index);1536664245;Returns the value of the given step of this path.__@param index an index between 0 and {@link #getLength()}, exclusive._@return one of {@link #ARRAY_ELEMENT}, {@link #INNER_TYPE}, {@link #WILDCARD_BOUND}, or {@link_#TYPE_ARGUMENT}.;public int getStep(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 1]__  };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,one,of,link,link,link,or,link;public,int,get,step,final,int,index,return,type,path,container,type,path,offset,2,index,1
TypePath -> public int getStep(final int index);1539119582;Returns the value of the given step of this path.__@param index an index between 0 and {@link #getLength()}, exclusive._@return one of {@link #ARRAY_ELEMENT}, {@link #INNER_TYPE}, {@link #WILDCARD_BOUND}, or {@link_#TYPE_ARGUMENT}.;public int getStep(final int index) {_    _    return typePathContainer[typePathOffset + 2 * index + 1]__  };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,one,of,link,link,link,or,link;public,int,get,step,final,int,index,return,type,path,container,type,path,offset,2,index,1
TypePath -> public int getLength();1395273982;Returns the length of this path.__@return the length of this path.;public int getLength() {_        return b[offset]__    };returns,the,length,of,this,path,return,the,length,of,this,path;public,int,get,length,return,b,offset
TypePath -> public int getLength();1411740421;Returns the length of this path.__@return the length of this path.;public int getLength() {_        return b[offset]__    };returns,the,length,of,this,path,return,the,length,of,this,path;public,int,get,length,return,b,offset
TypePath -> public int getLength();1520528267;Returns the length of this path.__@return the length of this path.;public int getLength() {_        return b[offset]__    };returns,the,length,of,this,path,return,the,length,of,this,path;public,int,get,length,return,b,offset
TypePath -> public int getLength();1531241461;Returns the length of this path, i.e. its number of steps.__@return the length of this path.;public int getLength() {_    _    return typePathContainer[typePathOffset]__  };returns,the,length,of,this,path,i,e,its,number,of,steps,return,the,length,of,this,path;public,int,get,length,return,type,path,container,type,path,offset
TypePath -> public int getLength();1536664245;Returns the length of this path, i.e. its number of steps.__@return the length of this path.;public int getLength() {_    _    return typePathContainer[typePathOffset]__  };returns,the,length,of,this,path,i,e,its,number,of,steps,return,the,length,of,this,path;public,int,get,length,return,type,path,container,type,path,offset
TypePath -> public int getLength();1539119582;Returns the length of this path, i.e. its number of steps.__@return the length of this path.;public int getLength() {_    _    return typePathContainer[typePathOffset]__  };returns,the,length,of,this,path,i,e,its,number,of,steps,return,the,length,of,this,path;public,int,get,length,return,type,path,container,type,path,offset
TypePath -> public int getStep(int index);1395273982;Returns the value of the given step of this path.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return {@link #ARRAY_ELEMENT ARRAY_ELEMENT}, {@link #INNER_TYPE_INNER_TYPE}, {@link #WILDCARD_BOUND WILDCARD_BOUND}, or_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.;public int getStep(int index) {_        return b[offset + 2 * index + 1]__    };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,link,link,link,or,link;public,int,get,step,int,index,return,b,offset,2,index,1
TypePath -> public int getStep(int index);1411740421;Returns the value of the given step of this path.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return {@link #ARRAY_ELEMENT ARRAY_ELEMENT}, {@link #INNER_TYPE_INNER_TYPE}, {@link #WILDCARD_BOUND WILDCARD_BOUND}, or_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.;public int getStep(int index) {_        return b[offset + 2 * index + 1]__    };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,link,link,link,or,link;public,int,get,step,int,index,return,b,offset,2,index,1
TypePath -> public int getStep(int index);1520528267;Returns the value of the given step of this path.__@param index_an index between 0 and {@link #getLength()}, exclusive._@return {@link #ARRAY_ELEMENT ARRAY_ELEMENT}, {@link #INNER_TYPE_INNER_TYPE}, {@link #WILDCARD_BOUND WILDCARD_BOUND}, or_{@link #TYPE_ARGUMENT TYPE_ARGUMENT}.;public int getStep(int index) {_        return b[offset + 2 * index + 1]__    };returns,the,value,of,the,given,step,of,this,path,param,index,an,index,between,0,and,link,get,length,exclusive,return,link,link,link,or,link;public,int,get,step,int,index,return,b,offset,2,index,1
TypePath -> TypePath(byte[] b, int offset);1395273982;Creates a new type path.__@param b_the byte array containing the type path in Java class file_format._@param offset_the offset of the first byte of the type path in 'b'.;TypePath(byte[] b, int offset) {_        this.b = b__        this.offset = offset__    };creates,a,new,type,path,param,b,the,byte,array,containing,the,type,path,in,java,class,file,format,param,offset,the,offset,of,the,first,byte,of,the,type,path,in,b;type,path,byte,b,int,offset,this,b,b,this,offset,offset
TypePath -> TypePath(byte[] b, int offset);1411740421;Creates a new type path.__@param b_the byte array containing the type path in Java class file_format._@param offset_the offset of the first byte of the type path in 'b'.;TypePath(byte[] b, int offset) {_        this.b = b__        this.offset = offset__    };creates,a,new,type,path,param,b,the,byte,array,containing,the,type,path,in,java,class,file,format,param,offset,the,offset,of,the,first,byte,of,the,type,path,in,b;type,path,byte,b,int,offset,this,b,b,this,offset,offset
TypePath -> TypePath(byte[] b, int offset);1520528267;Creates a new type path.__@param b_the byte array containing the type path in Java class file_format._@param offset_the offset of the first byte of the type path in 'b'.;TypePath(byte[] b, int offset) {_        this.b = b__        this.offset = offset__    };creates,a,new,type,path,param,b,the,byte,array,containing,the,type,path,in,java,class,file,format,param,offset,the,offset,of,the,first,byte,of,the,type,path,in,b;type,path,byte,b,int,offset,this,b,b,this,offset,offset
TypePath -> static void put(final TypePath typePath, final ByteVector output);1531241461;Puts the type_path JVMS structure corresponding to the given TypePath into the given_ByteVector.__@param typePath a TypePath instance, or <tt>null</tt> for empty paths._@param output where the type path must be put.;static void put(final TypePath typePath, final ByteVector output) {_    if (typePath == null) {_      output.putByte(0)__    } else {_      int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1__      output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length)__    }_  };puts,the,jvms,structure,corresponding,to,the,given,type,path,into,the,given,byte,vector,param,type,path,a,type,path,instance,or,tt,null,tt,for,empty,paths,param,output,where,the,type,path,must,be,put;static,void,put,final,type,path,type,path,final,byte,vector,output,if,type,path,null,output,put,byte,0,else,int,length,type,path,type,path,container,type,path,type,path,offset,2,1,output,put,byte,array,type,path,type,path,container,type,path,type,path,offset,length
TypePath -> static void put(final TypePath typePath, final ByteVector output);1536664245;Puts the type_path JVMS structure corresponding to the given TypePath into the given_ByteVector.__@param typePath a TypePath instance, or {@literal null} for empty paths._@param output where the type path must be put.;static void put(final TypePath typePath, final ByteVector output) {_    if (typePath == null) {_      output.putByte(0)__    } else {_      int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1__      output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length)__    }_  };puts,the,jvms,structure,corresponding,to,the,given,type,path,into,the,given,byte,vector,param,type,path,a,type,path,instance,or,literal,null,for,empty,paths,param,output,where,the,type,path,must,be,put;static,void,put,final,type,path,type,path,final,byte,vector,output,if,type,path,null,output,put,byte,0,else,int,length,type,path,type,path,container,type,path,type,path,offset,2,1,output,put,byte,array,type,path,type,path,container,type,path,type,path,offset,length
TypePath -> static void put(final TypePath typePath, final ByteVector output);1539119582;Puts the type_path JVMS structure corresponding to the given TypePath into the given_ByteVector.__@param typePath a TypePath instance, or {@literal null} for empty paths._@param output where the type path must be put.;static void put(final TypePath typePath, final ByteVector output) {_    if (typePath == null) {_      output.putByte(0)__    } else {_      int length = typePath.typePathContainer[typePath.typePathOffset] * 2 + 1__      output.putByteArray(typePath.typePathContainer, typePath.typePathOffset, length)__    }_  };puts,the,jvms,structure,corresponding,to,the,given,type,path,into,the,given,byte,vector,param,type,path,a,type,path,instance,or,literal,null,for,empty,paths,param,output,where,the,type,path,must,be,put;static,void,put,final,type,path,type,path,final,byte,vector,output,if,type,path,null,output,put,byte,0,else,int,length,type,path,type,path,container,type,path,type,path,offset,2,1,output,put,byte,array,type,path,type,path,container,type,path,type,path,offset,length
