# id;timestamp;commentText;codeText;commentWords;codeWords
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor attributeExtractor);1432856630;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor attributeExtractor);1432932334;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(Annotation annotation, AnnotatedElement annotatedElement, 			Map<String, String> aliasMap);1432475887;Construct a new {@code SynthesizedAnnotationInvocationHandler}.__@param annotation the annotation to synthesize_@param annotatedElement the element that is annotated with the supplied_annotation_ may be {@code null} if unknown_@param aliasMap the map of attribute alias pairs, declared via_{@code @AliasFor} in the supplied annotation;SynthesizedAnnotationInvocationHandler(Annotation annotation, AnnotatedElement annotatedElement,_			Map<String, String> aliasMap) {_		this.annotatedElement = annotatedElement__		this.annotation = annotation__		this.annotationType = annotation.annotationType()__		this.aliasMap = aliasMap__	};construct,a,new,code,synthesized,annotation,invocation,handler,param,annotation,the,annotation,to,synthesize,param,annotated,element,the,element,that,is,annotated,with,the,supplied,annotation,may,be,code,null,if,unknown,param,alias,map,the,map,of,attribute,alias,pairs,declared,via,code,alias,for,in,the,supplied,annotation;synthesized,annotation,invocation,handler,annotation,annotation,annotated,element,annotated,element,map,string,string,alias,map,this,annotated,element,annotated,element,this,annotation,annotation,this,annotation,type,annotation,annotation,type,this,alias,map,alias,map
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(Annotation annotation, AnnotatedElement annotatedElement, 			Map<String, String> aliasMap);1432475900;Construct a new {@code SynthesizedAnnotationInvocationHandler}.__@param annotation the annotation to synthesize_@param annotatedElement the element that is annotated with the supplied_annotation_ may be {@code null} if unknown_@param aliasMap the map of attribute alias pairs, declared via_{@code @AliasFor} in the supplied annotation;SynthesizedAnnotationInvocationHandler(Annotation annotation, AnnotatedElement annotatedElement,_			Map<String, String> aliasMap) {_		this.annotatedElement = annotatedElement__		this.annotation = annotation__		this.annotationType = annotation.annotationType()__		this.aliasMap = aliasMap__		this.computedValueCache = new ConcurrentHashMap<String, Object>(aliasMap.size())__	};construct,a,new,code,synthesized,annotation,invocation,handler,param,annotation,the,annotation,to,synthesize,param,annotated,element,the,element,that,is,annotated,with,the,supplied,annotation,may,be,code,null,if,unknown,param,alias,map,the,map,of,attribute,alias,pairs,declared,via,code,alias,for,in,the,supplied,annotation;synthesized,annotation,invocation,handler,annotation,annotation,annotated,element,annotated,element,map,string,string,alias,map,this,annotated,element,annotated,element,this,annotation,annotation,this,annotation,type,annotation,annotation,type,this,alias,map,alias,map,this,computed,value,cache,new,concurrent,hash,map,string,object,alias,map,size
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1432856630;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1432932334;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1439214025;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1451421620;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1467730834;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean annotationEquals(Object other);1468583965;See {@link Annotation#equals(Object)} for a definition of the required algorithm._@param other the other object to compare against;private boolean annotationEquals(Object other) {_		if (this == other) {_			return true__		}_		if (!annotationType().isInstance(other)) {_			return false__		}__		for (Method attributeMethod : AnnotationUtils.getAttributeMethods(annotationType())) {_			Object thisValue = getAttributeValue(attributeMethod)__			Object otherValue = ReflectionUtils.invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,other,the,other,object,to,compare,against;private,boolean,annotation,equals,object,other,if,this,other,return,true,if,annotation,type,is,instance,other,return,false,for,method,attribute,method,annotation,utils,get,attribute,methods,annotation,type,object,this,value,get,attribute,value,attribute,method,object,other,value,reflection,utils,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean equals(Object proxy, Object other);1432417608;See {@link Annotation#equals(Object)} for a definition of the required algorithm.__@param proxy the synthesized annotation_@param other the other object to compare against;private boolean equals(Object proxy, Object other) {_		if (this == other) {_			return true__		}_		if (!this.annotationType.isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object thisValue = invokeMethod(attributeMethod, proxy)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation,param,other,the,other,object,to,compare,against;private,boolean,equals,object,proxy,object,other,if,this,other,return,true,if,this,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,this,value,invoke,method,attribute,method,proxy,object,other,value,invoke,method,attribute,method,other,if,object,utils,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean equals(Object proxy, Object other);1432418315;See {@link Annotation#equals(Object)} for a definition of the required algorithm.__@param proxy the synthesized annotation_@param other the other object to compare against;private boolean equals(Object proxy, Object other) {_		if (this == other) {_			return true__		}_		if (!this.annotationType.isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object thisValue = invokeMethod(attributeMethod, proxy)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation,param,other,the,other,object,to,compare,against;private,boolean,equals,object,proxy,object,other,if,this,other,return,true,if,this,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,this,value,invoke,method,attribute,method,proxy,object,other,value,invoke,method,attribute,method,other,if,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean equals(Object proxy, Object other);1432475887;See {@link Annotation#equals(Object)} for a definition of the required algorithm.__@param proxy the synthesized annotation_@param other the other object to compare against;private boolean equals(Object proxy, Object other) {_		if (this == other) {_			return true__		}_		if (!this.annotationType.isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object thisValue = invokeMethod(attributeMethod, proxy)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation,param,other,the,other,object,to,compare,against;private,boolean,equals,object,proxy,object,other,if,this,other,return,true,if,this,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,this,value,invoke,method,attribute,method,proxy,object,other,value,invoke,method,attribute,method,other,if,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private boolean equals(Object proxy, Object other);1432475900;See {@link Annotation#equals(Object)} for a definition of the required algorithm.__@param proxy the synthesized annotation_@param other the other object to compare against;private boolean equals(Object proxy, Object other) {_		if (this == other) {_			return true__		}_		if (!this.annotationType.isInstance(other)) {_			return false__		}__		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object thisValue = invokeMethod(attributeMethod, proxy)__			Object otherValue = invokeMethod(attributeMethod, other)__			if (!nullSafeEquals(thisValue, otherValue)) {_				return false__			}_		}__		return true__	};see,link,annotation,equals,object,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation,param,other,the,other,object,to,compare,against;private,boolean,equals,object,proxy,object,other,if,this,other,return,true,if,this,annotation,type,is,instance,other,return,false,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,this,value,invoke,method,attribute,method,proxy,object,other,value,invoke,method,attribute,method,other,if,null,safe,equals,this,value,other,value,return,false,return,true
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432417608;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432418315;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432475887;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432475900;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432856630;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1432932334;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1439214025;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}.__@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1451421620;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}._@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1467730834;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}._@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> private int hashCodeForArray(Object array);1468583965;WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods_in Spring's {@link ObjectUtils} because those hash code generation_algorithms do not comply with the requirements specified in_{@link Annotation#hashCode()}._@param array the array to compute the hash code for;private int hashCodeForArray(Object array) {_		if (array instanceof boolean[]) {_			return Arrays.hashCode((boolean[]) array)__		}_		if (array instanceof byte[]) {_			return Arrays.hashCode((byte[]) array)__		}_		if (array instanceof char[]) {_			return Arrays.hashCode((char[]) array)__		}_		if (array instanceof double[]) {_			return Arrays.hashCode((double[]) array)__		}_		if (array instanceof float[]) {_			return Arrays.hashCode((float[]) array)__		}_		if (array instanceof int[]) {_			return Arrays.hashCode((int[]) array)__		}_		if (array instanceof long[]) {_			return Arrays.hashCode((long[]) array)__		}_		if (array instanceof short[]) {_			return Arrays.hashCode((short[]) array)__		}__		_		return Arrays.hashCode((Object[]) array)__	};warning,we,can,not,use,any,of,the,code,null,safe,hash,code,methods,in,spring,s,link,object,utils,because,those,hash,code,generation,algorithms,do,not,comply,with,the,requirements,specified,in,link,annotation,hash,code,param,array,the,array,to,compute,the,hash,code,for;private,int,hash,code,for,array,object,array,if,array,instanceof,boolean,return,arrays,hash,code,boolean,array,if,array,instanceof,byte,return,arrays,hash,code,byte,array,if,array,instanceof,char,return,arrays,hash,code,char,array,if,array,instanceof,double,return,arrays,hash,code,double,array,if,array,instanceof,float,return,arrays,hash,code,float,array,if,array,instanceof,int,return,arrays,hash,code,int,array,if,array,instanceof,long,return,arrays,hash,code,long,array,if,array,instanceof,short,return,arrays,hash,code,short,array,return,arrays,hash,code,object,array
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor);1439214025;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor);1451421620;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor);1467730834;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor);1468583965;Construct a new {@code SynthesizedAnnotationInvocationHandler} for_the supplied {@link AnnotationAttributeExtractor}._@param attributeExtractor the extractor to delegate to;SynthesizedAnnotationInvocationHandler(AnnotationAttributeExtractor<?> attributeExtractor) {_		Assert.notNull(attributeExtractor, "AnnotationAttributeExtractor must not be null")__		this.attributeExtractor = attributeExtractor__	};construct,a,new,code,synthesized,annotation,invocation,handler,for,the,supplied,link,annotation,attribute,extractor,param,attribute,extractor,the,extractor,to,delegate,to;synthesized,annotation,invocation,handler,annotation,attribute,extractor,attribute,extractor,assert,not,null,attribute,extractor,annotation,attribute,extractor,must,not,be,null,this,attribute,extractor,attribute,extractor
SynthesizedAnnotationInvocationHandler -> private int hashCode(Object proxy);1432417608;See {@link Annotation#hashCode()} for a definition of the required algorithm.__@param proxy the synthesized annotation;private int hashCode(Object proxy) {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object value = invokeMethod(attributeMethod, proxy)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation;private,int,hash,code,object,proxy,int,result,0,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,value,invoke,method,attribute,method,proxy,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int hashCode(Object proxy);1432418315;See {@link Annotation#hashCode()} for a definition of the required algorithm.__@param proxy the synthesized annotation;private int hashCode(Object proxy) {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object value = invokeMethod(attributeMethod, proxy)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation;private,int,hash,code,object,proxy,int,result,0,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,value,invoke,method,attribute,method,proxy,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int hashCode(Object proxy);1432475887;See {@link Annotation#hashCode()} for a definition of the required algorithm.__@param proxy the synthesized annotation;private int hashCode(Object proxy) {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object value = invokeMethod(attributeMethod, proxy)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation;private,int,hash,code,object,proxy,int,result,0,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,value,invoke,method,attribute,method,proxy,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int hashCode(Object proxy);1432475900;See {@link Annotation#hashCode()} for a definition of the required algorithm.__@param proxy the synthesized annotation;private int hashCode(Object proxy) {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {_			Object value = invokeMethod(attributeMethod, proxy)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm,param,proxy,the,synthesized,annotation;private,int,hash,code,object,proxy,int,result,0,for,method,attribute,method,get,attribute,methods,this,annotation,type,object,value,invoke,method,attribute,method,proxy,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1432856630;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1432932334;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1439214025;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1451421620;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1467730834;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private Object cloneArray(Object array);1468583965;Clone the provided array, ensuring that original component type is_retained._@param array the array to clone;private Object cloneArray(Object array) {_		if (array instanceof boolean[]) {_			return ((boolean[]) array).clone()__		}_		if (array instanceof byte[]) {_			return ((byte[]) array).clone()__		}_		if (array instanceof char[]) {_			return ((char[]) array).clone()__		}_		if (array instanceof double[]) {_			return ((double[]) array).clone()__		}_		if (array instanceof float[]) {_			return ((float[]) array).clone()__		}_		if (array instanceof int[]) {_			return ((int[]) array).clone()__		}_		if (array instanceof long[]) {_			return ((long[]) array).clone()__		}_		if (array instanceof short[]) {_			return ((short[]) array).clone()__		}__		_		return ((Object[]) array).clone()__	};clone,the,provided,array,ensuring,that,original,component,type,is,retained,param,array,the,array,to,clone;private,object,clone,array,object,array,if,array,instanceof,boolean,return,boolean,array,clone,if,array,instanceof,byte,return,byte,array,clone,if,array,instanceof,char,return,char,array,clone,if,array,instanceof,double,return,double,array,clone,if,array,instanceof,float,return,float,array,clone,if,array,instanceof,int,return,int,array,clone,if,array,instanceof,long,return,long,array,clone,if,array,instanceof,short,return,short,array,clone,return,object,array,clone
SynthesizedAnnotationInvocationHandler -> private String toString(Object proxy);1432417608;See {@link Annotation#toString()} for guidelines on the recommended format.__@param proxy the synthesized annotation;private String toString(Object proxy) {_		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(valueToString(invokeMethod(attributeMethod, proxy)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format,param,proxy,the,synthesized,annotation;private,string,to,string,object,proxy,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,this,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,value,to,string,invoke,method,attribute,method,proxy,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String toString(Object proxy);1432418315;See {@link Annotation#toString()} for guidelines on the recommended format.__@param proxy the synthesized annotation;private String toString(Object proxy) {_		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(valueToString(invokeMethod(attributeMethod, proxy)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format,param,proxy,the,synthesized,annotation;private,string,to,string,object,proxy,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,this,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,value,to,string,invoke,method,attribute,method,proxy,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String toString(Object proxy);1432475887;See {@link Annotation#toString()} for guidelines on the recommended format.__@param proxy the synthesized annotation;private String toString(Object proxy) {_		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(valueToString(invokeMethod(attributeMethod, proxy)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format,param,proxy,the,synthesized,annotation;private,string,to,string,object,proxy,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,this,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,value,to,string,invoke,method,attribute,method,proxy,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String toString(Object proxy);1432475900;See {@link Annotation#toString()} for guidelines on the recommended format.__@param proxy the synthesized annotation;private String toString(Object proxy) {_		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(valueToString(invokeMethod(attributeMethod, proxy)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format,param,proxy,the,synthesized,annotation;private,string,to,string,object,proxy,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,this,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,value,to,string,invoke,method,attribute,method,proxy,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1432856630;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1432932334;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1439214025;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1451421620;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1467730834;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private int annotationHashCode();1468583965;See {@link Annotation#hashCode()} for a definition of the required algorithm.;private int annotationHashCode() {_		int result = 0___		for (Method attributeMethod : AnnotationUtils.getAttributeMethods(annotationType())) {_			Object value = getAttributeValue(attributeMethod)__			int hashCode__			if (value.getClass().isArray()) {_				hashCode = hashCodeForArray(value)__			}_			else {_				hashCode = value.hashCode()__			}_			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode__		}__		return result__	};see,link,annotation,hash,code,for,a,definition,of,the,required,algorithm;private,int,annotation,hash,code,int,result,0,for,method,attribute,method,annotation,utils,get,attribute,methods,annotation,type,object,value,get,attribute,value,attribute,method,int,hash,code,if,value,get,class,is,array,hash,code,hash,code,for,array,value,else,hash,code,value,hash,code,result,127,attribute,method,get,name,hash,code,hash,code,return,result
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1432856630;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1432932334;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1439214025;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1451421620;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1467730834;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
SynthesizedAnnotationInvocationHandler -> private String annotationToString();1468583965;See {@link Annotation#toString()} for guidelines on the recommended format.;private String annotationToString() {_		StringBuilder sb = new StringBuilder("@").append(annotationType().getName()).append("(")___		Iterator<Method> iterator = AnnotationUtils.getAttributeMethods(annotationType()).iterator()__		while (iterator.hasNext()) {_			Method attributeMethod = iterator.next()__			sb.append(attributeMethod.getName())__			sb.append('=')__			sb.append(attributeValueToString(getAttributeValue(attributeMethod)))__			sb.append(iterator.hasNext() ? ", " : "")__		}__		return sb.append(")").toString()__	};see,link,annotation,to,string,for,guidelines,on,the,recommended,format;private,string,annotation,to,string,string,builder,sb,new,string,builder,append,annotation,type,get,name,append,iterator,method,iterator,annotation,utils,get,attribute,methods,annotation,type,iterator,while,iterator,has,next,method,attribute,method,iterator,next,sb,append,attribute,method,get,name,sb,append,sb,append,attribute,value,to,string,get,attribute,value,attribute,method,sb,append,iterator,has,next,return,sb,append,to,string
