# id;timestamp;commentText;codeText;commentWords;codeWords
NullSafeComparator -> @SuppressWarnings({ "unchecked"}) 	private NullSafeComparator(boolean nullsLow);1356735495;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings({ "unchecked"})_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings({ "unchecked"}) 	private NullSafeComparator(boolean nullsLow);1357119239;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings({ "unchecked"})_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings({ "unchecked"}) 	private NullSafeComparator(boolean nullsLow);1368482696;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings({ "unchecked"})_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings({ "unchecked", "rawtypes"}) 	private NullSafeComparator(boolean nullsLow);1385412762;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings({ "unchecked", "rawtypes"})_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,rawtypes,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings({ "unchecked", "rawtypes"}) 	private NullSafeComparator(boolean nullsLow);1467730834;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings({ "unchecked", "rawtypes"})_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,rawtypes,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings("unchecked") 	private NullSafeComparator(boolean nullsLow);1328020251;Create a NullSafeComparator that sorts <code>null</code> based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_<code>NullSafeComparator.NULLS_LOW</code> and_<code>NullSafeComparator.NULLS_HIGH</code>._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see java.lang.Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings("unchecked")_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = new ComparableComparator()__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,code,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,code,and,code,null,safe,comparator,code,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,java,lang,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,new,comparable,comparator,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings("unchecked") 	private NullSafeComparator(boolean nullsLow);1487178332;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings("unchecked")_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = ComparableComparator.INSTANCE__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,comparable,comparator,instance,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings("unchecked") 	private NullSafeComparator(boolean nullsLow);1496837955;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings("unchecked")_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = ComparableComparator.INSTANCE__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,comparable,comparator,instance,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings("unchecked") 	private NullSafeComparator(boolean nullsLow);1530174524;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings("unchecked")_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = ComparableComparator.INSTANCE__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,comparable,comparator,instance,this,nulls,low,nulls,low
NullSafeComparator -> @SuppressWarnings("unchecked") 	private NullSafeComparator(boolean nullsLow);1530190293;Create a NullSafeComparator that sorts {@code null} based on_the provided flag, working on Comparables._<p>When comparing two non-null objects, their Comparable implementation_will be used: this means that non-null elements (that this Comparator_will be applied to) need to implement Comparable._<p>As a convenience, you can use the default shared instances:_{@code NullSafeComparator.NULLS_LOW} and_{@code NullSafeComparator.NULLS_HIGH}._@param nullsLow whether to treat nulls lower or higher than non-null objects_@see Comparable_@see #NULLS_LOW_@see #NULLS_HIGH;@SuppressWarnings("unchecked")_	private NullSafeComparator(boolean nullsLow) {_		this.nonNullComparator = ComparableComparator.INSTANCE__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,working,on,comparables,p,when,comparing,two,non,null,objects,their,comparable,implementation,will,be,used,this,means,that,non,null,elements,that,this,comparator,will,be,applied,to,need,to,implement,comparable,p,as,a,convenience,you,can,use,the,default,shared,instances,code,null,safe,comparator,and,code,null,safe,comparator,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects,see,comparable,see,see;suppress,warnings,unchecked,private,null,safe,comparator,boolean,nulls,low,this,non,null,comparator,comparable,comparator,instance,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1328020251;Create a NullSafeComparator that sorts <code>null</code> based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,code,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1346940376;Create a NullSafeComparator that sorts <code>null</code> based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,code,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1356735495;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1357119239;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1368482696;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1385412762;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1467730834;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "The non-null comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,the,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1487178332;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "Non-null Comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1496837955;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "Non-null Comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1530174524;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "Non-null Comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
NullSafeComparator -> public NullSafeComparator(Comparator<T> comparator, boolean nullsLow);1530190293;Create a NullSafeComparator that sorts {@code null} based on the_provided flag, decorating the given Comparator._<p>When comparing two non-null objects, the specified Comparator will be used._The given underlying Comparator must be able to handle the elements that this_Comparator will be applied to._@param comparator the comparator to use when comparing two non-null objects_@param nullsLow whether to treat nulls lower or higher than non-null objects;public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {_		Assert.notNull(comparator, "Non-null Comparator is required")__		this.nonNullComparator = comparator__		this.nullsLow = nullsLow__	};create,a,null,safe,comparator,that,sorts,code,null,based,on,the,provided,flag,decorating,the,given,comparator,p,when,comparing,two,non,null,objects,the,specified,comparator,will,be,used,the,given,underlying,comparator,must,be,able,to,handle,the,elements,that,this,comparator,will,be,applied,to,param,comparator,the,comparator,to,use,when,comparing,two,non,null,objects,param,nulls,low,whether,to,treat,nulls,lower,or,higher,than,non,null,objects;public,null,safe,comparator,comparator,t,comparator,boolean,nulls,low,assert,not,null,comparator,non,null,comparator,is,required,this,non,null,comparator,comparator,this,nulls,low,nulls,low
