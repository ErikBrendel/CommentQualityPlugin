# id;timestamp;commentText;codeText;commentWords;codeWords
ModuleVisitor -> public void visitEnd();1531241461;Visits the end of the module. This method, which is the last one to be called, is used to_inform the visitor that everything have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,module,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,everything,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
ModuleVisitor -> public void visitEnd();1536664245;Visits the end of the module. This method, which is the last one to be called, is used to_inform the visitor that everything have been visited.;public void visitEnd() {_    if (mv != null) {_      mv.visitEnd()__    }_  };visits,the,end,of,the,module,this,method,which,is,the,last,one,to,be,called,is,used,to,inform,the,visitor,that,everything,have,been,visited;public,void,visit,end,if,mv,null,mv,visit,end
ModuleVisitor -> public void visitOpen(final String packaze, final int access, final String... modules);1531241461;Visit an open package of the current module.__@param packaze the internal name of the opened package._@param access the access flag of the opened package, valid values are among {@code_ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param modules the fully qualified names (using dots) of the modules that can use deep_reflection to the classes of the open package, or <tt>null</tt>.;public void visitOpen(final String packaze, final int access, final String... modules) {_    if (mv != null) {_      mv.visitOpen(packaze, access, modules)__    }_  };visit,an,open,package,of,the,current,module,param,packaze,the,internal,name,of,the,opened,package,param,access,the,access,flag,of,the,opened,package,valid,values,are,among,code,and,code,param,modules,the,fully,qualified,names,using,dots,of,the,modules,that,can,use,deep,reflection,to,the,classes,of,the,open,package,or,tt,null,tt;public,void,visit,open,final,string,packaze,final,int,access,final,string,modules,if,mv,null,mv,visit,open,packaze,access,modules
ModuleVisitor -> public void visitOpen(final String packaze, final int access, final String... modules);1536664245;Visit an open package of the current module.__@param packaze the internal name of the opened package._@param access the access flag of the opened package, valid values are among {@code_ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param modules the fully qualified names (using dots) of the modules that can use deep_reflection to the classes of the open package, or {@literal null}.;public void visitOpen(final String packaze, final int access, final String... modules) {_    if (mv != null) {_      mv.visitOpen(packaze, access, modules)__    }_  };visit,an,open,package,of,the,current,module,param,packaze,the,internal,name,of,the,opened,package,param,access,the,access,flag,of,the,opened,package,valid,values,are,among,code,and,code,param,modules,the,fully,qualified,names,using,dots,of,the,modules,that,can,use,deep,reflection,to,the,classes,of,the,open,package,or,literal,null;public,void,visit,open,final,string,packaze,final,int,access,final,string,modules,if,mv,null,mv,visit,open,packaze,access,modules
ModuleVisitor -> public void visitPackage(final String packaze);1531241461;Visit a package of the current module.__@param packaze the internal name of a package.;public void visitPackage(final String packaze) {_    if (mv != null) {_      mv.visitPackage(packaze)__    }_  };visit,a,package,of,the,current,module,param,packaze,the,internal,name,of,a,package;public,void,visit,package,final,string,packaze,if,mv,null,mv,visit,package,packaze
ModuleVisitor -> public void visitPackage(final String packaze);1536664245;Visit a package of the current module.__@param packaze the internal name of a package.;public void visitPackage(final String packaze) {_    if (mv != null) {_      mv.visitPackage(packaze)__    }_  };visit,a,package,of,the,current,module,param,packaze,the,internal,name,of,a,package;public,void,visit,package,final,string,packaze,if,mv,null,mv,visit,package,packaze
ModuleVisitor -> public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor);1531241461;Constructs a new {@link ModuleVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}_or {@link Opcodes#ASM7_EXPERIMENTAL}._@param moduleVisitor the module visitor to which this visitor must delegate method calls. May_be null.;public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM7_EXPERIMENTAL) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = moduleVisitor__  };constructs,a,new,link,module,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm6,or,link,opcodes,param,module,visitor,the,module,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,module,visitor,final,int,api,final,module,visitor,module,visitor,if,api,opcodes,asm6,api,opcodes,throw,new,illegal,argument,exception,this,api,api,this,mv,module,visitor
ModuleVisitor -> public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor);1536664245;Constructs a new {@link ModuleVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}_or {@link Opcodes#ASM7}._@param moduleVisitor the module visitor to which this visitor must delegate method calls. May_be null.;public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor) {_    if (api != Opcodes.ASM6 && api != Opcodes.ASM7) {_      throw new IllegalArgumentException()__    }_    this.api = api__    this.mv = moduleVisitor__  };constructs,a,new,link,module,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm6,or,link,opcodes,asm7,param,module,visitor,the,module,visitor,to,which,this,visitor,must,delegate,method,calls,may,be,null;public,module,visitor,final,int,api,final,module,visitor,module,visitor,if,api,opcodes,asm6,api,opcodes,asm7,throw,new,illegal,argument,exception,this,api,api,this,mv,module,visitor
ModuleVisitor -> public void visitMainClass(final String mainClass);1531241461;Visit the main class of the current module.__@param mainClass the internal name of the main class of the current module.;public void visitMainClass(final String mainClass) {_    if (mv != null) {_      mv.visitMainClass(mainClass)__    }_  };visit,the,main,class,of,the,current,module,param,main,class,the,internal,name,of,the,main,class,of,the,current,module;public,void,visit,main,class,final,string,main,class,if,mv,null,mv,visit,main,class,main,class
ModuleVisitor -> public void visitMainClass(final String mainClass);1536664245;Visit the main class of the current module.__@param mainClass the internal name of the main class of the current module.;public void visitMainClass(final String mainClass) {_    if (mv != null) {_      mv.visitMainClass(mainClass)__    }_  };visit,the,main,class,of,the,current,module,param,main,class,the,internal,name,of,the,main,class,of,the,current,module;public,void,visit,main,class,final,string,main,class,if,mv,null,mv,visit,main,class,main,class
ModuleVisitor -> public void visitRequire(final String module, final int access, final String version);1531241461;Visits a dependence of the current module.__@param module the fully qualified name (using dots) of the dependence._@param access the access flag of the dependence among {@code ACC_TRANSITIVE}, {@code_ACC_STATIC_PHASE}, {@code ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param version the module version at compile time, or <tt>null</tt>.;public void visitRequire(final String module, final int access, final String version) {_    if (mv != null) {_      mv.visitRequire(module, access, version)__    }_  };visits,a,dependence,of,the,current,module,param,module,the,fully,qualified,name,using,dots,of,the,dependence,param,access,the,access,flag,of,the,dependence,among,code,code,code,and,code,param,version,the,module,version,at,compile,time,or,tt,null,tt;public,void,visit,require,final,string,module,final,int,access,final,string,version,if,mv,null,mv,visit,require,module,access,version
ModuleVisitor -> public void visitRequire(final String module, final int access, final String version);1536664245;Visits a dependence of the current module.__@param module the fully qualified name (using dots) of the dependence._@param access the access flag of the dependence among {@code ACC_TRANSITIVE}, {@code_ACC_STATIC_PHASE}, {@code ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param version the module version at compile time, or {@literal null}.;public void visitRequire(final String module, final int access, final String version) {_    if (mv != null) {_      mv.visitRequire(module, access, version)__    }_  };visits,a,dependence,of,the,current,module,param,module,the,fully,qualified,name,using,dots,of,the,dependence,param,access,the,access,flag,of,the,dependence,among,code,code,code,and,code,param,version,the,module,version,at,compile,time,or,literal,null;public,void,visit,require,final,string,module,final,int,access,final,string,version,if,mv,null,mv,visit,require,module,access,version
ModuleVisitor -> public void visitProvide(final String service, final String... providers);1531241461;Visit an implementation of a service.__@param service the internal name of the service._@param providers the internal names of the implementations of the service (there is at least_one provider).;public void visitProvide(final String service, final String... providers) {_    if (mv != null) {_      mv.visitProvide(service, providers)__    }_  };visit,an,implementation,of,a,service,param,service,the,internal,name,of,the,service,param,providers,the,internal,names,of,the,implementations,of,the,service,there,is,at,least,one,provider;public,void,visit,provide,final,string,service,final,string,providers,if,mv,null,mv,visit,provide,service,providers
ModuleVisitor -> public void visitProvide(final String service, final String... providers);1536664245;Visit an implementation of a service.__@param service the internal name of the service._@param providers the internal names of the implementations of the service (there is at least_one provider).;public void visitProvide(final String service, final String... providers) {_    if (mv != null) {_      mv.visitProvide(service, providers)__    }_  };visit,an,implementation,of,a,service,param,service,the,internal,name,of,the,service,param,providers,the,internal,names,of,the,implementations,of,the,service,there,is,at,least,one,provider;public,void,visit,provide,final,string,service,final,string,providers,if,mv,null,mv,visit,provide,service,providers
ModuleVisitor -> public void visitUse(final String service);1531241461;Visit a service used by the current module. The name must be the internal name of an interface_or a class.__@param service the internal name of the service.;public void visitUse(final String service) {_    if (mv != null) {_      mv.visitUse(service)__    }_  };visit,a,service,used,by,the,current,module,the,name,must,be,the,internal,name,of,an,interface,or,a,class,param,service,the,internal,name,of,the,service;public,void,visit,use,final,string,service,if,mv,null,mv,visit,use,service
ModuleVisitor -> public void visitUse(final String service);1536664245;Visit a service used by the current module. The name must be the internal name of an interface_or a class.__@param service the internal name of the service.;public void visitUse(final String service) {_    if (mv != null) {_      mv.visitUse(service)__    }_  };visit,a,service,used,by,the,current,module,the,name,must,be,the,internal,name,of,an,interface,or,a,class,param,service,the,internal,name,of,the,service;public,void,visit,use,final,string,service,if,mv,null,mv,visit,use,service
ModuleVisitor -> public ModuleVisitor(final int api);1531241461;Constructs a new {@link ModuleVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}_or {@link Opcodes#ASM7_EXPERIMENTAL}.;public ModuleVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,module,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm6,or,link,opcodes;public,module,visitor,final,int,api,this,api,null
ModuleVisitor -> public ModuleVisitor(final int api);1536664245;Constructs a new {@link ModuleVisitor}.__@param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}_or {@link Opcodes#ASM7}.;public ModuleVisitor(final int api) {_    this(api, null)__  };constructs,a,new,link,module,visitor,param,api,the,asm,api,version,implemented,by,this,visitor,must,be,one,of,link,opcodes,asm6,or,link,opcodes,asm7;public,module,visitor,final,int,api,this,api,null
ModuleVisitor -> public void visitExport(final String packaze, final int access, final String... modules);1531241461;Visit an exported package of the current module.__@param packaze the internal name of the exported package._@param access the access flag of the exported package, valid values are among {@code_ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param modules the fully qualified names (using dots) of the modules that can access the public_classes of the exported package, or <tt>null</tt>.;public void visitExport(final String packaze, final int access, final String... modules) {_    if (mv != null) {_      mv.visitExport(packaze, access, modules)__    }_  };visit,an,exported,package,of,the,current,module,param,packaze,the,internal,name,of,the,exported,package,param,access,the,access,flag,of,the,exported,package,valid,values,are,among,code,and,code,param,modules,the,fully,qualified,names,using,dots,of,the,modules,that,can,access,the,public,classes,of,the,exported,package,or,tt,null,tt;public,void,visit,export,final,string,packaze,final,int,access,final,string,modules,if,mv,null,mv,visit,export,packaze,access,modules
ModuleVisitor -> public void visitExport(final String packaze, final int access, final String... modules);1536664245;Visit an exported package of the current module.__@param packaze the internal name of the exported package._@param access the access flag of the exported package, valid values are among {@code_ACC_SYNTHETIC} and {@code ACC_MANDATED}._@param modules the fully qualified names (using dots) of the modules that can access the public_classes of the exported package, or {@literal null}.;public void visitExport(final String packaze, final int access, final String... modules) {_    if (mv != null) {_      mv.visitExport(packaze, access, modules)__    }_  };visit,an,exported,package,of,the,current,module,param,packaze,the,internal,name,of,the,exported,package,param,access,the,access,flag,of,the,exported,package,valid,values,are,among,code,and,code,param,modules,the,fully,qualified,names,using,dots,of,the,modules,that,can,access,the,public,classes,of,the,exported,package,or,literal,null;public,void,visit,export,final,string,packaze,final,int,access,final,string,modules,if,mv,null,mv,visit,export,packaze,access,modules
