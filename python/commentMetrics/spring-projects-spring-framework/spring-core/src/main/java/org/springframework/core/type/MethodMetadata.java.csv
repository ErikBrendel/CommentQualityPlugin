# id;timestamp;commentText;codeText;commentWords;codeWords
MethodMetadata -> boolean isFinal()_;1328020251;Return whether the underlying method is marked as 'final'.;boolean isFinal()_;return,whether,the,underlying,method,is,marked,as,final;boolean,is,final
MethodMetadata -> boolean isFinal()_;1356735495;Return whether the underlying method is marked as 'final'.;boolean isFinal()_;return,whether,the,underlying,method,is,marked,as,final;boolean,is,final
MethodMetadata -> boolean isFinal()_;1368068203;Return whether the underlying method is marked as 'final'.;boolean isFinal()_;return,whether,the,underlying,method,is,marked,as,final;boolean,is,final
MethodMetadata -> boolean isFinal()_;1426780215;Return whether the underlying method is marked as 'final'.;boolean isFinal()_;return,whether,the,underlying,method,is,marked,as,final;boolean,is,final
MethodMetadata -> boolean isFinal()_;1431958618;Return whether the underlying method is marked as 'final'.;boolean isFinal()_;return,whether,the,underlying,method,is,marked,as,final;boolean,is,final
MethodMetadata -> boolean isStatic()_;1328020251;Return whether the underlying method is declared as 'static'.;boolean isStatic()_;return,whether,the,underlying,method,is,declared,as,static;boolean,is,static
MethodMetadata -> boolean isStatic()_;1356735495;Return whether the underlying method is declared as 'static'.;boolean isStatic()_;return,whether,the,underlying,method,is,declared,as,static;boolean,is,static
MethodMetadata -> boolean isStatic()_;1368068203;Return whether the underlying method is declared as 'static'.;boolean isStatic()_;return,whether,the,underlying,method,is,declared,as,static;boolean,is,static
MethodMetadata -> boolean isStatic()_;1426780215;Return whether the underlying method is declared as 'static'.;boolean isStatic()_;return,whether,the,underlying,method,is,declared,as,static;boolean,is,static
MethodMetadata -> boolean isStatic()_;1431958618;Return whether the underlying method is declared as 'static'.;boolean isStatic()_;return,whether,the,underlying,method,is,declared,as,static;boolean,is,static
MethodMetadata -> boolean isOverridable()_;1328020251;Return whether the underlying method is overridable,_i.e. not marked as static, final or private.;boolean isOverridable()_;return,whether,the,underlying,method,is,overridable,i,e,not,marked,as,static,final,or,private;boolean,is,overridable
MethodMetadata -> boolean isOverridable()_;1356735495;Return whether the underlying method is overridable,_i.e. not marked as static, final or private.;boolean isOverridable()_;return,whether,the,underlying,method,is,overridable,i,e,not,marked,as,static,final,or,private;boolean,is,overridable
MethodMetadata -> boolean isOverridable()_;1368068203;Return whether the underlying method is overridable,_i.e. not marked as static, final or private.;boolean isOverridable()_;return,whether,the,underlying,method,is,overridable,i,e,not,marked,as,static,final,or,private;boolean,is,overridable
MethodMetadata -> boolean isOverridable()_;1426780215;Return whether the underlying method is overridable,_i.e. not marked as static, final or private.;boolean isOverridable()_;return,whether,the,underlying,method,is,overridable,i,e,not,marked,as,static,final,or,private;boolean,is,overridable
MethodMetadata -> boolean isOverridable()_;1431958618;Return whether the underlying method is overridable,_i.e. not marked as static, final or private.;boolean isOverridable()_;return,whether,the,underlying,method,is,overridable,i,e,not,marked,as,static,final,or,private;boolean,is,overridable
MethodMetadata -> Map<String, Object> getAnnotationAttributes(String annotationType)_;1328020251;Retrieve the attributes of the annotation of the given type,_if any (i.e. if defined on the underlying method, as direct_annotation or as meta-annotation)._@param annotationType the annotation type to look for_@return a Map of attributes, with the attribute name as key (e.g. "value")_and the defined attribute value as Map value. This return value will be_<code>null</code> if no matching annotation is defined.;Map<String, Object> getAnnotationAttributes(String annotationType)_;retrieve,the,attributes,of,the,annotation,of,the,given,type,if,any,i,e,if,defined,on,the,underlying,method,as,direct,annotation,or,as,meta,annotation,param,annotation,type,the,annotation,type,to,look,for,return,a,map,of,attributes,with,the,attribute,name,as,key,e,g,value,and,the,defined,attribute,value,as,map,value,this,return,value,will,be,code,null,code,if,no,matching,annotation,is,defined;map,string,object,get,annotation,attributes,string,annotation,type
MethodMetadata -> Map<String, Object> getAnnotationAttributes(String annotationType)_;1356735495;Retrieve the attributes of the annotation of the given type,_if any (i.e. if defined on the underlying method, as direct_annotation or as meta-annotation)._@param annotationType the annotation type to look for_@return a Map of attributes, with the attribute name as key (e.g. "value")_and the defined attribute value as Map value. This return value will be_{@code null} if no matching annotation is defined.;Map<String, Object> getAnnotationAttributes(String annotationType)_;retrieve,the,attributes,of,the,annotation,of,the,given,type,if,any,i,e,if,defined,on,the,underlying,method,as,direct,annotation,or,as,meta,annotation,param,annotation,type,the,annotation,type,to,look,for,return,a,map,of,attributes,with,the,attribute,name,as,key,e,g,value,and,the,defined,attribute,value,as,map,value,this,return,value,will,be,code,null,if,no,matching,annotation,is,defined;map,string,object,get,annotation,attributes,string,annotation,type
MethodMetadata -> boolean isAbstract()_;1426780215;Return whether the underlying method is effectively abstract:_i.e. marked as abstract on a class or declared as a regular,_non-default method in an interface._@since 4.2;boolean isAbstract()_;return,whether,the,underlying,method,is,effectively,abstract,i,e,marked,as,abstract,on,a,class,or,declared,as,a,regular,non,default,method,in,an,interface,since,4,2;boolean,is,abstract
MethodMetadata -> boolean isAbstract()_;1431958618;Return whether the underlying method is effectively abstract:_i.e. marked as abstract on a class or declared as a regular,_non-default method in an interface._@since 4.2;boolean isAbstract()_;return,whether,the,underlying,method,is,effectively,abstract,i,e,marked,as,abstract,on,a,class,or,declared,as,a,regular,non,default,method,in,an,interface,since,4,2;boolean,is,abstract
MethodMetadata -> boolean isAnnotated(String annotationType)_;1328020251;Determine whether the underlying method has an annotation or_meta-annotation of the given type defined._@param annotationType the annotation type to look for_@return whether a matching annotation is defined;boolean isAnnotated(String annotationType)_;determine,whether,the,underlying,method,has,an,annotation,or,meta,annotation,of,the,given,type,defined,param,annotation,type,the,annotation,type,to,look,for,return,whether,a,matching,annotation,is,defined;boolean,is,annotated,string,annotation,type
MethodMetadata -> boolean isAnnotated(String annotationType)_;1356735495;Determine whether the underlying method has an annotation or_meta-annotation of the given type defined._@param annotationType the annotation type to look for_@return whether a matching annotation is defined;boolean isAnnotated(String annotationType)_;determine,whether,the,underlying,method,has,an,annotation,or,meta,annotation,of,the,given,type,defined,param,annotation,type,the,annotation,type,to,look,for,return,whether,a,matching,annotation,is,defined;boolean,is,annotated,string,annotation,type
MethodMetadata -> String getMethodName()_;1328020251;Return the name of the method.;String getMethodName()_;return,the,name,of,the,method;string,get,method,name
MethodMetadata -> String getMethodName()_;1356735495;Return the name of the method.;String getMethodName()_;return,the,name,of,the,method;string,get,method,name
MethodMetadata -> String getMethodName()_;1368068203;Return the name of the method.;String getMethodName()_;return,the,name,of,the,method;string,get,method,name
MethodMetadata -> String getMethodName()_;1426780215;Return the name of the method.;String getMethodName()_;return,the,name,of,the,method;string,get,method,name
MethodMetadata -> String getMethodName()_;1431958618;Return the name of the method.;String getMethodName()_;return,the,name,of,the,method;string,get,method,name
MethodMetadata -> public String getDeclaringClassName()_;1328020251;Return the fully-qualified name of the class that declares this method.;public String getDeclaringClassName()_;return,the,fully,qualified,name,of,the,class,that,declares,this,method;public,string,get,declaring,class,name
MethodMetadata -> public String getDeclaringClassName()_;1356735495;Return the fully-qualified name of the class that declares this method.;public String getDeclaringClassName()_;return,the,fully,qualified,name,of,the,class,that,declares,this,method;public,string,get,declaring,class,name
MethodMetadata -> public String getDeclaringClassName()_;1368068203;Return the fully-qualified name of the class that declares this method.;public String getDeclaringClassName()_;return,the,fully,qualified,name,of,the,class,that,declares,this,method;public,string,get,declaring,class,name
MethodMetadata -> public String getDeclaringClassName()_;1426780215;Return the fully-qualified name of the class that declares this method.;public String getDeclaringClassName()_;return,the,fully,qualified,name,of,the,class,that,declares,this,method;public,string,get,declaring,class,name
