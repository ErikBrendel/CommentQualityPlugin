commented;modifiers;parameterAmount;loc;comment;code
false;public;5;10;;@Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {     // On JDK 8, we'd otherwise run into double detection of the same annotated method...     if ((access & Opcodes.ACC_BRIDGE) != 0) {         return super.visitMethod(access, name, desc, signature, exceptions).     }     return new MethodMetadataReadingVisitor(name, access, getClassName(), Type.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet). }
false;public;2;7;;@Override public AnnotationVisitor visitAnnotation(String desc, boolean visible) {     String className = Type.getType(desc).getClassName().     this.annotationSet.add(className).     return new AnnotationAttributesReadingVisitor(className, this.attributesMap, this.metaAnnotationMap, this.classLoader). }
false;public;0;4;;@Override public Set<String> getAnnotationTypes() {     return this.annotationSet. }
false;public;1;5;;@Override public Set<String> getMetaAnnotationTypes(String annotationName) {     Set<String> metaAnnotationTypes = this.metaAnnotationMap.get(annotationName).     return (metaAnnotationTypes != null ? metaAnnotationTypes : Collections.emptySet()). }
false;public;1;4;;@Override public boolean hasAnnotation(String annotationName) {     return this.annotationSet.contains(annotationName). }
false;public;1;10;;@Override public boolean hasMetaAnnotation(String metaAnnotationType) {     Collection<Set<String>> allMetaTypes = this.metaAnnotationMap.values().     for (Set<String> metaTypes : allMetaTypes) {         if (metaTypes.contains(metaAnnotationType)) {             return true.         }     }     return false. }
false;public;1;5;;@Override public boolean isAnnotated(String annotationName) {     return (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationName) && this.attributesMap.containsKey(annotationName)). }
false;public;1;5;;@Override @Nullable public AnnotationAttributes getAnnotationAttributes(String annotationName) {     return getAnnotationAttributes(annotationName, false). }
false;public;2;11;;@Override @Nullable public AnnotationAttributes getAnnotationAttributes(String annotationName, boolean classValuesAsString) {     AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(this.attributesMap, this.metaAnnotationMap, annotationName).     if (raw == null) {         return null.     }     return AnnotationReadingVisitorUtils.convertClassValues("class '" + getClassName() + "'", this.classLoader, raw, classValuesAsString). }
false;public;1;5;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName) {     return getAllAnnotationAttributes(annotationName, false). }
false;public;2;16;;@Override @Nullable public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {     MultiValueMap<String, Object> allAttributes = new LinkedMultiValueMap<>().     List<AnnotationAttributes> attributes = this.attributesMap.get(annotationName).     if (attributes == null) {         return null.     }     for (AnnotationAttributes raw : attributes) {         for (Map.Entry<String, Object> entry : AnnotationReadingVisitorUtils.convertClassValues("class '" + getClassName() + "'", this.classLoader, raw, classValuesAsString).entrySet()) {             allAttributes.add(entry.getKey(), entry.getValue()).         }     }     return allAttributes. }
false;public;1;9;;@Override public boolean hasAnnotatedMethods(String annotationName) {     for (MethodMetadata methodMetadata : this.methodMetadataSet) {         if (methodMetadata.isAnnotated(annotationName)) {             return true.         }     }     return false. }
false;public;1;10;;@Override public Set<MethodMetadata> getAnnotatedMethods(String annotationName) {     Set<MethodMetadata> annotatedMethods = new LinkedHashSet<>(4).     for (MethodMetadata methodMetadata : this.methodMetadataSet) {         if (methodMetadata.isAnnotated(annotationName)) {             annotatedMethods.add(methodMetadata).         }     }     return annotatedMethods. }
