commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void visitMainClass(final String mainClass) {     this.mainClassIndex = symbolTable.addConstantClass(mainClass).index. }
false;public;1;5;;@Override public void visitPackage(final String packaze) {     packageIndex.putShort(symbolTable.addConstantPackage(packaze).index).     packageCount++. }
false;public;3;8;;@Override public void visitRequire(final String module, final int access, final String version) {     requires.putShort(symbolTable.addConstantModule(module).index).putShort(access).putShort(version == null ? 0 : symbolTable.addConstantUtf8(version)).     requiresCount++. }
false;public;3;13;;@Override public void visitExport(final String packaze, final int access, final String... modules) {     exports.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access).     if (modules == null) {         exports.putShort(0).     } else {         exports.putShort(modules.length).         for (String module : modules) {             exports.putShort(symbolTable.addConstantModule(module).index).         }     }     exportsCount++. }
false;public;3;13;;@Override public void visitOpen(final String packaze, final int access, final String... modules) {     opens.putShort(symbolTable.addConstantPackage(packaze).index).putShort(access).     if (modules == null) {         opens.putShort(0).     } else {         opens.putShort(modules.length).         for (String module : modules) {             opens.putShort(symbolTable.addConstantModule(module).index).         }     }     opensCount++. }
false;public;1;5;;@Override public void visitUse(final String service) {     usesIndex.putShort(symbolTable.addConstantClass(service).index).     usesCount++. }
false;public;2;9;;@Override public void visitProvide(final String service, final String... providers) {     provides.putShort(symbolTable.addConstantClass(service).index).     provides.putShort(providers.length).     for (String provider : providers) {         provides.putShort(symbolTable.addConstantClass(provider).index).     }     providesCount++. }
false;public;0;4;;@Override public void visitEnd() { // Nothing to do. }
true;;0;3;/**  * Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this  * ModuleWriter.  *  * @return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).  */ ;/**  * Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this  * ModuleWriter.  *  * @return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).  */ int getAttributeCount() {     return 1 + (packageCount > 0 ? 1 : 0) + (mainClassIndex > 0 ? 1 : 0). }
true;;0;17;/**  * Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this  * ModuleWriter. Also add the names of these attributes in the constant pool.  *  * @return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.  */ ;/**  * Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this  * ModuleWriter. Also add the names of these attributes in the constant pool.  *  * @return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.  */ int computeAttributesSize() {     symbolTable.addConstantUtf8(Constants.MODULE).     // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts.     int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length.     if (packageCount > 0) {         symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES).         // 6 attribute header bytes, and 2 bytes for package_count.         size += 8 + packageIndex.length.     }     if (mainClassIndex > 0) {         symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS).         // 6 attribute header bytes, and 2 bytes for main_class_index.         size += 8.     }     return size. }
true;;1;34;/**  * Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter  * in the given ByteVector.  *  * @param output where the attributes must be put.  */ ;/**  * Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter  * in the given ByteVector.  *  * @param output where the attributes must be put.  */ void putAttributes(final ByteVector output) {     // 6 bytes for name, flags and version, and 5 * 2 bytes for counts.     int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length.     output.putShort(symbolTable.addConstantUtf8(Constants.MODULE)).putInt(moduleAttributeLength).putShort(moduleNameIndex).putShort(moduleFlags).putShort(moduleVersionIndex).putShort(requiresCount).putByteArray(requires.data, 0, requires.length).putShort(exportsCount).putByteArray(exports.data, 0, exports.length).putShort(opensCount).putByteArray(opens.data, 0, opens.length).putShort(usesCount).putByteArray(usesIndex.data, 0, usesIndex.length).putShort(providesCount).putByteArray(provides.data, 0, provides.length).     if (packageCount > 0) {         output.putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)).putInt(2 + packageIndex.length).putShort(packageCount).putByteArray(packageIndex.data, 0, packageIndex.length).     }     if (mainClassIndex > 0) {         output.putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)).putInt(2).putShort(mainClassIndex).     } }
