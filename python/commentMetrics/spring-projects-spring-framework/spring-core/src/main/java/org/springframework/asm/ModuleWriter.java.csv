# id;timestamp;commentText;codeText;commentWords;codeWords
ModuleWriter -> int getAttributeCount();1531241461;Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this_ModuleWriter.__@return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).;int getAttributeCount() {_    return 1 + (packageCount > 0 ? 1 : 0) + (mainClassIndex > 0 ? 1 : 0)__  };returns,the,number,of,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,return,the,number,of,module,module,packages,and,module,main,class,attributes,between,1,and,3;int,get,attribute,count,return,1,package,count,0,1,0,main,class,index,0,1,0
ModuleWriter -> int getAttributeCount();1536664245;Returns the number of Module, ModulePackages and ModuleMainClass attributes generated by this_ModuleWriter.__@return the number of Module, ModulePackages and ModuleMainClass attributes (between 1 and 3).;int getAttributeCount() {_    return 1 + (packageCount > 0 ? 1 : 0) + (mainClassIndex > 0 ? 1 : 0)__  };returns,the,number,of,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,return,the,number,of,module,module,packages,and,module,main,class,attributes,between,1,and,3;int,get,attribute,count,return,1,package,count,0,1,0,main,class,index,0,1,0
ModuleWriter -> int computeAttributesSize();1531241461;Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this_ModuleWriter. Also add the names of these attributes in the constant pool.__@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.;int computeAttributesSize() {_    symbolTable.addConstantUtf8(Constants.MODULE)__    _    int size =_        22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length__    if (packageCount > 0) {_      symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)__      _      size += 8 + packageIndex.length__    }_    if (mainClassIndex > 0) {_      symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)__      _      size += 8__    }_    return size__  };returns,the,size,of,the,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,also,add,the,names,of,these,attributes,in,the,constant,pool,return,the,size,in,bytes,of,the,module,module,packages,and,module,main,class,attributes;int,compute,attributes,size,symbol,table,add,constant,utf8,constants,module,int,size,22,requires,length,exports,length,opens,length,uses,index,length,provides,length,if,package,count,0,symbol,table,add,constant,utf8,constants,size,8,package,index,length,if,main,class,index,0,symbol,table,add,constant,utf8,constants,size,8,return,size
ModuleWriter -> int computeAttributesSize();1536664245;Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this_ModuleWriter. Also add the names of these attributes in the constant pool.__@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.;int computeAttributesSize() {_    symbolTable.addConstantUtf8(Constants.MODULE)__    _    int size =_        22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length__    if (packageCount > 0) {_      symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)__      _      size += 8 + packageIndex.length__    }_    if (mainClassIndex > 0) {_      symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)__      _      size += 8__    }_    return size__  };returns,the,size,of,the,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,also,add,the,names,of,these,attributes,in,the,constant,pool,return,the,size,in,bytes,of,the,module,module,packages,and,module,main,class,attributes;int,compute,attributes,size,symbol,table,add,constant,utf8,constants,module,int,size,22,requires,length,exports,length,opens,length,uses,index,length,provides,length,if,package,count,0,symbol,table,add,constant,utf8,constants,size,8,package,index,length,if,main,class,index,0,symbol,table,add,constant,utf8,constants,size,8,return,size
ModuleWriter -> void putAttributes(final ByteVector output);1531241461;Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter_in the given ByteVector.__@param output where the attributes must be put.;void putAttributes(final ByteVector output) {_    _    int moduleAttributeLength =_        16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length__    output_        .putShort(symbolTable.addConstantUtf8(Constants.MODULE))_        .putInt(moduleAttributeLength)_        .putShort(moduleNameIndex)_        .putShort(moduleFlags)_        .putShort(moduleVersionIndex)_        .putShort(requiresCount)_        .putByteArray(requires.data, 0, requires.length)_        .putShort(exportsCount)_        .putByteArray(exports.data, 0, exports.length)_        .putShort(opensCount)_        .putByteArray(opens.data, 0, opens.length)_        .putShort(usesCount)_        .putByteArray(usesIndex.data, 0, usesIndex.length)_        .putShort(providesCount)_        .putByteArray(provides.data, 0, provides.length)__    if (packageCount > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES))_          .putInt(2 + packageIndex.length)_          .putShort(packageCount)_          .putByteArray(packageIndex.data, 0, packageIndex.length)__    }_    if (mainClassIndex > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS))_          .putInt(2)_          .putShort(mainClassIndex)__    }_  };puts,the,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,in,the,given,byte,vector,param,output,where,the,attributes,must,be,put;void,put,attributes,final,byte,vector,output,int,module,attribute,length,16,requires,length,exports,length,opens,length,uses,index,length,provides,length,output,put,short,symbol,table,add,constant,utf8,constants,module,put,int,module,attribute,length,put,short,module,name,index,put,short,module,flags,put,short,module,version,index,put,short,requires,count,put,byte,array,requires,data,0,requires,length,put,short,exports,count,put,byte,array,exports,data,0,exports,length,put,short,opens,count,put,byte,array,opens,data,0,opens,length,put,short,uses,count,put,byte,array,uses,index,data,0,uses,index,length,put,short,provides,count,put,byte,array,provides,data,0,provides,length,if,package,count,0,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,package,index,length,put,short,package,count,put,byte,array,package,index,data,0,package,index,length,if,main,class,index,0,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,main,class,index
ModuleWriter -> void putAttributes(final ByteVector output);1536664245;Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter_in the given ByteVector.__@param output where the attributes must be put.;void putAttributes(final ByteVector output) {_    _    int moduleAttributeLength =_        16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length__    output_        .putShort(symbolTable.addConstantUtf8(Constants.MODULE))_        .putInt(moduleAttributeLength)_        .putShort(moduleNameIndex)_        .putShort(moduleFlags)_        .putShort(moduleVersionIndex)_        .putShort(requiresCount)_        .putByteArray(requires.data, 0, requires.length)_        .putShort(exportsCount)_        .putByteArray(exports.data, 0, exports.length)_        .putShort(opensCount)_        .putByteArray(opens.data, 0, opens.length)_        .putShort(usesCount)_        .putByteArray(usesIndex.data, 0, usesIndex.length)_        .putShort(providesCount)_        .putByteArray(provides.data, 0, provides.length)__    if (packageCount > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES))_          .putInt(2 + packageIndex.length)_          .putShort(packageCount)_          .putByteArray(packageIndex.data, 0, packageIndex.length)__    }_    if (mainClassIndex > 0) {_      output_          .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS))_          .putInt(2)_          .putShort(mainClassIndex)__    }_  };puts,the,module,module,packages,and,module,main,class,attributes,generated,by,this,module,writer,in,the,given,byte,vector,param,output,where,the,attributes,must,be,put;void,put,attributes,final,byte,vector,output,int,module,attribute,length,16,requires,length,exports,length,opens,length,uses,index,length,provides,length,output,put,short,symbol,table,add,constant,utf8,constants,module,put,int,module,attribute,length,put,short,module,name,index,put,short,module,flags,put,short,module,version,index,put,short,requires,count,put,byte,array,requires,data,0,requires,length,put,short,exports,count,put,byte,array,exports,data,0,exports,length,put,short,opens,count,put,byte,array,opens,data,0,opens,length,put,short,uses,count,put,byte,array,uses,index,data,0,uses,index,length,put,short,provides,count,put,byte,array,provides,data,0,provides,length,if,package,count,0,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,package,index,length,put,short,package,count,put,byte,array,package,index,data,0,package,index,length,if,main,class,index,0,output,put,short,symbol,table,add,constant,utf8,constants,put,int,2,put,short,main,class,index
