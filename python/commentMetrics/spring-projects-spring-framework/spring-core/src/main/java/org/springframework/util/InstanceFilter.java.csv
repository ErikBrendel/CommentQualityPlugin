# id;timestamp;commentText;codeText;commentWords;codeWords
InstanceFilter -> public InstanceFilter(@Nullable Collection<? extends T> includes, 			@Nullable Collection<? extends T> excludes, boolean matchIfEmpty);1496837955;Create a new instance based on includes/excludes collections._<p>A particular element will match if it "matches" the one of the element in the_includes list and  does not match one of the element in the excludes list._<p>Subclasses may redefine what matching means. By default, an element match with_another if it is equals according to {@link Object#equals(Object)}_<p>If both collections are empty, {@code matchIfEmpty} defines if_an element matches or not._@param includes the collection of includes_@param excludes the collection of excludes_@param matchIfEmpty the matching result if both the includes and the excludes_collections are empty;public InstanceFilter(@Nullable Collection<? extends T> includes,_			@Nullable Collection<? extends T> excludes, boolean matchIfEmpty) {__		this.includes = (includes != null ? includes : Collections.emptyList())__		this.excludes = (excludes != null ? excludes : Collections.emptyList())__		this.matchIfEmpty = matchIfEmpty__	};create,a,new,instance,based,on,includes,excludes,collections,p,a,particular,element,will,match,if,it,matches,the,one,of,the,element,in,the,includes,list,and,does,not,match,one,of,the,element,in,the,excludes,list,p,subclasses,may,redefine,what,matching,means,by,default,an,element,match,with,another,if,it,is,equals,according,to,link,object,equals,object,p,if,both,collections,are,empty,code,match,if,empty,defines,if,an,element,matches,or,not,param,includes,the,collection,of,includes,param,excludes,the,collection,of,excludes,param,match,if,empty,the,matching,result,if,both,the,includes,and,the,excludes,collections,are,empty;public,instance,filter,nullable,collection,extends,t,includes,nullable,collection,extends,t,excludes,boolean,match,if,empty,this,includes,includes,null,includes,collections,empty,list,this,excludes,excludes,null,excludes,collections,empty,list,this,match,if,empty,match,if,empty
InstanceFilter -> public InstanceFilter(@Nullable Collection<? extends T> includes, 			@Nullable Collection<? extends T> excludes, boolean matchIfEmpty);1530174524;Create a new instance based on includes/excludes collections._<p>A particular element will match if it "matches" the one of the element in the_includes list and  does not match one of the element in the excludes list._<p>Subclasses may redefine what matching means. By default, an element match with_another if it is equals according to {@link Object#equals(Object)}_<p>If both collections are empty, {@code matchIfEmpty} defines if_an element matches or not._@param includes the collection of includes_@param excludes the collection of excludes_@param matchIfEmpty the matching result if both the includes and the excludes_collections are empty;public InstanceFilter(@Nullable Collection<? extends T> includes,_			@Nullable Collection<? extends T> excludes, boolean matchIfEmpty) {__		this.includes = (includes != null ? includes : Collections.emptyList())__		this.excludes = (excludes != null ? excludes : Collections.emptyList())__		this.matchIfEmpty = matchIfEmpty__	};create,a,new,instance,based,on,includes,excludes,collections,p,a,particular,element,will,match,if,it,matches,the,one,of,the,element,in,the,includes,list,and,does,not,match,one,of,the,element,in,the,excludes,list,p,subclasses,may,redefine,what,matching,means,by,default,an,element,match,with,another,if,it,is,equals,according,to,link,object,equals,object,p,if,both,collections,are,empty,code,match,if,empty,defines,if,an,element,matches,or,not,param,includes,the,collection,of,includes,param,excludes,the,collection,of,excludes,param,match,if,empty,the,matching,result,if,both,the,includes,and,the,excludes,collections,are,empty;public,instance,filter,nullable,collection,extends,t,includes,nullable,collection,extends,t,excludes,boolean,match,if,empty,this,includes,includes,null,includes,collections,empty,list,this,excludes,excludes,null,excludes,collections,empty,list,this,match,if,empty,match,if,empty
InstanceFilter -> protected boolean match(T instance, T candidate);1404934999;Determine if the specified {@code instance} is equal to the_specified {@code candidate}._@param instance the instance to handle_@param candidate a candidate defined by this filter_@return {@code true} if the instance matches the candidate;protected boolean match(T instance, T candidate) {_		return instance.equals(candidate)__	};determine,if,the,specified,code,instance,is,equal,to,the,specified,code,candidate,param,instance,the,instance,to,handle,param,candidate,a,candidate,defined,by,this,filter,return,code,true,if,the,instance,matches,the,candidate;protected,boolean,match,t,instance,t,candidate,return,instance,equals,candidate
InstanceFilter -> protected boolean match(T instance, T candidate);1474905889;Determine if the specified {@code instance} is equal to the_specified {@code candidate}._@param instance the instance to handle_@param candidate a candidate defined by this filter_@return {@code true} if the instance matches the candidate;protected boolean match(T instance, T candidate) {_		return instance.equals(candidate)__	};determine,if,the,specified,code,instance,is,equal,to,the,specified,code,candidate,param,instance,the,instance,to,handle,param,candidate,a,candidate,defined,by,this,filter,return,code,true,if,the,instance,matches,the,candidate;protected,boolean,match,t,instance,t,candidate,return,instance,equals,candidate
InstanceFilter -> protected boolean match(T instance, T candidate);1495868221;Determine if the specified {@code instance} is equal to the_specified {@code candidate}._@param instance the instance to handle_@param candidate a candidate defined by this filter_@return {@code true} if the instance matches the candidate;protected boolean match(T instance, T candidate) {_		return instance.equals(candidate)__	};determine,if,the,specified,code,instance,is,equal,to,the,specified,code,candidate,param,instance,the,instance,to,handle,param,candidate,a,candidate,defined,by,this,filter,return,code,true,if,the,instance,matches,the,candidate;protected,boolean,match,t,instance,t,candidate,return,instance,equals,candidate
InstanceFilter -> protected boolean match(T instance, T candidate);1496837955;Determine if the specified {@code instance} is equal to the_specified {@code candidate}._@param instance the instance to handle_@param candidate a candidate defined by this filter_@return {@code true} if the instance matches the candidate;protected boolean match(T instance, T candidate) {_		return instance.equals(candidate)__	};determine,if,the,specified,code,instance,is,equal,to,the,specified,code,candidate,param,instance,the,instance,to,handle,param,candidate,a,candidate,defined,by,this,filter,return,code,true,if,the,instance,matches,the,candidate;protected,boolean,match,t,instance,t,candidate,return,instance,equals,candidate
InstanceFilter -> protected boolean match(T instance, T candidate);1530174524;Determine if the specified {@code instance} is equal to the_specified {@code candidate}._@param instance the instance to handle_@param candidate a candidate defined by this filter_@return {@code true} if the instance matches the candidate;protected boolean match(T instance, T candidate) {_		return instance.equals(candidate)__	};determine,if,the,specified,code,instance,is,equal,to,the,specified,code,candidate,param,instance,the,instance,to,handle,param,candidate,a,candidate,defined,by,this,filter,return,code,true,if,the,instance,matches,the,candidate;protected,boolean,match,t,instance,t,candidate,return,instance,equals,candidate
InstanceFilter -> public InstanceFilter(Collection<? extends T> includes, 			Collection<? extends T> excludes, boolean matchIfEmpty);1404934999;Create a new instance based on includes/excludes collections._<p>A particular element will match if it "matches" the one of the element in the_includes list and  does not match one of the element in the excludes list._<p>Subclasses may redefine what matching means. By default, an element match with_another if it is equals according to {@link Object#equals(Object)}_<p>If both collections are empty, {@code matchIfEmpty} defines if_an element matches or not._@param includes the collection of includes_@param excludes the collection of excludes_@param matchIfEmpty the matching result if both the includes and the excludes_collections are empty;public InstanceFilter(Collection<? extends T> includes,_			Collection<? extends T> excludes, boolean matchIfEmpty) {__		this.includes = includes != null ? includes : Collections.<T>emptyList()__		this.excludes = excludes != null ? excludes : Collections.<T>emptyList()__		this.matchIfEmpty = matchIfEmpty__	};create,a,new,instance,based,on,includes,excludes,collections,p,a,particular,element,will,match,if,it,matches,the,one,of,the,element,in,the,includes,list,and,does,not,match,one,of,the,element,in,the,excludes,list,p,subclasses,may,redefine,what,matching,means,by,default,an,element,match,with,another,if,it,is,equals,according,to,link,object,equals,object,p,if,both,collections,are,empty,code,match,if,empty,defines,if,an,element,matches,or,not,param,includes,the,collection,of,includes,param,excludes,the,collection,of,excludes,param,match,if,empty,the,matching,result,if,both,the,includes,and,the,excludes,collections,are,empty;public,instance,filter,collection,extends,t,includes,collection,extends,t,excludes,boolean,match,if,empty,this,includes,includes,null,includes,collections,t,empty,list,this,excludes,excludes,null,excludes,collections,t,empty,list,this,match,if,empty,match,if,empty
InstanceFilter -> public InstanceFilter(Collection<? extends T> includes, 			Collection<? extends T> excludes, boolean matchIfEmpty);1474905889;Create a new instance based on includes/excludes collections._<p>A particular element will match if it "matches" the one of the element in the_includes list and  does not match one of the element in the excludes list._<p>Subclasses may redefine what matching means. By default, an element match with_another if it is equals according to {@link Object#equals(Object)}_<p>If both collections are empty, {@code matchIfEmpty} defines if_an element matches or not._@param includes the collection of includes_@param excludes the collection of excludes_@param matchIfEmpty the matching result if both the includes and the excludes_collections are empty;public InstanceFilter(Collection<? extends T> includes,_			Collection<? extends T> excludes, boolean matchIfEmpty) {__		this.includes = (includes != null ? includes : Collections.emptyList())__		this.excludes = (excludes != null ? excludes : Collections.emptyList())__		this.matchIfEmpty = matchIfEmpty__	};create,a,new,instance,based,on,includes,excludes,collections,p,a,particular,element,will,match,if,it,matches,the,one,of,the,element,in,the,includes,list,and,does,not,match,one,of,the,element,in,the,excludes,list,p,subclasses,may,redefine,what,matching,means,by,default,an,element,match,with,another,if,it,is,equals,according,to,link,object,equals,object,p,if,both,collections,are,empty,code,match,if,empty,defines,if,an,element,matches,or,not,param,includes,the,collection,of,includes,param,excludes,the,collection,of,excludes,param,match,if,empty,the,matching,result,if,both,the,includes,and,the,excludes,collections,are,empty;public,instance,filter,collection,extends,t,includes,collection,extends,t,excludes,boolean,match,if,empty,this,includes,includes,null,includes,collections,empty,list,this,excludes,excludes,null,excludes,collections,empty,list,this,match,if,empty,match,if,empty
InstanceFilter -> public InstanceFilter(Collection<? extends T> includes, 			Collection<? extends T> excludes, boolean matchIfEmpty);1495868221;Create a new instance based on includes/excludes collections._<p>A particular element will match if it "matches" the one of the element in the_includes list and  does not match one of the element in the excludes list._<p>Subclasses may redefine what matching means. By default, an element match with_another if it is equals according to {@link Object#equals(Object)}_<p>If both collections are empty, {@code matchIfEmpty} defines if_an element matches or not._@param includes the collection of includes_@param excludes the collection of excludes_@param matchIfEmpty the matching result if both the includes and the excludes_collections are empty;public InstanceFilter(Collection<? extends T> includes,_			Collection<? extends T> excludes, boolean matchIfEmpty) {__		this.includes = (includes != null ? includes : Collections.emptyList())__		this.excludes = (excludes != null ? excludes : Collections.emptyList())__		this.matchIfEmpty = matchIfEmpty__	};create,a,new,instance,based,on,includes,excludes,collections,p,a,particular,element,will,match,if,it,matches,the,one,of,the,element,in,the,includes,list,and,does,not,match,one,of,the,element,in,the,excludes,list,p,subclasses,may,redefine,what,matching,means,by,default,an,element,match,with,another,if,it,is,equals,according,to,link,object,equals,object,p,if,both,collections,are,empty,code,match,if,empty,defines,if,an,element,matches,or,not,param,includes,the,collection,of,includes,param,excludes,the,collection,of,excludes,param,match,if,empty,the,matching,result,if,both,the,includes,and,the,excludes,collections,are,empty;public,instance,filter,collection,extends,t,includes,collection,extends,t,excludes,boolean,match,if,empty,this,includes,includes,null,includes,collections,empty,list,this,excludes,excludes,null,excludes,collections,empty,list,this,match,if,empty,match,if,empty
InstanceFilter -> public boolean match(T instance);1404934999;Determine if the specified {code instance} matches this filter.;public boolean match(T instance) {_		Assert.notNull(instance, "The instance to match is mandatory")___		boolean includesSet = !this.includes.isEmpty()__		boolean excludesSet = !this.excludes.isEmpty()__		if (!includesSet && !excludesSet) {_			return this.matchIfEmpty__		}__		boolean matchIncludes = match(instance, this.includes)__		boolean matchExcludes = match(instance, this.excludes)___		if (!includesSet) {_			return !matchExcludes__		}__		if (!excludesSet) {_			return matchIncludes__		}_		return matchIncludes && !matchExcludes__	};determine,if,the,specified,code,instance,matches,this,filter;public,boolean,match,t,instance,assert,not,null,instance,the,instance,to,match,is,mandatory,boolean,includes,set,this,includes,is,empty,boolean,excludes,set,this,excludes,is,empty,if,includes,set,excludes,set,return,this,match,if,empty,boolean,match,includes,match,instance,this,includes,boolean,match,excludes,match,instance,this,excludes,if,includes,set,return,match,excludes,if,excludes,set,return,match,includes,return,match,includes,match,excludes
InstanceFilter -> public boolean match(T instance);1474905889;Determine if the specified {code instance} matches this filter.;public boolean match(T instance) {_		Assert.notNull(instance, "Instance to match must not be null")___		boolean includesSet = !this.includes.isEmpty()__		boolean excludesSet = !this.excludes.isEmpty()__		if (!includesSet && !excludesSet) {_			return this.matchIfEmpty__		}__		boolean matchIncludes = match(instance, this.includes)__		boolean matchExcludes = match(instance, this.excludes)__		if (!includesSet) {_			return !matchExcludes__		}_		if (!excludesSet) {_			return matchIncludes__		}_		return matchIncludes && !matchExcludes__	};determine,if,the,specified,code,instance,matches,this,filter;public,boolean,match,t,instance,assert,not,null,instance,instance,to,match,must,not,be,null,boolean,includes,set,this,includes,is,empty,boolean,excludes,set,this,excludes,is,empty,if,includes,set,excludes,set,return,this,match,if,empty,boolean,match,includes,match,instance,this,includes,boolean,match,excludes,match,instance,this,excludes,if,includes,set,return,match,excludes,if,excludes,set,return,match,includes,return,match,includes,match,excludes
InstanceFilter -> public boolean match(T instance);1495868221;Determine if the specified {code instance} matches this filter.;public boolean match(T instance) {_		Assert.notNull(instance, "Instance to match must not be null")___		boolean includesSet = !this.includes.isEmpty()__		boolean excludesSet = !this.excludes.isEmpty()__		if (!includesSet && !excludesSet) {_			return this.matchIfEmpty__		}__		boolean matchIncludes = match(instance, this.includes)__		boolean matchExcludes = match(instance, this.excludes)__		if (!includesSet) {_			return !matchExcludes__		}_		if (!excludesSet) {_			return matchIncludes__		}_		return matchIncludes && !matchExcludes__	};determine,if,the,specified,code,instance,matches,this,filter;public,boolean,match,t,instance,assert,not,null,instance,instance,to,match,must,not,be,null,boolean,includes,set,this,includes,is,empty,boolean,excludes,set,this,excludes,is,empty,if,includes,set,excludes,set,return,this,match,if,empty,boolean,match,includes,match,instance,this,includes,boolean,match,excludes,match,instance,this,excludes,if,includes,set,return,match,excludes,if,excludes,set,return,match,includes,return,match,includes,match,excludes
InstanceFilter -> public boolean match(T instance);1496837955;Determine if the specified {code instance} matches this filter.;public boolean match(T instance) {_		Assert.notNull(instance, "Instance to match must not be null")___		boolean includesSet = !this.includes.isEmpty()__		boolean excludesSet = !this.excludes.isEmpty()__		if (!includesSet && !excludesSet) {_			return this.matchIfEmpty__		}__		boolean matchIncludes = match(instance, this.includes)__		boolean matchExcludes = match(instance, this.excludes)__		if (!includesSet) {_			return !matchExcludes__		}_		if (!excludesSet) {_			return matchIncludes__		}_		return matchIncludes && !matchExcludes__	};determine,if,the,specified,code,instance,matches,this,filter;public,boolean,match,t,instance,assert,not,null,instance,instance,to,match,must,not,be,null,boolean,includes,set,this,includes,is,empty,boolean,excludes,set,this,excludes,is,empty,if,includes,set,excludes,set,return,this,match,if,empty,boolean,match,includes,match,instance,this,includes,boolean,match,excludes,match,instance,this,excludes,if,includes,set,return,match,excludes,if,excludes,set,return,match,includes,return,match,includes,match,excludes
InstanceFilter -> public boolean match(T instance);1530174524;Determine if the specified {code instance} matches this filter.;public boolean match(T instance) {_		Assert.notNull(instance, "Instance to match must not be null")___		boolean includesSet = !this.includes.isEmpty()__		boolean excludesSet = !this.excludes.isEmpty()__		if (!includesSet && !excludesSet) {_			return this.matchIfEmpty__		}__		boolean matchIncludes = match(instance, this.includes)__		boolean matchExcludes = match(instance, this.excludes)__		if (!includesSet) {_			return !matchExcludes__		}_		if (!excludesSet) {_			return matchIncludes__		}_		return matchIncludes && !matchExcludes__	};determine,if,the,specified,code,instance,matches,this,filter;public,boolean,match,t,instance,assert,not,null,instance,instance,to,match,must,not,be,null,boolean,includes,set,this,includes,is,empty,boolean,excludes,set,this,excludes,is,empty,if,includes,set,excludes,set,return,this,match,if,empty,boolean,match,includes,match,instance,this,includes,boolean,match,excludes,match,instance,this,excludes,if,includes,set,return,match,excludes,if,excludes,set,return,match,includes,return,match,includes,match,excludes
InstanceFilter -> protected boolean match(T instance, Collection<? extends T> candidates);1404934999;Determine if the specified {@code instance} matches one of the candidates._<p>If the candidates collection is {@code null}, returns {@code false}._@param instance the instance to check_@param candidates a list of candidates_@return {@code true} if the instance match or the candidates collection is null;protected boolean match(T instance, Collection<? extends T> candidates) {_		for (T candidate : candidates) {_			if (match(instance, candidate)) {_				return true__			}_		}_		return false__	};determine,if,the,specified,code,instance,matches,one,of,the,candidates,p,if,the,candidates,collection,is,code,null,returns,code,false,param,instance,the,instance,to,check,param,candidates,a,list,of,candidates,return,code,true,if,the,instance,match,or,the,candidates,collection,is,null;protected,boolean,match,t,instance,collection,extends,t,candidates,for,t,candidate,candidates,if,match,instance,candidate,return,true,return,false
InstanceFilter -> protected boolean match(T instance, Collection<? extends T> candidates);1474905889;Determine if the specified {@code instance} matches one of the candidates._<p>If the candidates collection is {@code null}, returns {@code false}._@param instance the instance to check_@param candidates a list of candidates_@return {@code true} if the instance match or the candidates collection is null;protected boolean match(T instance, Collection<? extends T> candidates) {_		for (T candidate : candidates) {_			if (match(instance, candidate)) {_				return true__			}_		}_		return false__	};determine,if,the,specified,code,instance,matches,one,of,the,candidates,p,if,the,candidates,collection,is,code,null,returns,code,false,param,instance,the,instance,to,check,param,candidates,a,list,of,candidates,return,code,true,if,the,instance,match,or,the,candidates,collection,is,null;protected,boolean,match,t,instance,collection,extends,t,candidates,for,t,candidate,candidates,if,match,instance,candidate,return,true,return,false
InstanceFilter -> protected boolean match(T instance, Collection<? extends T> candidates);1496837955;Determine if the specified {@code instance} matches one of the candidates._<p>If the candidates collection is {@code null}, returns {@code false}._@param instance the instance to check_@param candidates a list of candidates_@return {@code true} if the instance match or the candidates collection is null;protected boolean match(T instance, Collection<? extends T> candidates) {_		for (T candidate : candidates) {_			if (match(instance, candidate)) {_				return true__			}_		}_		return false__	};determine,if,the,specified,code,instance,matches,one,of,the,candidates,p,if,the,candidates,collection,is,code,null,returns,code,false,param,instance,the,instance,to,check,param,candidates,a,list,of,candidates,return,code,true,if,the,instance,match,or,the,candidates,collection,is,null;protected,boolean,match,t,instance,collection,extends,t,candidates,for,t,candidate,candidates,if,match,instance,candidate,return,true,return,false
InstanceFilter -> protected boolean match(T instance, Collection<? extends T> candidates);1530174524;Determine if the specified {@code instance} matches one of the candidates._<p>If the candidates collection is {@code null}, returns {@code false}._@param instance the instance to check_@param candidates a list of candidates_@return {@code true} if the instance match or the candidates collection is null;protected boolean match(T instance, Collection<? extends T> candidates) {_		for (T candidate : candidates) {_			if (match(instance, candidate)) {_				return true__			}_		}_		return false__	};determine,if,the,specified,code,instance,matches,one,of,the,candidates,p,if,the,candidates,collection,is,code,null,returns,code,false,param,instance,the,instance,to,check,param,candidates,a,list,of,candidates,return,code,true,if,the,instance,match,or,the,candidates,collection,is,null;protected,boolean,match,t,instance,collection,extends,t,candidates,for,t,candidate,candidates,if,match,instance,candidate,return,true,return,false
