commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Collection.class, String.class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType, this.conversionService). }
false;public;3;23;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     Collection<?> sourceCollection = (Collection<?>) source.     if (sourceCollection.isEmpty()) {         return "".     }     StringBuilder sb = new StringBuilder().     int i = 0.     for (Object sourceElement : sourceCollection) {         if (i > 0) {             sb.append(DELIMITER).         }         Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType).         sb.append(targetElement).         i++.     }     return sb.toString(). }
