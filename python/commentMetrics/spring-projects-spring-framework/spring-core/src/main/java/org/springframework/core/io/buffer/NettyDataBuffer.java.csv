commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Directly exposes the native {@code ByteBuf} that this buffer is based on.  * @return the wrapped byte buffer  */ ;/**  * Directly exposes the native {@code ByteBuf} that this buffer is based on.  * @return the wrapped byte buffer  */ public ByteBuf getNativeBuffer() {     return this.byteBuf. }
false;public;0;4;;@Override public NettyDataBufferFactory factory() {     return this.dataBufferFactory. }
false;public;2;12;;@Override public int indexOf(IntPredicate predicate, int fromIndex) {     Assert.notNull(predicate, "IntPredicate must not be null").     if (fromIndex < 0) {         fromIndex = 0.     } else if (fromIndex >= this.byteBuf.writerIndex()) {         return -1.     }     int length = this.byteBuf.writerIndex() - fromIndex.     return this.byteBuf.forEachByte(fromIndex, length, predicate.negate()::test). }
false;public;2;9;;@Override public int lastIndexOf(IntPredicate predicate, int fromIndex) {     Assert.notNull(predicate, "IntPredicate must not be null").     if (fromIndex < 0) {         return -1.     }     fromIndex = Math.min(fromIndex, this.byteBuf.writerIndex() - 1).     return this.byteBuf.forEachByteDesc(0, fromIndex + 1, predicate.negate()::test). }
false;public;0;4;;@Override public int readableByteCount() {     return this.byteBuf.readableBytes(). }
false;public;0;4;;@Override public int writableByteCount() {     return this.byteBuf.writableBytes(). }
false;public;0;4;;@Override public int readPosition() {     return this.byteBuf.readerIndex(). }
false;public;1;5;;@Override public NettyDataBuffer readPosition(int readPosition) {     this.byteBuf.readerIndex(readPosition).     return this. }
false;public;0;4;;@Override public int writePosition() {     return this.byteBuf.writerIndex(). }
false;public;1;5;;@Override public NettyDataBuffer writePosition(int writePosition) {     this.byteBuf.writerIndex(writePosition).     return this. }
false;public;1;4;;@Override public byte getByte(int index) {     return this.byteBuf.getByte(index). }
false;public;0;4;;@Override public int capacity() {     return this.byteBuf.capacity(). }
false;public;1;5;;@Override public NettyDataBuffer capacity(int capacity) {     this.byteBuf.capacity(capacity).     return this. }
false;public;1;5;;@Override public DataBuffer ensureCapacity(int capacity) {     this.byteBuf.ensureWritable(capacity).     return this. }
false;public;0;4;;@Override public byte read() {     return this.byteBuf.readByte(). }
false;public;1;5;;@Override public NettyDataBuffer read(byte[] destination) {     this.byteBuf.readBytes(destination).     return this. }
false;public;3;5;;@Override public NettyDataBuffer read(byte[] destination, int offset, int length) {     this.byteBuf.readBytes(destination, offset, length).     return this. }
false;public;1;5;;@Override public NettyDataBuffer write(byte b) {     this.byteBuf.writeByte(b).     return this. }
false;public;1;5;;@Override public NettyDataBuffer write(byte[] source) {     this.byteBuf.writeBytes(source).     return this. }
false;public;3;5;;@Override public NettyDataBuffer write(byte[] source, int offset, int length) {     this.byteBuf.writeBytes(source, offset, length).     return this. }
false;public;1;21;;@Override public NettyDataBuffer write(DataBuffer... buffers) {     if (!ObjectUtils.isEmpty(buffers)) {         if (hasNettyDataBuffers(buffers)) {             ByteBuf[] nativeBuffers = new ByteBuf[buffers.length].             for (int i = 0. i < buffers.length. i++) {                 nativeBuffers[i] = ((NettyDataBuffer) buffers[i]).getNativeBuffer().             }             write(nativeBuffers).         } else {             ByteBuffer[] byteBuffers = new ByteBuffer[buffers.length].             for (int i = 0. i < buffers.length. i++) {                 byteBuffers[i] = buffers[i].asByteBuffer().             }             write(byteBuffers).         }     }     return this. }
false;private,static;1;8;;private static boolean hasNettyDataBuffers(DataBuffer[] buffers) {     for (DataBuffer buffer : buffers) {         if (!(buffer instanceof NettyDataBuffer)) {             return false.         }     }     return true. }
false;public;1;9;;@Override public NettyDataBuffer write(ByteBuffer... buffers) {     if (!ObjectUtils.isEmpty(buffers)) {         for (ByteBuffer buffer : buffers) {             this.byteBuf.writeBytes(buffer).         }     }     return this. }
true;public;1;8;/**  * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,  * starting at the current writing position.  * @param byteBufs the buffers to write into this buffer  * @return this buffer  */ ;/**  * Writes one or more Netty {@link ByteBuf ByteBufs} to this buffer,  * starting at the current writing position.  * @param byteBufs the buffers to write into this buffer  * @return this buffer  */ public NettyDataBuffer write(ByteBuf... byteBufs) {     if (!ObjectUtils.isEmpty(byteBufs)) {         for (ByteBuf byteBuf : byteBufs) {             this.byteBuf.writeBytes(byteBuf).         }     }     return this. }
false;public;2;15;;@Override public DataBuffer write(CharSequence charSequence, Charset charset) {     Assert.notNull(charSequence, "CharSequence must not be null").     Assert.notNull(charset, "Charset must not be null").     if (StandardCharsets.UTF_8.equals(charset)) {         ByteBufUtil.writeUtf8(this.byteBuf, charSequence).     } else if (StandardCharsets.US_ASCII.equals(charset)) {         ByteBufUtil.writeAscii(this.byteBuf, charSequence).     } else {         return PooledDataBuffer.super.write(charSequence, charset).     }     return this. }
false;public;2;5;;@Override public NettyDataBuffer slice(int index, int length) {     ByteBuf slice = this.byteBuf.slice(index, length).     return new NettyDataBuffer(slice, this.dataBufferFactory). }
false;public;0;4;;@Override public ByteBuffer asByteBuffer() {     return this.byteBuf.nioBuffer(). }
false;public;2;4;;@Override public ByteBuffer asByteBuffer(int index, int length) {     return this.byteBuf.nioBuffer(index, length). }
false;public;0;4;;@Override public InputStream asInputStream() {     return new ByteBufInputStream(this.byteBuf). }
false;public;1;4;;@Override public InputStream asInputStream(boolean releaseOnClose) {     return new ByteBufInputStream(this.byteBuf, releaseOnClose). }
false;public;0;4;;@Override public OutputStream asOutputStream() {     return new ByteBufOutputStream(this.byteBuf). }
false;public;0;4;;@Override public boolean isAllocated() {     return this.byteBuf.refCnt() > 0. }
false;public;0;4;;@Override public PooledDataBuffer retain() {     return new NettyDataBuffer(this.byteBuf.retain(), this.dataBufferFactory). }
false;public;0;4;;@Override public boolean release() {     return this.byteBuf.release(). }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof NettyDataBuffer && this.byteBuf.equals(((NettyDataBuffer) other).byteBuf))). }
false;public;0;4;;@Override public int hashCode() {     return this.byteBuf.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.byteBuf.toString(). }
