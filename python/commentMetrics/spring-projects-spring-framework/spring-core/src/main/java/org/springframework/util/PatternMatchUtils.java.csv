# id;timestamp;commentText;codeText;commentWords;codeWords
PatternMatchUtils -> public static boolean simpleMatch(@Nullable String[] patterns, String str);1496837955;Match a String against the given patterns, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param patterns the patterns to match against_@param str the String to match_@return whether the String matches any of the given patterns;public static boolean simpleMatch(@Nullable String[] patterns, String str) {_		if (patterns != null) {_			for (String pattern : patterns) {_				if (simpleMatch(pattern, str)) {_					return true__				}_			}_		}_		return false__	};match,a,string,against,the,given,patterns,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,patterns,the,patterns,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,any,of,the,given,patterns;public,static,boolean,simple,match,nullable,string,patterns,string,str,if,patterns,null,for,string,pattern,patterns,if,simple,match,pattern,str,return,true,return,false
PatternMatchUtils -> public static boolean simpleMatch(@Nullable String[] patterns, String str);1535316501;Match a String against the given patterns, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param patterns the patterns to match against_@param str the String to match_@return whether the String matches any of the given patterns;public static boolean simpleMatch(@Nullable String[] patterns, String str) {_		if (patterns != null) {_			for (String pattern : patterns) {_				if (simpleMatch(pattern, str)) {_					return true__				}_			}_		}_		return false__	};match,a,string,against,the,given,patterns,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,patterns,the,patterns,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,any,of,the,given,patterns;public,static,boolean,simple,match,nullable,string,patterns,string,str,if,patterns,null,for,string,pattern,patterns,if,simple,match,pattern,str,return,true,return,false
PatternMatchUtils -> public static boolean simpleMatch(String[] patterns, String str);1328020251;Match a String against the given patterns, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param patterns the patterns to match against_@param str the String to match_@return whether the String matches any of the given patterns;public static boolean simpleMatch(String[] patterns, String str) {_		if (patterns != null) {_			for (int i = 0_ i < patterns.length_ i++) {_				if (simpleMatch(patterns[i], str)) {_					return true__				}_			}_		}_		return false__	};match,a,string,against,the,given,patterns,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,patterns,the,patterns,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,any,of,the,given,patterns;public,static,boolean,simple,match,string,patterns,string,str,if,patterns,null,for,int,i,0,i,patterns,length,i,if,simple,match,patterns,i,str,return,true,return,false
PatternMatchUtils -> public static boolean simpleMatch(String[] patterns, String str);1431006100;Match a String against the given patterns, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param patterns the patterns to match against_@param str the String to match_@return whether the String matches any of the given patterns;public static boolean simpleMatch(String[] patterns, String str) {_		if (patterns != null) {_			for (String pattern : patterns) {_				if (simpleMatch(pattern, str)) {_					return true__				}_			}_		}_		return false__	};match,a,string,against,the,given,patterns,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,patterns,the,patterns,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,any,of,the,given,patterns;public,static,boolean,simple,match,string,patterns,string,str,if,patterns,null,for,string,pattern,patterns,if,simple,match,pattern,str,return,true,return,false
PatternMatchUtils -> public static boolean simpleMatch(String pattern, String str);1328020251;Match a String against the given pattern, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param pattern the pattern to match against_@param str the String to match_@return whether the String matches the given pattern;public static boolean simpleMatch(String pattern, String str) {_		if (pattern == null || str == null) {_			return false__		}_		int firstIndex = pattern.indexOf('*')__		if (firstIndex == -1) {_			return pattern.equals(str)__		}_		if (firstIndex == 0) {_			if (pattern.length() == 1) {_				return true__			}_			int nextIndex = pattern.indexOf('*', firstIndex + 1)__			if (nextIndex == -1) {_				return str.endsWith(pattern.substring(1))__			}_			String part = pattern.substring(1, nextIndex)__			int partIndex = str.indexOf(part)__			while (partIndex != -1) {_				if (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {_					return true__				}_				partIndex = str.indexOf(part, partIndex + 1)__			}_			return false__		}_		return (str.length() >= firstIndex &&_				pattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&_				simpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)))__	};match,a,string,against,the,given,pattern,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,pattern,the,pattern,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,the,given,pattern;public,static,boolean,simple,match,string,pattern,string,str,if,pattern,null,str,null,return,false,int,first,index,pattern,index,of,if,first,index,1,return,pattern,equals,str,if,first,index,0,if,pattern,length,1,return,true,int,next,index,pattern,index,of,first,index,1,if,next,index,1,return,str,ends,with,pattern,substring,1,string,part,pattern,substring,1,next,index,int,part,index,str,index,of,part,while,part,index,1,if,simple,match,pattern,substring,next,index,str,substring,part,index,part,length,return,true,part,index,str,index,of,part,part,index,1,return,false,return,str,length,first,index,pattern,substring,0,first,index,equals,str,substring,0,first,index,simple,match,pattern,substring,first,index,str,substring,first,index
PatternMatchUtils -> public static boolean simpleMatch(String pattern, String str);1431006100;Match a String against the given pattern, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param pattern the pattern to match against_@param str the String to match_@return whether the String matches the given pattern;public static boolean simpleMatch(String pattern, String str) {_		if (pattern == null || str == null) {_			return false__		}_		int firstIndex = pattern.indexOf('*')__		if (firstIndex == -1) {_			return pattern.equals(str)__		}_		if (firstIndex == 0) {_			if (pattern.length() == 1) {_				return true__			}_			int nextIndex = pattern.indexOf('*', firstIndex + 1)__			if (nextIndex == -1) {_				return str.endsWith(pattern.substring(1))__			}_			String part = pattern.substring(1, nextIndex)__			if ("".equals(part)) {_				return simpleMatch(pattern.substring(nextIndex), str)__			}_			int partIndex = str.indexOf(part)__			while (partIndex != -1) {_				if (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {_					return true__				}_				partIndex = str.indexOf(part, partIndex + 1)__			}_			return false__		}_		return (str.length() >= firstIndex &&_				pattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&_				simpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)))__	};match,a,string,against,the,given,pattern,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,pattern,the,pattern,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,the,given,pattern;public,static,boolean,simple,match,string,pattern,string,str,if,pattern,null,str,null,return,false,int,first,index,pattern,index,of,if,first,index,1,return,pattern,equals,str,if,first,index,0,if,pattern,length,1,return,true,int,next,index,pattern,index,of,first,index,1,if,next,index,1,return,str,ends,with,pattern,substring,1,string,part,pattern,substring,1,next,index,if,equals,part,return,simple,match,pattern,substring,next,index,str,int,part,index,str,index,of,part,while,part,index,1,if,simple,match,pattern,substring,next,index,str,substring,part,index,part,length,return,true,part,index,str,index,of,part,part,index,1,return,false,return,str,length,first,index,pattern,substring,0,first,index,equals,str,substring,0,first,index,simple,match,pattern,substring,first,index,str,substring,first,index
PatternMatchUtils -> public static boolean simpleMatch(@Nullable String pattern, @Nullable String str);1496837955;Match a String against the given pattern, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param pattern the pattern to match against_@param str the String to match_@return whether the String matches the given pattern;public static boolean simpleMatch(@Nullable String pattern, @Nullable String str) {_		if (pattern == null || str == null) {_			return false__		}_		int firstIndex = pattern.indexOf('*')__		if (firstIndex == -1) {_			return pattern.equals(str)__		}_		if (firstIndex == 0) {_			if (pattern.length() == 1) {_				return true__			}_			int nextIndex = pattern.indexOf('*', firstIndex + 1)__			if (nextIndex == -1) {_				return str.endsWith(pattern.substring(1))__			}_			String part = pattern.substring(1, nextIndex)__			if ("".equals(part)) {_				return simpleMatch(pattern.substring(nextIndex), str)__			}_			int partIndex = str.indexOf(part)__			while (partIndex != -1) {_				if (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {_					return true__				}_				partIndex = str.indexOf(part, partIndex + 1)__			}_			return false__		}_		return (str.length() >= firstIndex &&_				pattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&_				simpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)))__	};match,a,string,against,the,given,pattern,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,pattern,the,pattern,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,the,given,pattern;public,static,boolean,simple,match,nullable,string,pattern,nullable,string,str,if,pattern,null,str,null,return,false,int,first,index,pattern,index,of,if,first,index,1,return,pattern,equals,str,if,first,index,0,if,pattern,length,1,return,true,int,next,index,pattern,index,of,first,index,1,if,next,index,1,return,str,ends,with,pattern,substring,1,string,part,pattern,substring,1,next,index,if,equals,part,return,simple,match,pattern,substring,next,index,str,int,part,index,str,index,of,part,while,part,index,1,if,simple,match,pattern,substring,next,index,str,substring,part,index,part,length,return,true,part,index,str,index,of,part,part,index,1,return,false,return,str,length,first,index,pattern,substring,0,first,index,equals,str,substring,0,first,index,simple,match,pattern,substring,first,index,str,substring,first,index
PatternMatchUtils -> public static boolean simpleMatch(@Nullable String pattern, @Nullable String str);1535316501;Match a String against the given pattern, supporting the following simple_pattern styles: "xxx*", "*xxx", "*xxx*" and "xxx*yyy" matches (with an_arbitrary number of pattern parts), as well as direct equality._@param pattern the pattern to match against_@param str the String to match_@return whether the String matches the given pattern;public static boolean simpleMatch(@Nullable String pattern, @Nullable String str) {_		if (pattern == null || str == null) {_			return false__		}_		int firstIndex = pattern.indexOf('*')__		if (firstIndex == -1) {_			return pattern.equals(str)__		}_		if (firstIndex == 0) {_			if (pattern.length() == 1) {_				return true__			}_			int nextIndex = pattern.indexOf('*', firstIndex + 1)__			if (nextIndex == -1) {_				return str.endsWith(pattern.substring(1))__			}_			String part = pattern.substring(1, nextIndex)__			if (part.isEmpty()) {_				return simpleMatch(pattern.substring(nextIndex), str)__			}_			int partIndex = str.indexOf(part)__			while (partIndex != -1) {_				if (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {_					return true__				}_				partIndex = str.indexOf(part, partIndex + 1)__			}_			return false__		}_		return (str.length() >= firstIndex &&_				pattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&_				simpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)))__	};match,a,string,against,the,given,pattern,supporting,the,following,simple,pattern,styles,xxx,xxx,xxx,and,xxx,yyy,matches,with,an,arbitrary,number,of,pattern,parts,as,well,as,direct,equality,param,pattern,the,pattern,to,match,against,param,str,the,string,to,match,return,whether,the,string,matches,the,given,pattern;public,static,boolean,simple,match,nullable,string,pattern,nullable,string,str,if,pattern,null,str,null,return,false,int,first,index,pattern,index,of,if,first,index,1,return,pattern,equals,str,if,first,index,0,if,pattern,length,1,return,true,int,next,index,pattern,index,of,first,index,1,if,next,index,1,return,str,ends,with,pattern,substring,1,string,part,pattern,substring,1,next,index,if,part,is,empty,return,simple,match,pattern,substring,next,index,str,int,part,index,str,index,of,part,while,part,index,1,if,simple,match,pattern,substring,next,index,str,substring,part,index,part,length,return,true,part,index,str,index,of,part,part,index,1,return,false,return,str,length,first,index,pattern,substring,0,first,index,equals,str,substring,0,first,index,simple,match,pattern,substring,first,index,str,substring,first,index
