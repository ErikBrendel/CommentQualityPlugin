# id;timestamp;commentText;codeText;commentWords;codeWords
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473671281;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473771793;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1474365351;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1475013584;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType)_;1474365351;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType)_;1475013584;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1468513830;Whether the encoder supports the given source element type and the MIME_type for the output stream.__@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1468532417;Whether the encoder supports the given source element type and the MIME_type for the output stream.__@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1469540372;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1473334416;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Object... hints)_;1468513830;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream.__@param inputStream the input stream of Objects to encode_@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Object... hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Object... hints)_;1468532417;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream.__@param inputStream the input stream of Objects to encode_@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Object... hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Object... hints)_;1469540372;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode_@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Object... hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, MimeType mimeType, Object... hints)_;1473334416;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode, optional_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, MimeType mimeType, Object... hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,optional,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,mime,type,mime,type,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473671281;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> boolean canEncode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473771793;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496242568;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496837955;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream (optional)_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1520381042;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream (optional)_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Encoder -> Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory, 			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1528141727;Encode a stream of Objects of type {@code T} into a {@link DataBuffer}_output stream._@param inputStream the input stream of Objects to encode. If the input should be_encoded as a single value rather than as a stream of elements, an instance of_{@link Mono} should be used._@param bufferFactory for creating output stream {@code DataBuffer}'s_@param elementType the expected type of elements in the input stream__this type must have been previously passed to the {@link #canEncode}_method and it must have returned {@code true}._@param mimeType the MIME type for the output stream (optional)_@param hints additional information about how to do encode_@return the output stream;Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,_			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;encode,a,stream,of,objects,of,type,code,t,into,a,link,data,buffer,output,stream,param,input,stream,the,input,stream,of,objects,to,encode,if,the,input,should,be,encoded,as,a,single,value,rather,than,as,a,stream,of,elements,an,instance,of,link,mono,should,be,used,param,buffer,factory,for,creating,output,stream,code,data,buffer,s,param,element,type,the,expected,type,of,elements,in,the,input,stream,this,type,must,have,been,previously,passed,to,the,link,can,encode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,for,the,output,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream;flux,data,buffer,encode,publisher,extends,t,input,stream,data,buffer,factory,buffer,factory,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Encoder -> List<MimeType> getEncodableMimeTypes()_;1468513830;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1468532417;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1469540372;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1473334416;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1473671281;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1473771793;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1474365351;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1475013584;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1495868221;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1496242568;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1496837955;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1520381042;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> List<MimeType> getEncodableMimeTypes()_;1528141727;Return the list of mime types this encoder supports.;List<MimeType> getEncodableMimeTypes()_;return,the,list,of,mime,types,this,encoder,supports;list,mime,type,get,encodable,mime,types
Encoder -> boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;1495868221;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,nullable,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;1496242568;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,nullable,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;1496837955;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_(can be {@code null} if not specified)_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,nullable,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;1520381042;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_(can be {@code null} if not specified)_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,nullable,mime,type,mime,type
Encoder -> boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;1528141727;Whether the encoder supports the given source element type and the MIME_type for the output stream._@param elementType the type of elements in the source stream_@param mimeType the MIME type for the output stream_(can be {@code null} if not specified)_@return {@code true} if supported, {@code false} otherwise;boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,encoder,supports,the,given,source,element,type,and,the,mime,type,for,the,output,stream,param,element,type,the,type,of,elements,in,the,source,stream,param,mime,type,the,mime,type,for,the,output,stream,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,encode,resolvable,type,element,type,nullable,mime,type,mime,type
