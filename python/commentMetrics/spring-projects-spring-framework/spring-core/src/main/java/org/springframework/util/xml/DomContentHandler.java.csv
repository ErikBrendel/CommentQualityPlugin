commented;modifiers;parameterAmount;loc;comment;code
false;private;0;8;;private Node getParent() {     if (!this.elements.isEmpty()) {         return this.elements.get(this.elements.size() - 1).     } else {         return this.node.     } }
false;public;4;15;;@Override public void startElement(String uri, String localName, String qName, Attributes attributes) {     Node parent = getParent().     Element element = this.document.createElementNS(uri, qName).     for (int i = 0. i < attributes.getLength(). i++) {         String attrUri = attributes.getURI(i).         String attrQname = attributes.getQName(i).         String value = attributes.getValue(i).         if (!attrQname.startsWith("xmlns")) {             element.setAttributeNS(attrUri, attrQname, value).         }     }     element = (Element) parent.appendChild(element).     this.elements.add(element). }
false;public;3;4;;@Override public void endElement(String uri, String localName, String qName) {     this.elements.remove(this.elements.size() - 1). }
false;public;3;13;;@Override public void characters(char[] ch, int start, int length) {     String data = new String(ch, start, length).     Node parent = getParent().     Node lastChild = parent.getLastChild().     if (lastChild != null && lastChild.getNodeType() == Node.TEXT_NODE) {         ((Text) lastChild).appendData(data).     } else {         Text text = this.document.createTextNode(data).         parent.appendChild(text).     } }
false;public;2;6;;@Override public void processingInstruction(String target, String data) {     Node parent = getParent().     ProcessingInstruction pi = this.document.createProcessingInstruction(target, data).     parent.appendChild(pi). }
false;public;1;3;;// Unsupported @Override public void setDocumentLocator(Locator locator) { }
false;public;0;3;;@Override public void startDocument() { }
false;public;0;3;;@Override public void endDocument() { }
false;public;2;3;;@Override public void startPrefixMapping(String prefix, String uri) { }
false;public;1;3;;@Override public void endPrefixMapping(String prefix) { }
false;public;3;3;;@Override public void ignorableWhitespace(char[] ch, int start, int length) { }
false;public;1;3;;@Override public void skippedEntity(String name) { }
