# id;timestamp;commentText;codeText;commentWords;codeWords
NestedCheckedException -> @Override 	public String getMessage();1328020251;Return the detail message, including the message from the nested exception_if there is one.;@Override_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Override 	public String getMessage();1356735495;Return the detail message, including the message from the nested exception_if there is one.;@Override_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Override 	public String getMessage();1385412762;Return the detail message, including the message from the nested exception_if there is one.;@Override_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Override 	public String getMessage();1493803888;Return the detail message, including the message from the nested exception_if there is one.;@Override_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Override 	public String getMessage();1495868221;Return the detail message, including the message from the nested exception_if there is one.;@Override_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> public boolean contains(Class exType);1328020251;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(Class exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public boolean contains(Class exType);1356735495;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(Class exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public NestedCheckedException(@Nullable String msg, @Nullable Throwable cause);1496837955;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(@Nullable String msg, @Nullable Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,nullable,string,msg,nullable,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(@Nullable String msg, @Nullable Throwable cause);1530174524;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(@Nullable String msg, @Nullable Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,nullable,string,msg,nullable,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(String msg);1328020251;Construct a <code>NestedCheckedException</code> with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,code,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1356735495;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1385412762;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1493803888;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1495868221;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1496837955;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public NestedCheckedException(String msg);1530174524;Construct a {@code NestedCheckedException} with the specified detail message._@param msg the detail message;public NestedCheckedException(String msg) {_		super(msg)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,param,msg,the,detail,message;public,nested,checked,exception,string,msg,super,msg
NestedCheckedException -> public Throwable getRootCause();1328020251;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or <code>null</code> if none;public Throwable getRootCause() {_		Throwable rootCause = null__		Throwable cause = getCause()__		while (cause != null && cause != rootCause) {_			rootCause = cause__			cause = cause.getCause()__		}_		return rootCause__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,code,if,none;public,throwable,get,root,cause,throwable,root,cause,null,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
NestedCheckedException -> public Throwable getRootCause();1356735495;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;public Throwable getRootCause() {_		Throwable rootCause = null__		Throwable cause = getCause()__		while (cause != null && cause != rootCause) {_			rootCause = cause__			cause = cause.getCause()__		}_		return rootCause__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;public,throwable,get,root,cause,throwable,root,cause,null,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
NestedCheckedException -> public Throwable getRootCause();1385412762;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;public Throwable getRootCause() {_		Throwable rootCause = null__		Throwable cause = getCause()__		while (cause != null && cause != rootCause) {_			rootCause = cause__			cause = cause.getCause()__		}_		return rootCause__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;public,throwable,get,root,cause,throwable,root,cause,null,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
NestedCheckedException -> public Throwable getRootCause();1493803888;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;public Throwable getRootCause() {_		return NestedExceptionUtils.getRootCause(this)__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;public,throwable,get,root,cause,return,nested,exception,utils,get,root,cause,this
NestedCheckedException -> public boolean contains(@Nullable Class<?> exType);1496837955;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(@Nullable Class<?> exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,nullable,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public boolean contains(@Nullable Class<?> exType);1530174524;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(@Nullable Class<?> exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,nullable,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public boolean contains(Class<?> exType);1385412762;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(Class<?> exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public boolean contains(Class<?> exType);1493803888;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(Class<?> exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> public boolean contains(Class<?> exType);1495868221;Check whether this exception contains an exception of the given type:_either it is of the given class itself or it contains a nested cause_of the given type._@param exType the exception type to look for_@return whether there is a nested exception of the specified type;public boolean contains(Class<?> exType) {_		if (exType == null) {_			return false__		}_		if (exType.isInstance(this)) {_			return true__		}_		Throwable cause = getCause()__		if (cause == this) {_			return false__		}_		if (cause instanceof NestedCheckedException) {_			return ((NestedCheckedException) cause).contains(exType)__		}_		else {_			while (cause != null) {_				if (exType.isInstance(cause)) {_					return true__				}_				if (cause.getCause() == cause) {_					break__				}_				cause = cause.getCause()__			}_			return false__		}_	};check,whether,this,exception,contains,an,exception,of,the,given,type,either,it,is,of,the,given,class,itself,or,it,contains,a,nested,cause,of,the,given,type,param,ex,type,the,exception,type,to,look,for,return,whether,there,is,a,nested,exception,of,the,specified,type;public,boolean,contains,class,ex,type,if,ex,type,null,return,false,if,ex,type,is,instance,this,return,true,throwable,cause,get,cause,if,cause,this,return,false,if,cause,instanceof,nested,checked,exception,return,nested,checked,exception,cause,contains,ex,type,else,while,cause,null,if,ex,type,is,instance,cause,return,true,if,cause,get,cause,cause,break,cause,cause,get,cause,return,false
NestedCheckedException -> @Override 	@Nullable 	public String getMessage();1496837955;Return the detail message, including the message from the nested exception_if there is one.;@Override_	@Nullable_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,nullable,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Override 	@Nullable 	public String getMessage();1530174524;Return the detail message, including the message from the nested exception_if there is one.;@Override_	@Nullable_	public String getMessage() {_		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause())__	};return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;override,nullable,public,string,get,message,return,nested,exception,utils,build,message,super,get,message,get,cause
NestedCheckedException -> @Nullable 	public Throwable getRootCause();1495868221;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;@Nullable_	public Throwable getRootCause() {_		return NestedExceptionUtils.getRootCause(this)__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;nullable,public,throwable,get,root,cause,return,nested,exception,utils,get,root,cause,this
NestedCheckedException -> @Nullable 	public Throwable getRootCause();1496837955;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;@Nullable_	public Throwable getRootCause() {_		return NestedExceptionUtils.getRootCause(this)__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;nullable,public,throwable,get,root,cause,return,nested,exception,utils,get,root,cause,this
NestedCheckedException -> @Nullable 	public Throwable getRootCause();1530174524;Retrieve the innermost cause of this exception, if any._@return the innermost exception, or {@code null} if none;@Nullable_	public Throwable getRootCause() {_		return NestedExceptionUtils.getRootCause(this)__	};retrieve,the,innermost,cause,of,this,exception,if,any,return,the,innermost,exception,or,code,null,if,none;nullable,public,throwable,get,root,cause,return,nested,exception,utils,get,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1328020251;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never <code>null</code>)_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,code,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1356735495;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1385412762;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1493803888;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1495868221;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1496837955;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public Throwable getMostSpecificCause();1530174524;Retrieve the most specific cause of this exception, that is,_either the innermost cause (root cause) or this exception itself._<p>Differs from {@link #getRootCause()} in that it falls back_to the present exception if there is no root cause._@return the most specific cause (never {@code null})_@since 2.0.3;public Throwable getMostSpecificCause() {_		Throwable rootCause = getRootCause()__		return (rootCause != null ? rootCause : this)__	};retrieve,the,most,specific,cause,of,this,exception,that,is,either,the,innermost,cause,root,cause,or,this,exception,itself,p,differs,from,link,get,root,cause,in,that,it,falls,back,to,the,present,exception,if,there,is,no,root,cause,return,the,most,specific,cause,never,code,null,since,2,0,3;public,throwable,get,most,specific,cause,throwable,root,cause,get,root,cause,return,root,cause,null,root,cause,this
NestedCheckedException -> public NestedCheckedException(String msg, Throwable cause);1328020251;Construct a <code>NestedCheckedException</code> with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(String msg, Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,code,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,string,msg,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(String msg, Throwable cause);1356735495;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(String msg, Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,string,msg,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(String msg, Throwable cause);1385412762;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(String msg, Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,string,msg,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(String msg, Throwable cause);1493803888;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(String msg, Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,string,msg,throwable,cause,super,msg,cause
NestedCheckedException -> public NestedCheckedException(String msg, Throwable cause);1495868221;Construct a {@code NestedCheckedException} with the specified detail message_and nested exception._@param msg the detail message_@param cause the nested exception;public NestedCheckedException(String msg, Throwable cause) {_		super(msg, cause)__	};construct,a,code,nested,checked,exception,with,the,specified,detail,message,and,nested,exception,param,msg,the,detail,message,param,cause,the,nested,exception;public,nested,checked,exception,string,msg,throwable,cause,super,msg,cause
