commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Whether the decoder supports the given target element type and the MIME  * type of the source stream.  * @param elementType the target element type for the output stream  * @param mimeType the mime type associated with the stream to decode  * (can be {@code null} if not specified)  * @return {@code true} if supported, {@code false} otherwise  */ ;/**  * Whether the decoder supports the given target element type and the MIME  * type of the source stream.  * @param elementType the target element type for the output stream  * @param mimeType the mime type associated with the stream to decode  * (can be {@code null} if not specified)  * @return {@code true} if supported, {@code false} otherwise  */ boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType).
true;;4;2;/**  * Decode a {@link DataBuffer} input stream into a Flux of {@code T}.  * @param inputStream the {@code DataBuffer} input stream to decode  * @param elementType the expected type of elements in the output stream.  * this type must have been previously passed to the {@link #canDecode}  * method and it must have returned {@code true}.  * @param mimeType the MIME type associated with the input stream (optional)  * @param hints additional information about how to do encode  * @return the output stream with decoded elements  */ ;/**  * Decode a {@link DataBuffer} input stream into a Flux of {@code T}.  * @param inputStream the {@code DataBuffer} input stream to decode  * @param elementType the expected type of elements in the output stream.  * this type must have been previously passed to the {@link #canDecode}  * method and it must have returned {@code true}.  * @param mimeType the MIME type associated with the input stream (optional)  * @param hints additional information about how to do encode  * @return the output stream with decoded elements  */ Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints).
true;;4;2;/**  * Decode a {@link DataBuffer} input stream into a Mono of {@code T}.  * @param inputStream the {@code DataBuffer} input stream to decode  * @param elementType the expected type of elements in the output stream.  * this type must have been previously passed to the {@link #canDecode}  * method and it must have returned {@code true}.  * @param mimeType the MIME type associated with the input stream (optional)  * @param hints additional information about how to do encode  * @return the output stream with the decoded element  */ ;/**  * Decode a {@link DataBuffer} input stream into a Mono of {@code T}.  * @param inputStream the {@code DataBuffer} input stream to decode  * @param elementType the expected type of elements in the output stream.  * this type must have been previously passed to the {@link #canDecode}  * method and it must have returned {@code true}.  * @param mimeType the MIME type associated with the input stream (optional)  * @param hints additional information about how to do encode  * @return the output stream with the decoded element  */ Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints).
true;;0;1;/**  * Return the list of MIME types this decoder supports.  */ ;/**  * Return the list of MIME types this decoder supports.  */ List<MimeType> getDecodableMimeTypes().
