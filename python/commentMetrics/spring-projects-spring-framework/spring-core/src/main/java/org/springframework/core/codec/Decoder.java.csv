# id;timestamp;commentText;codeText;commentWords;codeWords
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496242568;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496837955;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream (optional)_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1468513830;Decode a {@link DataBuffer} input stream into a Flux of {@code T}.__@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1468532417;Decode a {@link DataBuffer} input stream into a Flux of {@code T}.__@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1469540372;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> List<MimeType> getDecodableMimeTypes()_;1468513830;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1468532417;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1469540372;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1473671281;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1473771793;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1474365351;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1475013584;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1495868221;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1496242568;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1496259743;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> List<MimeType> getDecodableMimeTypes()_;1496837955;Return the list of MIME types this decoder supports.;List<MimeType> getDecodableMimeTypes()_;return,the,list,of,mime,types,this,decoder,supports;list,mime,type,get,decodable,mime,types
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1473671281;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1473771793;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1474365351;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1475013584;Decode a {@link DataBuffer} input stream into a Flux of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with decoded elements;Flux<T> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,flux,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,decoded,elements;flux,t,decode,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;1495868221;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,nullable,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;1496242568;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,nullable,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;1496259743;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,nullable,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;1496837955;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_(can be {@code null} if not specified)_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,nullable,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType)_;1474365351;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType)_;1475013584;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode, can be {@code null} if not specified._@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,can,be,code,null,if,not,specified,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473671281;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@param hints additional information about how to do encode_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,param,hints,additional,information,about,how,to,do,encode,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;1473771793;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@param hints additional information about how to do encode_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType, Map<String, Object> hints)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,param,hints,additional,information,about,how,to,do,encode,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1468513830;Whether the decoder supports the given target element type and the MIME_type of the source stream.__@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@param hints additional information about how to do decode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,param,hints,additional,information,about,how,to,do,decode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1468532417;Whether the decoder supports the given target element type and the MIME_type of the source stream.__@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@param hints additional information about how to do decode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,param,hints,additional,information,about,how,to,do,decode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;1469540372;Whether the decoder supports the given target element type and the MIME_type of the source stream._@param elementType the target element type for the output stream_@param mimeType the mime type associated with the stream to decode_@param hints additional information about how to do decode, optional_@return {@code true} if supported, {@code false} otherwise;boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints)_;whether,the,decoder,supports,the,given,target,element,type,and,the,mime,type,of,the,source,stream,param,element,type,the,target,element,type,for,the,output,stream,param,mime,type,the,mime,type,associated,with,the,stream,to,decode,param,hints,additional,information,about,how,to,do,decode,optional,return,code,true,if,supported,code,false,otherwise;boolean,can,decode,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1468513830;Decode a {@link DataBuffer} input stream into a Mono of {@code T}.__@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1468532417;Decode a {@link DataBuffer} input stream into a Mono of {@code T}.__@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Object... hints)_;1469540372;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do decode, optional_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Object... hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,decode,optional,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1473671281;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1473771793;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1474365351;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			MimeType mimeType, Map<String, Object> hints)_;1475013584;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			MimeType mimeType, Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,mime,type,mime,type,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496242568;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496259743;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream, optional_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
Decoder -> Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType, 			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;1496837955;Decode a {@link DataBuffer} input stream into a Mono of {@code T}._@param inputStream the {@code DataBuffer} input stream to decode_@param elementType the expected type of elements in the output stream__this type must have been previously passed to the {@link #canDecode}_method and it must have returned {@code true}._@param mimeType the MIME type associated with the input stream (optional)_@param hints additional information about how to do encode_@return the output stream with the decoded element;Mono<T> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,_			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints)_;decode,a,link,data,buffer,input,stream,into,a,mono,of,code,t,param,input,stream,the,code,data,buffer,input,stream,to,decode,param,element,type,the,expected,type,of,elements,in,the,output,stream,this,type,must,have,been,previously,passed,to,the,link,can,decode,method,and,it,must,have,returned,code,true,param,mime,type,the,mime,type,associated,with,the,input,stream,optional,param,hints,additional,information,about,how,to,do,encode,return,the,output,stream,with,the,decoded,element;mono,t,decode,to,mono,publisher,data,buffer,input,stream,resolvable,type,element,type,nullable,mime,type,mime,type,nullable,map,string,object,hints
