commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;public void customize(CodeEmitter e, Type type) {     if (type.equals(Constants.TYPE_CLASS)) {         e.invoke_virtual(Constants.TYPE_CLASS, GET_NAME).     } }
false;public;3;5;;public void customize(CodeEmitter e, int index, Type type) {     if (type.equals(Constants.TYPE_CLASS)) {         e.invoke_virtual(Constants.TYPE_CLASS, GET_NAME).     } }
false;public;2;6;;public Type getOutType(int index, Type type) {     if (type.equals(Constants.TYPE_CLASS)) {         return Constants.TYPE_STRING.     }     return type. }
false;public;2;7;;public boolean customize(CodeEmitter e, Type type) {     if (Constants.TYPE_TYPE.equals(type)) {         e.invoke_virtual(type, GET_SORT).         return true.     }     return false. }
false;public;2;3;;public void customize(CodeEmitter e, Type type) {     e.invoke_virtual(Constants.TYPE_OBJECT, GET_CLASS). }
false;public,static;1;3;;public static KeyFactory create(Class keyInterface) {     return create(keyInterface, null). }
false;public,static;2;3;;public static KeyFactory create(Class keyInterface, Customizer customizer) {     return create(keyInterface.getClassLoader(), keyInterface, customizer). }
false;public,static;3;3;;public static KeyFactory create(Class keyInterface, KeyFactoryCustomizer first, List<KeyFactoryCustomizer> next) {     return create(keyInterface.getClassLoader(), keyInterface, first, next). }
false;public,static;3;3;;public static KeyFactory create(ClassLoader loader, Class keyInterface, Customizer customizer) {     return create(loader, keyInterface, customizer, Collections.<KeyFactoryCustomizer>emptyList()). }
false;public,static;4;19;;public static KeyFactory create(ClassLoader loader, Class keyInterface, KeyFactoryCustomizer customizer, List<KeyFactoryCustomizer> next) {     Generator gen = new Generator().     gen.setInterface(keyInterface).     // SPRING PATCH BEGIN     gen.setContextClass(keyInterface).     if (customizer != null) {         gen.addCustomizer(customizer).     }     if (next != null && !next.isEmpty()) {         for (KeyFactoryCustomizer keyFactoryCustomizer : next) {             gen.addCustomizer(keyFactoryCustomizer).         }     }     gen.setClassLoader(loader).     return gen.create(). }
false;protected;0;3;;protected ClassLoader getDefaultClassLoader() {     return keyInterface.getClassLoader(). }
false;protected;0;3;;protected ProtectionDomain getProtectionDomain() {     return ReflectUtils.getProtectionDomain(keyInterface). }
true;public;1;4;/**  * @deprecated Use {@link #addCustomizer(KeyFactoryCustomizer)} instead.  */ ;/**  * @deprecated Use {@link #addCustomizer(KeyFactoryCustomizer)} instead.  */ @Deprecated public void setCustomizer(Customizer customizer) {     customizers = CustomizerRegistry.singleton(customizer). }
false;public;1;3;;public void addCustomizer(KeyFactoryCustomizer customizer) {     customizers.add(customizer). }
false;public;1;3;;public <T> List<T> getCustomizers(Class<T> klass) {     return customizers.get(klass). }
false;public;1;3;;public void setInterface(Class keyInterface) {     this.keyInterface = keyInterface. }
false;public;0;4;;public KeyFactory create() {     setNamePrefix(keyInterface.getName()).     return (KeyFactory) super.create(keyInterface.getName()). }
false;public;1;3;;public void setHashConstant(int constant) {     this.constant = constant. }
false;public;1;3;;public void setHashMultiplier(int multiplier) {     this.multiplier = multiplier. }
false;protected;1;3;;protected Object firstInstance(Class type) {     return ReflectUtils.newInstance(type). }
false;protected;1;3;;protected Object nextInstance(Object instance) {     return instance. }
false;public;1;101;;public void generateClass(ClassVisitor v) {     ClassEmitter ce = new ClassEmitter(v).     Method newInstance = ReflectUtils.findNewInstance(keyInterface).     if (!newInstance.getReturnType().equals(Object.class)) {         throw new IllegalArgumentException("newInstance method must return Object").     }     Type[] parameterTypes = TypeUtils.getTypes(newInstance.getParameterTypes()).     ce.begin_class(Constants.V1_2, Constants.ACC_PUBLIC, getClassName(), KEY_FACTORY, new Type[] { Type.getType(keyInterface) }, Constants.SOURCE_FILE).     EmitUtils.null_constructor(ce).     EmitUtils.factory_method(ce, ReflectUtils.getSignature(newInstance)).     int seed = 0.     CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, TypeUtils.parseConstructor(parameterTypes), null).     e.load_this().     e.super_invoke_constructor().     e.load_this().     List<FieldTypeCustomizer> fieldTypeCustomizers = getCustomizers(FieldTypeCustomizer.class).     for (int i = 0. i < parameterTypes.length. i++) {         Type parameterType = parameterTypes[i].         Type fieldType = parameterType.         for (FieldTypeCustomizer customizer : fieldTypeCustomizers) {             fieldType = customizer.getOutType(i, fieldType).         }         seed += fieldType.hashCode().         ce.declare_field(Constants.ACC_PRIVATE | Constants.ACC_FINAL, getFieldName(i), fieldType, null).         e.dup().         e.load_arg(i).         for (FieldTypeCustomizer customizer : fieldTypeCustomizers) {             customizer.customize(e, i, parameterType).         }         e.putfield(getFieldName(i)).     }     e.return_value().     e.end_method().     // hash code     e = ce.begin_method(Constants.ACC_PUBLIC, HASH_CODE, null).     int hc = (constant != 0) ? constant : PRIMES[(Math.abs(seed) % PRIMES.length)].     int hm = (multiplier != 0) ? multiplier : PRIMES[(Math.abs(seed * 13) % PRIMES.length)].     e.push(hc).     for (int i = 0. i < parameterTypes.length. i++) {         e.load_this().         e.getfield(getFieldName(i)).         EmitUtils.hash_code(e, parameterTypes[i], hm, customizers).     }     e.return_value().     e.end_method().     // equals     e = ce.begin_method(Constants.ACC_PUBLIC, EQUALS, null).     Label fail = e.make_label().     e.load_arg(0).     e.instance_of_this().     e.if_jump(CodeEmitter.EQ, fail).     for (int i = 0. i < parameterTypes.length. i++) {         e.load_this().         e.getfield(getFieldName(i)).         e.load_arg(0).         e.checkcast_this().         e.getfield(getFieldName(i)).         EmitUtils.not_equals(e, parameterTypes[i], fail, customizers).     }     e.push(1).     e.return_value().     e.mark(fail).     e.push(0).     e.return_value().     e.end_method().     // toString     e = ce.begin_method(Constants.ACC_PUBLIC, TO_STRING, null).     e.new_instance(Constants.TYPE_STRING_BUFFER).     e.dup().     e.invoke_constructor(Constants.TYPE_STRING_BUFFER).     for (int i = 0. i < parameterTypes.length. i++) {         if (i > 0) {             e.push(", ").             e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING).         }         e.load_this().         e.getfield(getFieldName(i)).         EmitUtils.append_string(e, parameterTypes[i], EmitUtils.DEFAULT_DELIMITERS, customizers).     }     e.invoke_virtual(Constants.TYPE_STRING_BUFFER, TO_STRING).     e.return_value().     e.end_method().     ce.end_class(). }
false;private;1;3;;private String getFieldName(int arg) {     return "FIELD_" + arg. }
