commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Object.class, Collection.class)). }
false;public;2;4;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return ConversionUtils.canConvertElements(sourceType, targetType.getElementTypeDescriptor(), this.conversionService). }
false;public;3;20;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     TypeDescriptor elementDesc = targetType.getElementTypeDescriptor().     Collection<Object> target = CollectionFactory.createCollection(targetType.getType(), (elementDesc != null ? elementDesc.getType() : null), 1).     if (elementDesc == null || elementDesc.isCollection()) {         target.add(source).     } else {         Object singleElement = this.conversionService.convert(source, sourceType, elementDesc).         target.add(singleElement).     }     return target. }
