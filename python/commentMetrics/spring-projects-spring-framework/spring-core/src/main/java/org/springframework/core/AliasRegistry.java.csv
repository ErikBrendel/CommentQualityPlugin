commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Given a name, register an alias for it.  * @param name the canonical name  * @param alias the alias to be registered  * @throws IllegalStateException if the alias is already in use  * and may not be overridden  */ ;/**  * Given a name, register an alias for it.  * @param name the canonical name  * @param alias the alias to be registered  * @throws IllegalStateException if the alias is already in use  * and may not be overridden  */ void registerAlias(String name, String alias).
true;;1;1;/**  * Remove the specified alias from this registry.  * @param alias the alias to remove  * @throws IllegalStateException if no such alias was found  */ ;/**  * Remove the specified alias from this registry.  * @param alias the alias to remove  * @throws IllegalStateException if no such alias was found  */ void removeAlias(String alias).
true;;1;1;/**  * Determine whether this given name is defines as an alias  * (as opposed to the name of an actually registered component).  * @param name the name to check  * @return whether the given name is an alias  */ ;/**  * Determine whether this given name is defines as an alias  * (as opposed to the name of an actually registered component).  * @param name the name to check  * @return whether the given name is an alias  */ boolean isAlias(String name).
true;;1;1;/**  * Return the aliases for the given name, if defined.  * @param name the name to check for aliases  * @return the aliases, or an empty array if none  */ ;/**  * Return the aliases for the given name, if defined.  * @param name the name to check for aliases  * @return the aliases, or an empty array if none  */ String[] getAliases(String name).
