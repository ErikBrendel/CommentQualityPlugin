# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationAwareOrderComparator -> @Override 	@Nullable 	protected Integer findOrder(Object obj);1502974979;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;@Override_	@Nullable_	protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;override,nullable,protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> @Override 	@Nullable 	protected Integer findOrder(Object obj);1518772998;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;@Override_	@Nullable_	protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;override,nullable,protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> @Override 	@Nullable 	protected Integer findOrder(Object obj);1524001062;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;@Override_	@Nullable_	protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;override,nullable,protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1377182590;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1385412762;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1396355447;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1409784073;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1425764149;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1438262644;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1458335530;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1458754769;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1496837955;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1502974979;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1518772998;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public static void sortIfNecessary(Object value);1524001062;Sort the given array or List with a default AnnotationAwareOrderComparator,_if necessary. Simply skips sorting when given any other value._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param value the array or List to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sortIfNecessary(Object value) {_		if (value instanceof Object[]) {_			sort((Object[]) value)__		}_		else if (value instanceof List) {_			sort((List<?>) value)__		}_	};sort,the,given,array,or,list,with,a,default,annotation,aware,order,comparator,if,necessary,simply,skips,sorting,when,given,any,other,value,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,value,the,array,or,list,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,if,necessary,object,value,if,value,instanceof,object,sort,object,value,else,if,value,instanceof,list,sort,list,value
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1409784073;This implementation checks retrieves a {@link javax.annotation.Priority}_value, allowing for additional semantics over the regular {@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class) obj)__		}_		else if (obj != null) {_			return OrderUtils.getPriority(obj.getClass())__		}_		return null__	};this,implementation,checks,retrieves,a,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,else,if,obj,null,return,order,utils,get,priority,obj,get,class,return,null
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1425764149;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		else if (obj != null) {_			return OrderUtils.getPriority(obj.getClass())__		}_		return null__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,else,if,obj,null,return,order,utils,get,priority,obj,get,class,return,null
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1438262644;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		else if (obj != null) {_			return OrderUtils.getPriority(obj.getClass())__		}_		return null__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,else,if,obj,null,return,order,utils,get,priority,obj,get,class,return,null
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1458335530;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		Integer priority = null__		if (obj instanceof Class) {_			priority = OrderUtils.getPriority((Class<?>) obj)__		}_		else if (obj != null) {_			priority = OrderUtils.getPriority(obj.getClass())__			if (priority == null && obj instanceof DecoratingProxy) {_				priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,integer,priority,null,if,obj,instanceof,class,priority,order,utils,get,priority,class,obj,else,if,obj,null,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1458754769;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		Integer priority = null__		if (obj instanceof Class) {_			priority = OrderUtils.getPriority((Class<?>) obj)__		}_		else if (obj != null) {_			priority = OrderUtils.getPriority(obj.getClass())__			if (priority == null && obj instanceof DecoratingProxy) {_				priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,integer,priority,null,if,obj,instanceof,class,priority,order,utils,get,priority,class,obj,else,if,obj,null,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> public Integer getPriority(Object obj);1496837955;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		Integer priority = OrderUtils.getPriority(obj.getClass())__		if (priority == null && obj instanceof DecoratingProxy) {_			priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,integer,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1362408075;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1368720356;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1377182590;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1385412762;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1396355447;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1409784073;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1425764149;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1438262644;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1458335530;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1458754769;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1496837955;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1502974979;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1518772998;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> public static void sort(Object[] array);1524001062;Sort the given array with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param array the array to sort_@see java.util.Arrays#sort(Object[], java.util.Comparator);public static void sort(Object[] array) {_		if (array.length > 1) {_			Arrays.sort(array, INSTANCE)__		}_	};sort,the,given,array,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,array,the,array,to,sort,see,java,util,arrays,sort,object,java,util,comparator;public,static,void,sort,object,array,if,array,length,1,arrays,sort,array,instance
AnnotationAwareOrderComparator -> @Override 	@Nullable 	public Integer getPriority(Object obj);1502974979;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;@Override_	@Nullable_	public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		Integer priority = OrderUtils.getPriority(obj.getClass())__		if (priority == null && obj instanceof DecoratingProxy) {_			priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;override,nullable,public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,integer,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> @Override 	@Nullable 	public Integer getPriority(Object obj);1518772998;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;@Override_	@Nullable_	public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		Integer priority = OrderUtils.getPriority(obj.getClass())__		if (priority == null && obj instanceof DecoratingProxy) {_			priority = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;override,nullable,public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,integer,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> @Override 	@Nullable 	public Integer getPriority(Object obj);1524001062;This implementation retrieves an @{@link javax.annotation.Priority}_value, allowing for additional semantics over the regular @{@link Order}_annotation: typically, selecting one object over another in case of_multiple matches but only one object to be returned.;@Override_	@Nullable_	public Integer getPriority(Object obj) {_		if (obj instanceof Class) {_			return OrderUtils.getPriority((Class<?>) obj)__		}_		Integer priority = OrderUtils.getPriority(obj.getClass())__		if (priority == null && obj instanceof DecoratingProxy) {_			priority = OrderUtils.getPriority(((DecoratingProxy) obj).getDecoratedClass())__		}_		return priority__	};this,implementation,retrieves,an,link,javax,annotation,priority,value,allowing,for,additional,semantics,over,the,regular,link,order,annotation,typically,selecting,one,object,over,another,in,case,of,multiple,matches,but,only,one,object,to,be,returned;override,nullable,public,integer,get,priority,object,obj,if,obj,instanceof,class,return,order,utils,get,priority,class,obj,integer,priority,order,utils,get,priority,obj,get,class,if,priority,null,obj,instanceof,decorating,proxy,priority,order,utils,get,priority,decorating,proxy,obj,get,decorated,class,return,priority
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1409784073;This implementation checks for the {@link Order} annotation_on various kinds of elements, in addition to the_{@link org.springframework.core.Ordered} check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj != null) {_			return OrderUtils.getOrder(obj.getClass())__		}__		return null__	};this,implementation,checks,for,the,link,order,annotation,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,if,obj,null,return,order,utils,get,order,obj,get,class,return,null
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1425764149;This implementation checks for the {@link Order} annotation_on various kinds of elements, in addition to the_{@link org.springframework.core.Ordered} check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj != null) {_			return OrderUtils.getOrder(obj.getClass())__		}__		return null__	};this,implementation,checks,for,the,link,order,annotation,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,if,obj,null,return,order,utils,get,order,obj,get,class,return,null
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1438262644;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj != null) {_			return OrderUtils.getOrder(obj.getClass())__		}__		return null__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,if,obj,null,return,order,utils,get,order,obj,get,class,return,null
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1458335530;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj != null) {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,if,obj,null,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1458754769;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj != null) {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,if,obj,null,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> protected Integer findOrder(Object obj);1496837955;This implementation checks for {@link Order @Order} or_{@link javax.annotation.Priority @Priority} on various kinds of_elements, in addition to the {@link org.springframework.core.Ordered}_check in the superclass.;protected Integer findOrder(Object obj) {_		_		Integer order = super.findOrder(obj)__		if (order != null) {_			return order__		}__		_		if (obj instanceof Class) {_			return OrderUtils.getOrder((Class<?>) obj)__		}_		else if (obj instanceof Method) {_			Order ann = AnnotationUtils.findAnnotation((Method) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else if (obj instanceof AnnotatedElement) {_			Order ann = AnnotationUtils.getAnnotation((AnnotatedElement) obj, Order.class)__			if (ann != null) {_				return ann.value()__			}_		}_		else {_			order = OrderUtils.getOrder(obj.getClass())__			if (order == null && obj instanceof DecoratingProxy) {_				order = OrderUtils.getOrder(((DecoratingProxy) obj).getDecoratedClass())__			}_		}__		return order__	};this,implementation,checks,for,link,order,order,or,link,javax,annotation,priority,priority,on,various,kinds,of,elements,in,addition,to,the,link,org,springframework,core,ordered,check,in,the,superclass;protected,integer,find,order,object,obj,integer,order,super,find,order,obj,if,order,null,return,order,if,obj,instanceof,class,return,order,utils,get,order,class,obj,else,if,obj,instanceof,method,order,ann,annotation,utils,find,annotation,method,obj,order,class,if,ann,null,return,ann,value,else,if,obj,instanceof,annotated,element,order,ann,annotation,utils,get,annotation,annotated,element,obj,order,class,if,ann,null,return,ann,value,else,order,order,utils,get,order,obj,get,class,if,order,null,obj,instanceof,decorating,proxy,order,order,utils,get,order,decorating,proxy,obj,get,decorated,class,return,order
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1362408075;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1368720356;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1377182590;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1385412762;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1396355447;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1409784073;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1425764149;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1438262644;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1458335530;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1458754769;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1496837955;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1502974979;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.Collections#sort(java.util.List, java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			Collections.sort(list, INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,collections,sort,java,util,list,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,collections,sort,list,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1518772998;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.List#sort(java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			list.sort(INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,list,sort,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,list,sort,instance
AnnotationAwareOrderComparator -> public static void sort(List<?> list);1524001062;Sort the given List with a default AnnotationAwareOrderComparator._<p>Optimized to skip sorting for lists with size 0 or 1,_in order to avoid unnecessary array extraction._@param list the List to sort_@see java.util.List#sort(java.util.Comparator);public static void sort(List<?> list) {_		if (list.size() > 1) {_			list.sort(INSTANCE)__		}_	};sort,the,given,list,with,a,default,annotation,aware,order,comparator,p,optimized,to,skip,sorting,for,lists,with,size,0,or,1,in,order,to,avoid,unnecessary,array,extraction,param,list,the,list,to,sort,see,java,util,list,sort,java,util,comparator;public,static,void,sort,list,list,if,list,size,1,list,sort,instance
