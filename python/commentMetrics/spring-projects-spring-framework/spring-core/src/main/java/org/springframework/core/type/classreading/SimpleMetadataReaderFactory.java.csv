commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the ResourceLoader that this MetadataReaderFactory has been  * constructed with.  */ ;/**  * Return the ResourceLoader that this MetadataReaderFactory has been  * constructed with.  */ public final ResourceLoader getResourceLoader() {     return this.resourceLoader. }
false;public;1;25;;@Override public MetadataReader getMetadataReader(String className) throws IOException {     try {         String resourcePath = ResourceLoader.CLASSPATH_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX.         Resource resource = this.resourceLoader.getResource(resourcePath).         return getMetadataReader(resource).     } catch (FileNotFoundException ex) {         // Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here...         // ClassUtils.forName has an equivalent check for resolution into Class references later on.         int lastDotIndex = className.lastIndexOf('.').         if (lastDotIndex != -1) {             String innerClassName = className.substring(0, lastDotIndex) + '$' + className.substring(lastDotIndex + 1).             String innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX.             Resource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath).             if (innerClassResource.exists()) {                 return getMetadataReader(innerClassResource).             }         }         throw ex.     } }
false;public;1;4;;@Override public MetadataReader getMetadataReader(Resource resource) throws IOException {     return new SimpleMetadataReader(resource, this.resourceLoader.getClassLoader()). }
