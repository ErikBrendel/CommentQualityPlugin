commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(String.class, Collection.class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return (targetType.getElementTypeDescriptor() == null || this.conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor())). }
false;public;3;26;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     String string = (String) source.     String[] fields = StringUtils.commaDelimitedListToStringArray(string).     TypeDescriptor elementDesc = targetType.getElementTypeDescriptor().     Collection<Object> target = CollectionFactory.createCollection(targetType.getType(), (elementDesc != null ? elementDesc.getType() : null), fields.length).     if (elementDesc == null) {         for (String field : fields) {             target.add(field.trim()).         }     } else {         for (String field : fields) {             Object targetElement = this.conversionService.convert(field.trim(), sourceType, elementDesc).             target.add(targetElement).         }     }     return target. }
