# id;timestamp;commentText;codeText;commentWords;codeWords
ReactiveAdapter -> public Class<?> getReactiveType();1480355002;A shortcut for {@code getDescriptor().getReactiveType()}.;public Class<?> getReactiveType() {_		return getDescriptor().getReactiveType()__	};a,shortcut,for,code,get,descriptor,get,reactive,type;public,class,get,reactive,type,return,get,descriptor,get,reactive,type
ReactiveAdapter -> public Class<?> getReactiveType();1490114687;A shortcut for {@code getDescriptor().getReactiveType()}.;public Class<?> getReactiveType() {_		return getDescriptor().getReactiveType()__	};a,shortcut,for,code,get,descriptor,get,reactive,type;public,class,get,reactive,type,return,get,descriptor,get,reactive,type
ReactiveAdapter -> public Class<?> getReactiveType();1495569915;A shortcut for {@code getDescriptor().getReactiveType()}.;public Class<?> getReactiveType() {_		return getDescriptor().getReactiveType()__	};a,shortcut,for,code,get,descriptor,get,reactive,type;public,class,get,reactive,type,return,get,descriptor,get,reactive,type
ReactiveAdapter -> public Class<?> getReactiveType();1496837955;A shortcut for {@code getDescriptor().getReactiveType()}.;public Class<?> getReactiveType() {_		return getDescriptor().getReactiveType()__	};a,shortcut,for,code,get,descriptor,get,reactive,type;public,class,get,reactive,type,return,get,descriptor,get,reactive,type
ReactiveAdapter -> public Class<?> getReactiveType();1526693566;Shortcut for {@code getDescriptor().getReactiveType()}.;public Class<?> getReactiveType() {_		return getDescriptor().getReactiveType()__	};shortcut,for,code,get,descriptor,get,reactive,type;public,class,get,reactive,type,return,get,descriptor,get,reactive,type
ReactiveAdapter -> public boolean supportsEmpty();1480355002;A shortcut for {@code getDescriptor().supportsEmpty()}.;public boolean supportsEmpty() {_		return getDescriptor().supportsEmpty()__	};a,shortcut,for,code,get,descriptor,supports,empty;public,boolean,supports,empty,return,get,descriptor,supports,empty
ReactiveAdapter -> public boolean supportsEmpty();1490114687;A shortcut for {@code getDescriptor().supportsEmpty()}.;public boolean supportsEmpty() {_		return getDescriptor().supportsEmpty()__	};a,shortcut,for,code,get,descriptor,supports,empty;public,boolean,supports,empty,return,get,descriptor,supports,empty
ReactiveAdapter -> public boolean supportsEmpty();1495569915;A shortcut for {@code getDescriptor().supportsEmpty()}.;public boolean supportsEmpty() {_		return getDescriptor().supportsEmpty()__	};a,shortcut,for,code,get,descriptor,supports,empty;public,boolean,supports,empty,return,get,descriptor,supports,empty
ReactiveAdapter -> public boolean supportsEmpty();1496837955;A shortcut for {@code getDescriptor().supportsEmpty()}.;public boolean supportsEmpty() {_		return getDescriptor().supportsEmpty()__	};a,shortcut,for,code,get,descriptor,supports,empty;public,boolean,supports,empty,return,get,descriptor,supports,empty
ReactiveAdapter -> public boolean supportsEmpty();1526693566;Shortcut for {@code getDescriptor().supportsEmpty()}.;public boolean supportsEmpty() {_		return getDescriptor().supportsEmpty()__	};shortcut,for,code,get,descriptor,supports,empty;public,boolean,supports,empty,return,get,descriptor,supports,empty
ReactiveAdapter -> <T> Mono<T> toMono(Object source)_;1469204488;Adapt the given Object to a {@link Mono}_@param source the source object to adapt_@return the resulting {@link Mono} possibly empty;<T> Mono<T> toMono(Object source)_;adapt,the,given,object,to,a,link,mono,param,source,the,source,object,to,adapt,return,the,resulting,link,mono,possibly,empty;t,mono,t,to,mono,object,source
ReactiveAdapter -> <T> Mono<T> toMono(Object source)_;1469219300;Adapt the given Object to a {@link Mono}_@param source the source object to adapt_@return the resulting {@link Mono} possibly empty;<T> Mono<T> toMono(Object source)_;adapt,the,given,object,to,a,link,mono,param,source,the,source,object,to,adapt,return,the,resulting,link,mono,possibly,empty;t,mono,t,to,mono,object,source
ReactiveAdapter -> <T> Publisher<T> toPublisher(Object source)_;1469204488;Adapt the given Object to a Publisher._@param source the source object to adapt_@return the resulting {@link Mono} or {@link Flux} possibly empty;<T> Publisher<T> toPublisher(Object source)_;adapt,the,given,object,to,a,publisher,param,source,the,source,object,to,adapt,return,the,resulting,link,mono,or,link,flux,possibly,empty;t,publisher,t,to,publisher,object,source
ReactiveAdapter -> <T> Publisher<T> toPublisher(Object source)_;1469219300;Adapt the given Object to a Publisher._@param source the source object to adapt_@return the resulting {@link Mono} or {@link Flux} possibly empty;<T> Publisher<T> toPublisher(Object source)_;adapt,the,given,object,to,a,publisher,param,source,the,source,object,to,adapt,return,the,resulting,link,mono,or,link,flux,possibly,empty;t,publisher,t,to,publisher,object,source
ReactiveAdapter -> public boolean isNoValue();1480355002;A shortcut for {@code getDescriptor().isNoValue()}.;public boolean isNoValue() {_		return getDescriptor().isNoValue()__	};a,shortcut,for,code,get,descriptor,is,no,value;public,boolean,is,no,value,return,get,descriptor,is,no,value
ReactiveAdapter -> public boolean isNoValue();1490114687;A shortcut for {@code getDescriptor().isNoValue()}.;public boolean isNoValue() {_		return getDescriptor().isNoValue()__	};a,shortcut,for,code,get,descriptor,is,no,value;public,boolean,is,no,value,return,get,descriptor,is,no,value
ReactiveAdapter -> public boolean isNoValue();1495569915;A shortcut for {@code getDescriptor().isNoValue()}.;public boolean isNoValue() {_		return getDescriptor().isNoValue()__	};a,shortcut,for,code,get,descriptor,is,no,value;public,boolean,is,no,value,return,get,descriptor,is,no,value
ReactiveAdapter -> public boolean isNoValue();1496837955;A shortcut for {@code getDescriptor().isNoValue()}.;public boolean isNoValue() {_		return getDescriptor().isNoValue()__	};a,shortcut,for,code,get,descriptor,is,no,value;public,boolean,is,no,value,return,get,descriptor,is,no,value
ReactiveAdapter -> public boolean isNoValue();1526693566;Shortcut for {@code getDescriptor().isNoValue()}.;public boolean isNoValue() {_		return getDescriptor().isNoValue()__	};shortcut,for,code,get,descriptor,is,no,value;public,boolean,is,no,value,return,get,descriptor,is,no,value
ReactiveAdapter -> Descriptor getDescriptor()_;1469204488;Return a descriptor with further information about the adaptee.;Descriptor getDescriptor()_;return,a,descriptor,with,further,information,about,the,adaptee;descriptor,get,descriptor
ReactiveAdapter -> Descriptor getDescriptor()_;1469219300;Return a descriptor with further information about the adaptee.;Descriptor getDescriptor()_;return,a,descriptor,with,further,information,about,the,adaptee;descriptor,get,descriptor
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1480301091;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return (publisher != null ? this.fromPublisherFunction.apply(publisher) : null)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,publisher,null,this,from,publisher,function,apply,publisher,null
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1480355002;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return (publisher != null ? this.fromPublisherFunction.apply(publisher) : null)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,publisher,null,this,from,publisher,function,apply,publisher,null
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1490114687;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return (publisher != null ? this.fromPublisherFunction.apply(publisher) : null)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,publisher,null,this,from,publisher,function,apply,publisher,null
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1495569915;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return (publisher != null ? this.fromPublisherFunction.apply(publisher) : null)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,publisher,null,this,from,publisher,function,apply,publisher,null
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1496837955;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return this.fromPublisherFunction.apply(publisher)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,this,from,publisher,function,apply,publisher
ReactiveAdapter -> public Object fromPublisher(Publisher<?> publisher);1526693566;Adapt from the given Reactive Streams Publisher._@param publisher the publisher to adapt from_@return the reactive type instance representing the adapted publisher;public Object fromPublisher(Publisher<?> publisher) {_		return this.fromPublisherFunction.apply(publisher)__	};adapt,from,the,given,reactive,streams,publisher,param,publisher,the,publisher,to,adapt,from,return,the,reactive,type,instance,representing,the,adapted,publisher;public,object,from,publisher,publisher,publisher,return,this,from,publisher,function,apply,publisher
ReactiveAdapter -> Descriptor -> public boolean supportsEmpty();1469204488;Return {@code true} if the adaptee can complete without values.;public boolean supportsEmpty() {_			return this.supportsEmpty__		};return,code,true,if,the,adaptee,can,complete,without,values;public,boolean,supports,empty,return,this,supports,empty
ReactiveAdapter -> Descriptor -> public boolean supportsEmpty();1469219300;Return {@code true} if the adaptee can complete without values.;public boolean supportsEmpty() {_			return this.supportsEmpty__		};return,code,true,if,the,adaptee,can,complete,without,values;public,boolean,supports,empty,return,this,supports,empty
ReactiveAdapter -> Descriptor -> public boolean isNoValue();1469204488;Return {@code true} if the adaptee implies no values will be produced,_i.e. providing only completion or error signal.;public boolean isNoValue() {_			return this.isNoValue__		};return,code,true,if,the,adaptee,implies,no,values,will,be,produced,i,e,providing,only,completion,or,error,signal;public,boolean,is,no,value,return,this,is,no,value
ReactiveAdapter -> Descriptor -> public boolean isNoValue();1469219300;Return {@code true} if the adaptee implies no values will be produced,_i.e. providing only completion or error signal.;public boolean isNoValue() {_			return this.isNoValue__		};return,code,true,if,the,adaptee,implies,no,values,will,be,produced,i,e,providing,only,completion,or,error,signal;public,boolean,is,no,value,return,this,is,no,value
ReactiveAdapter -> Object fromPublisher(Publisher<?> publisher)_;1469204488;Adapt the given Publisher to the target adaptee._@param publisher the publisher to adapt_@return the resulting adaptee;Object fromPublisher(Publisher<?> publisher)_;adapt,the,given,publisher,to,the,target,adaptee,param,publisher,the,publisher,to,adapt,return,the,resulting,adaptee;object,from,publisher,publisher,publisher
ReactiveAdapter -> Object fromPublisher(Publisher<?> publisher)_;1469219300;Adapt the given Publisher to the target adaptee._@param publisher the publisher to adapt_@return the resulting adaptee;Object fromPublisher(Publisher<?> publisher)_;adapt,the,given,publisher,to,the,target,adaptee,param,publisher,the,publisher,to,adapt,return,the,resulting,adaptee;object,from,publisher,publisher,publisher
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(Object source);1480301091;Adapt the given instance to a Reactive Streams Publisher._@param source the source object to adapt from_@return the Publisher repesenting the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(Object source) {_		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,publisher,param,source,the,source,object,to,adapt,from,return,the,publisher,repesenting,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,object,source,source,source,instanceof,optional,optional,source,or,else,null,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(Object source);1480355002;Adapt the given instance to a Reactive Streams Publisher._@param source the source object to adapt from_@return the Publisher repesenting the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(Object source) {_		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,publisher,param,source,the,source,object,to,adapt,from,return,the,publisher,repesenting,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,object,source,source,source,instanceof,optional,optional,source,or,else,null,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(Object source);1490114687;Adapt the given instance to a Reactive Streams Publisher._@param source the source object to adapt from_@return the Publisher representing the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(Object source) {_		source = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source)__		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,publisher,param,source,the,source,object,to,adapt,from,return,the,publisher,representing,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,object,source,source,source,instanceof,optional,optional,source,or,else,null,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(Object source);1495569915;Adapt the given instance to a Reactive Streams Publisher._@param source the source object to adapt from_@return the Publisher representing the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(Object source) {_		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,publisher,param,source,the,source,object,to,adapt,from,return,the,publisher,representing,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,object,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(@Nullable Object source);1496837955;Adapt the given instance to a Reactive Streams Publisher._@param source the source object to adapt from_@return the Publisher representing the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(@Nullable Object source) {_		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,publisher,param,source,the,source,object,to,adapt,from,return,the,publisher,representing,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,nullable,object,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> @SuppressWarnings("unchecked") 	public <T> Publisher<T> toPublisher(@Nullable Object source);1526693566;Adapt the given instance to a Reactive Streams {@code Publisher}._@param source the source object to adapt from_ if the given object is_{@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used._@return the Publisher representing the adaptation;@SuppressWarnings("unchecked")_	public <T> Publisher<T> toPublisher(@Nullable Object source) {_		if (source == null) {_			source = getDescriptor().getEmptyValue()__		}_		return (Publisher<T>) this.toPublisherFunction.apply(source)__	};adapt,the,given,instance,to,a,reactive,streams,code,publisher,param,source,the,source,object,to,adapt,from,if,the,given,object,is,code,null,link,reactive,type,descriptor,get,empty,value,is,used,return,the,publisher,representing,the,adaptation;suppress,warnings,unchecked,public,t,publisher,t,to,publisher,nullable,object,source,if,source,null,source,get,descriptor,get,empty,value,return,publisher,t,this,to,publisher,function,apply,source
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1480301091;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1480355002;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1490114687;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1495569915;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1496837955;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public ReactiveAdapter(ReactiveTypeDescriptor descriptor, 			Function<Object, Publisher<?>> toPublisherFunction, 			Function<Publisher<?>, Object> fromPublisherFunction);1526693566;Constructor for an adapter with functions to convert the target reactive_or async type to and from a Reactive Streams Publisher._@param descriptor the reactive type descriptor_@param toPublisherFunction adapter to a Publisher_@param fromPublisherFunction adapter from a Publisher;public ReactiveAdapter(ReactiveTypeDescriptor descriptor,_			Function<Object, Publisher<?>> toPublisherFunction,_			Function<Publisher<?>, Object> fromPublisherFunction) {__		Assert.notNull(descriptor, "'descriptor' is required")__		Assert.notNull(toPublisherFunction, "'toPublisherFunction' is required")__		Assert.notNull(fromPublisherFunction, "'fromPublisherFunction' is required")___		this.descriptor = descriptor__		this.toPublisherFunction = toPublisherFunction__		this.fromPublisherFunction = fromPublisherFunction__	};constructor,for,an,adapter,with,functions,to,convert,the,target,reactive,or,async,type,to,and,from,a,reactive,streams,publisher,param,descriptor,the,reactive,type,descriptor,param,to,publisher,function,adapter,to,a,publisher,param,from,publisher,function,adapter,from,a,publisher;public,reactive,adapter,reactive,type,descriptor,descriptor,function,object,publisher,to,publisher,function,function,publisher,object,from,publisher,function,assert,not,null,descriptor,descriptor,is,required,assert,not,null,to,publisher,function,to,publisher,function,is,required,assert,not,null,from,publisher,function,from,publisher,function,is,required,this,descriptor,descriptor,this,to,publisher,function,to,publisher,function,this,from,publisher,function,from,publisher,function
ReactiveAdapter -> public boolean isMultiValue();1480355002;A shortcut for {@code getDescriptor().isMultiValue()}.;public boolean isMultiValue() {_		return getDescriptor().isMultiValue()__	};a,shortcut,for,code,get,descriptor,is,multi,value;public,boolean,is,multi,value,return,get,descriptor,is,multi,value
ReactiveAdapter -> public boolean isMultiValue();1490114687;A shortcut for {@code getDescriptor().isMultiValue()}.;public boolean isMultiValue() {_		return getDescriptor().isMultiValue()__	};a,shortcut,for,code,get,descriptor,is,multi,value;public,boolean,is,multi,value,return,get,descriptor,is,multi,value
ReactiveAdapter -> public boolean isMultiValue();1495569915;A shortcut for {@code getDescriptor().isMultiValue()}.;public boolean isMultiValue() {_		return getDescriptor().isMultiValue()__	};a,shortcut,for,code,get,descriptor,is,multi,value;public,boolean,is,multi,value,return,get,descriptor,is,multi,value
ReactiveAdapter -> public boolean isMultiValue();1496837955;A shortcut for {@code getDescriptor().isMultiValue()}.;public boolean isMultiValue() {_		return getDescriptor().isMultiValue()__	};a,shortcut,for,code,get,descriptor,is,multi,value;public,boolean,is,multi,value,return,get,descriptor,is,multi,value
ReactiveAdapter -> public boolean isMultiValue();1526693566;Shortcut for {@code getDescriptor().isMultiValue()}.;public boolean isMultiValue() {_		return getDescriptor().isMultiValue()__	};shortcut,for,code,get,descriptor,is,multi,value;public,boolean,is,multi,value,return,get,descriptor,is,multi,value
ReactiveAdapter -> <T> Flux<T> toFlux(Object source)_;1469204488;Adapt the given Object to a {@link Flux}._@param source the source object to adapt_@return the resulting {@link Flux} possibly empty;<T> Flux<T> toFlux(Object source)_;adapt,the,given,object,to,a,link,flux,param,source,the,source,object,to,adapt,return,the,resulting,link,flux,possibly,empty;t,flux,t,to,flux,object,source
ReactiveAdapter -> <T> Flux<T> toFlux(Object source)_;1469219300;Adapt the given Object to a {@link Flux}._@param source the source object to adapt_@return the resulting {@link Flux} possibly empty;<T> Flux<T> toFlux(Object source)_;adapt,the,given,object,to,a,link,flux,param,source,the,source,object,to,adapt,return,the,resulting,link,flux,possibly,empty;t,flux,t,to,flux,object,source
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1480301091;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1480355002;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1490114687;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1495569915;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1496837955;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> public ReactiveTypeDescriptor getDescriptor();1526693566;Return the descriptor of the reactive type for the adapter.;public ReactiveTypeDescriptor getDescriptor() {_		return this.descriptor__	};return,the,descriptor,of,the,reactive,type,for,the,adapter;public,reactive,type,descriptor,get,descriptor,return,this,descriptor
ReactiveAdapter -> Descriptor -> public boolean isMultiValue();1469204488;Return {@code true} if the adaptee implies 0..N values can be produced_and is therefore a good fit to adapt to {@link Flux}. A {@code false}_return value implies the adaptee will produce 1 value at most and is_therefore a good fit for {@link Mono}.;public boolean isMultiValue() {_			return this.isMultiValue__		};return,code,true,if,the,adaptee,implies,0,n,values,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,link,flux,a,code,false,return,value,implies,the,adaptee,will,produce,1,value,at,most,and,is,therefore,a,good,fit,for,link,mono;public,boolean,is,multi,value,return,this,is,multi,value
ReactiveAdapter -> Descriptor -> public boolean isMultiValue();1469219300;Return {@code true} if the adaptee implies 0..N values can be produced_and is therefore a good fit to adapt to {@link Flux}. A {@code false}_return value implies the adaptee will produce 1 value at most and is_therefore a good fit for {@link Mono}.;public boolean isMultiValue() {_			return this.isMultiValue__		};return,code,true,if,the,adaptee,implies,0,n,values,can,be,produced,and,is,therefore,a,good,fit,to,adapt,to,link,flux,a,code,false,return,value,implies,the,adaptee,will,produce,1,value,at,most,and,is,therefore,a,good,fit,for,link,mono;public,boolean,is,multi,value,return,this,is,multi,value
