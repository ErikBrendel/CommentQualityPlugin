commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the descriptor of the reactive type for the adapter.  */ ;/**  * Return the descriptor of the reactive type for the adapter.  */ public ReactiveTypeDescriptor getDescriptor() {     return this.descriptor. }
true;public;0;3;/**  * Shortcut for {@code getDescriptor().getReactiveType()}.  */ ;/**  * Shortcut for {@code getDescriptor().getReactiveType()}.  */ public Class<?> getReactiveType() {     return getDescriptor().getReactiveType(). }
true;public;0;3;/**  * Shortcut for {@code getDescriptor().isMultiValue()}.  */ ;/**  * Shortcut for {@code getDescriptor().isMultiValue()}.  */ public boolean isMultiValue() {     return getDescriptor().isMultiValue(). }
true;public;0;3;/**  * Shortcut for {@code getDescriptor().supportsEmpty()}.  */ ;/**  * Shortcut for {@code getDescriptor().supportsEmpty()}.  */ public boolean supportsEmpty() {     return getDescriptor().supportsEmpty(). }
true;public;0;3;/**  * Shortcut for {@code getDescriptor().isNoValue()}.  */ ;/**  * Shortcut for {@code getDescriptor().isNoValue()}.  */ public boolean isNoValue() {     return getDescriptor().isNoValue(). }
true;public;1;7;/**  * Adapt the given instance to a Reactive Streams {@code Publisher}.  * @param source the source object to adapt from. if the given object is  * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used.  * @return the Publisher representing the adaptation  */ ;/**  * Adapt the given instance to a Reactive Streams {@code Publisher}.  * @param source the source object to adapt from. if the given object is  * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used.  * @return the Publisher representing the adaptation  */ @SuppressWarnings("unchecked") public <T> Publisher<T> toPublisher(@Nullable Object source) {     if (source == null) {         source = getDescriptor().getEmptyValue().     }     return (Publisher<T>) this.toPublisherFunction.apply(source). }
true;public;1;3;/**  * Adapt from the given Reactive Streams Publisher.  * @param publisher the publisher to adapt from  * @return the reactive type instance representing the adapted publisher  */ ;/**  * Adapt from the given Reactive Streams Publisher.  * @param publisher the publisher to adapt from  * @return the reactive type instance representing the adapted publisher  */ public Object fromPublisher(Publisher<?> publisher) {     return this.fromPublisherFunction.apply(publisher). }
