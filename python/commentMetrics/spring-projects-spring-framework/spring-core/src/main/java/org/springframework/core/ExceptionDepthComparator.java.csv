# id;timestamp;commentText;codeText;commentWords;codeWords
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1328020251;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1356735495;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1357119239;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1368482696;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1385412762;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1432125256;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1467730834;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Throwable exception);1518772998;Create a new ExceptionDepthComparator for the given exception._@param exception the target exception to compare to when sorting by depth;public ExceptionDepthComparator(Throwable exception) {_		Assert.notNull(exception, "Target exception must not be null")__		this.targetException = exception.getClass()__	};create,a,new,exception,depth,comparator,for,the,given,exception,param,exception,the,target,exception,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,throwable,exception,assert,not,null,exception,target,exception,must,not,be,null,this,target,exception,exception,get,class
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1328020251;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1356735495;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1357119239;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1368482696;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1385412762;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1432125256;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1467730834;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public ExceptionDepthComparator(Class<? extends Throwable> exceptionType);1518772998;Create a new ExceptionDepthComparator for the given exception type._@param exceptionType the target exception type to compare to when sorting by depth;public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {_		Assert.notNull(exceptionType, "Target exception type must not be null")__		this.targetException = exceptionType__	};create,a,new,exception,depth,comparator,for,the,given,exception,type,param,exception,type,the,target,exception,type,to,compare,to,when,sorting,by,depth;public,exception,depth,comparator,class,extends,throwable,exception,type,assert,not,null,exception,type,target,exception,type,must,not,be,null,this,target,exception,exception,type
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1328020251;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1356735495;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1357119239;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1368482696;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1385412762;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1432125256;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<Class<? extends Throwable>>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,class,extends,throwable,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1467730834;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions =_				new ArrayList<>(exceptionTypes)__		Collections.sort(handledExceptions, new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,exception,types,collections,sort,handled,exceptions,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
ExceptionDepthComparator -> public static Class<? extends Throwable> findClosestMatch( 			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException);1518772998;Obtain the closest match from the given exception types for the given target exception._@param exceptionTypes the collection of exception types_@param targetException the target exception to find a match for_@return the closest matching exception type from the given collection;public static Class<? extends Throwable> findClosestMatch(_			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {__		Assert.notEmpty(exceptionTypes, "Exception types must not be empty")__		if (exceptionTypes.size() == 1) {_			return exceptionTypes.iterator().next()__		}_		List<Class<? extends Throwable>> handledExceptions = new ArrayList<>(exceptionTypes)__		handledExceptions.sort(new ExceptionDepthComparator(targetException))__		return handledExceptions.get(0)__	};obtain,the,closest,match,from,the,given,exception,types,for,the,given,target,exception,param,exception,types,the,collection,of,exception,types,param,target,exception,the,target,exception,to,find,a,match,for,return,the,closest,matching,exception,type,from,the,given,collection;public,static,class,extends,throwable,find,closest,match,collection,class,extends,throwable,exception,types,throwable,target,exception,assert,not,empty,exception,types,exception,types,must,not,be,empty,if,exception,types,size,1,return,exception,types,iterator,next,list,class,extends,throwable,handled,exceptions,new,array,list,exception,types,handled,exceptions,sort,new,exception,depth,comparator,target,exception,return,handled,exceptions,get,0
