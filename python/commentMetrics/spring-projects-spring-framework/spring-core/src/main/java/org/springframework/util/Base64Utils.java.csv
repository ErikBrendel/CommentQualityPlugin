commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;6;/**  * Base64-encode the given byte array.  * @param src the original byte array  * @return the encoded byte array  */ ;/**  * Base64-encode the given byte array.  * @param src the original byte array  * @return the encoded byte array  */ public static byte[] encode(byte[] src) {     if (src.length == 0) {         return src.     }     return Base64.getEncoder().encode(src). }
true;public,static;1;6;/**  * Base64-decode the given byte array.  * @param src the encoded byte array  * @return the original byte array  */ ;/**  * Base64-decode the given byte array.  * @param src the encoded byte array  * @return the original byte array  */ public static byte[] decode(byte[] src) {     if (src.length == 0) {         return src.     }     return Base64.getDecoder().decode(src). }
true;public,static;1;6;/**  * Base64-encode the given byte array using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the original byte array  * @return the encoded byte array  * @since 4.2.4  */ ;/**  * Base64-encode the given byte array using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the original byte array  * @return the encoded byte array  * @since 4.2.4  */ public static byte[] encodeUrlSafe(byte[] src) {     if (src.length == 0) {         return src.     }     return Base64.getUrlEncoder().encode(src). }
true;public,static;1;6;/**  * Base64-decode the given byte array using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the encoded byte array  * @return the original byte array  * @since 4.2.4  */ ;/**  * Base64-decode the given byte array using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the encoded byte array  * @return the original byte array  * @since 4.2.4  */ public static byte[] decodeUrlSafe(byte[] src) {     if (src.length == 0) {         return src.     }     return Base64.getUrlDecoder().decode(src). }
true;public,static;1;6;/**  * Base64-encode the given byte array to a String.  * @param src the original byte array (may be {@code null})  * @return the encoded byte array as a UTF-8 String  */ ;/**  * Base64-encode the given byte array to a String.  * @param src the original byte array (may be {@code null})  * @return the encoded byte array as a UTF-8 String  */ public static String encodeToString(byte[] src) {     if (src.length == 0) {         return "".     }     return new String(encode(src), DEFAULT_CHARSET). }
true;public,static;1;6;/**  * Base64-decode the given byte array from an UTF-8 String.  * @param src the encoded UTF-8 String  * @return the original byte array  */ ;/**  * Base64-decode the given byte array from an UTF-8 String.  * @param src the encoded UTF-8 String  * @return the original byte array  */ public static byte[] decodeFromString(String src) {     if (src.isEmpty()) {         return new byte[0].     }     return decode(src.getBytes(DEFAULT_CHARSET)). }
true;public,static;1;3;/**  * Base64-encode the given byte array to a String using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the original byte array  * @return the encoded byte array as a UTF-8 String  */ ;/**  * Base64-encode the given byte array to a String using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the original byte array  * @return the encoded byte array as a UTF-8 String  */ public static String encodeToUrlSafeString(byte[] src) {     return new String(encodeUrlSafe(src), DEFAULT_CHARSET). }
true;public,static;1;3;/**  * Base64-decode the given byte array from an UTF-8 String using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the encoded UTF-8 String  * @return the original byte array  */ ;/**  * Base64-decode the given byte array from an UTF-8 String using the RFC 4648  * "URL and Filename Safe Alphabet".  * @param src the encoded UTF-8 String  * @return the original byte array  */ public static byte[] decodeFromUrlSafeString(String src) {     return decodeUrlSafe(src.getBytes(DEFAULT_CHARSET)). }
