commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the name of the underlying class.  */ ;/**  * Return the name of the underlying class.  */ String getClassName().
true;;0;1;/**  * Return whether the underlying class represents an interface.  */ ;/**  * Return whether the underlying class represents an interface.  */ boolean isInterface().
true;;0;1;/**  * Return whether the underlying class represents an annotation.  * @since 4.1  */ ;/**  * Return whether the underlying class represents an annotation.  * @since 4.1  */ boolean isAnnotation().
true;;0;1;/**  * Return whether the underlying class is marked as abstract.  */ ;/**  * Return whether the underlying class is marked as abstract.  */ boolean isAbstract().
true;;0;1;/**  * Return whether the underlying class represents a concrete class,  * i.e. neither an interface nor an abstract class.  */ ;/**  * Return whether the underlying class represents a concrete class,  * i.e. neither an interface nor an abstract class.  */ boolean isConcrete().
true;;0;1;/**  * Return whether the underlying class is marked as 'final'.  */ ;/**  * Return whether the underlying class is marked as 'final'.  */ boolean isFinal().
true;;0;1;/**  * Determine whether the underlying class is independent, i.e. whether  * it is a top-level class or a nested class (static inner class) that  * can be constructed independently from an enclosing class.  */ ;/**  * Determine whether the underlying class is independent, i.e. whether  * it is a top-level class or a nested class (static inner class) that  * can be constructed independently from an enclosing class.  */ boolean isIndependent().
true;;0;1;/**  * Return whether the underlying class is declared within an enclosing  * class (i.e. the underlying class is an inner/nested class or a  * local class within a method).  * <p>If this method returns {@code false}, then the underlying  * class is a top-level class.  */ ;/**  * Return whether the underlying class is declared within an enclosing  * class (i.e. the underlying class is an inner/nested class or a  * local class within a method).  * <p>If this method returns {@code false}, then the underlying  * class is a top-level class.  */ boolean hasEnclosingClass().
true;;0;2;/**  * Return the name of the enclosing class of the underlying class,  * or {@code null} if the underlying class is a top-level class.  */ ;/**  * Return the name of the enclosing class of the underlying class,  * or {@code null} if the underlying class is a top-level class.  */ @Nullable String getEnclosingClassName().
true;;0;1;/**  * Return whether the underlying class has a super class.  */ ;/**  * Return whether the underlying class has a super class.  */ boolean hasSuperClass().
true;;0;2;/**  * Return the name of the super class of the underlying class,  * or {@code null} if there is no super class defined.  */ ;/**  * Return the name of the super class of the underlying class,  * or {@code null} if there is no super class defined.  */ @Nullable String getSuperClassName().
true;;0;1;/**  * Return the names of all interfaces that the underlying class  * implements, or an empty array if there are none.  */ ;/**  * Return the names of all interfaces that the underlying class  * implements, or an empty array if there are none.  */ String[] getInterfaceNames().
true;;0;1;/**  * Return the names of all classes declared as members of the class represented by  * this ClassMetadata object. This includes public, protected, default (package)  * access, and private classes and interfaces declared by the class, but excludes  * inherited classes and interfaces. An empty array is returned if no member classes  * or interfaces exist.  * @since 3.1  */ ;/**  * Return the names of all classes declared as members of the class represented by  * this ClassMetadata object. This includes public, protected, default (package)  * access, and private classes and interfaces declared by the class, but excludes  * inherited classes and interfaces. An empty array is returned if no member classes  * or interfaces exist.  * @since 3.1  */ String[] getMemberClassNames().
