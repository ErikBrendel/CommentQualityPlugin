# id;timestamp;commentText;codeText;commentWords;codeWords
UrlResource -> @Override 	public URL getURL();1509912089;This implementation returns the underlying URL reference.;@Override_	public URL getURL() {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,return,this,url
UrlResource -> @Override 	public URL getURL();1530190293;This implementation returns the underlying URL reference.;@Override_	public URL getURL() {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,return,this,url
UrlResource -> @Override 	public URL getURL();1534939959;This implementation returns the underlying URL reference.;@Override_	public URL getURL() {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1328020251;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1329393628;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1356735495;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1357119239;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1368216700;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1368482696;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1425069697;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1468947211;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1469049917;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1491480442;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1491481620;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1496837955;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public URL getURL() throws IOException;1498780456;This implementation returns the underlying URL reference.;@Override_	public URL getURL() throws IOException {_		return this.url__	};this,implementation,returns,the,underlying,url,reference;override,public,url,get,url,throws,ioexception,return,this,url
UrlResource -> @Override 	public boolean equals(Object other);1530190293;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof UrlResource &&_				this.cleanedUrl.equals(((UrlResource) other).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,url,resource,this,cleaned,url,equals,url,resource,other,cleaned,url
UrlResource -> @Override 	public boolean equals(Object other);1534939959;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object other) {_		return (this == other || (other instanceof UrlResource &&_				this.cleanedUrl.equals(((UrlResource) other).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,other,return,this,other,other,instanceof,url,resource,this,cleaned,url,equals,url,resource,other,cleaned,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1328020251;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1329393628;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1356735495;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1357119239;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1368216700;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1368482696;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1425069697;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1468947211;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1469049917;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1491480442;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1491481620;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1496837955;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1498780456;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1509912089;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1530190293;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		try {_			return new URL(StringUtils.cleanPath(originalPath))__		}_		catch (MalformedURLException ex) {_			_			_			return originalUrl__		}_	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,try,return,new,url,string,utils,clean,path,original,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> private URL getCleanedUrl(URL originalUrl, String originalPath);1534939959;Determine a cleaned URL for the given original URL._@param originalUrl the original URL_@param originalPath the original URL path_@return the cleaned URL (possibly the original URL as-is)_@see org.springframework.util.StringUtils#cleanPath;private URL getCleanedUrl(URL originalUrl, String originalPath) {_		String cleanedPath = StringUtils.cleanPath(originalPath)__		if (!cleanedPath.equals(originalPath)) {_			try {_				return new URL(cleanedPath)__			}_			catch (MalformedURLException ex) {_				_			}_		}_		return originalUrl__	};determine,a,cleaned,url,for,the,given,original,url,param,original,url,the,original,url,param,original,path,the,original,url,path,return,the,cleaned,url,possibly,the,original,url,as,is,see,org,springframework,util,string,utils,clean,path;private,url,get,cleaned,url,url,original,url,string,original,path,string,cleaned,path,string,utils,clean,path,original,path,if,cleaned,path,equals,original,path,try,return,new,url,cleaned,path,catch,malformed,urlexception,ex,return,original,url
UrlResource -> @Override 	public URI getURI() throws IOException;1328020251;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1329393628;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1356735495;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1357119239;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1368216700;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1368482696;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1425069697;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1468947211;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1469049917;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1491480442;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1491481620;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1496837955;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1498780456;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1509912089;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1530190293;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public URI getURI() throws IOException;1534939959;This implementation returns the underlying URI directly,_if possible.;@Override_	public URI getURI() throws IOException {_		if (this.uri != null) {_			return this.uri__		}_		else {_			return super.getURI()__		}_	};this,implementation,returns,the,underlying,uri,directly,if,possible;override,public,uri,get,uri,throws,ioexception,if,this,uri,null,return,this,uri,else,return,super,get,uri
UrlResource -> @Override 	public String getDescription();1356735495;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1368482696;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1425069697;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1468947211;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1469049917;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1491480442;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1491481620;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1496837955;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1498780456;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1509912089;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1530190293;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> @Override 	public String getDescription();1534939959;This implementation returns a description that includes the URL.;@Override_	public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;override,public,string,get,description,return,url,this,url
UrlResource -> public UrlResource(String path) throws MalformedURLException;1328020251;Create a new UrlResource._@param path a URL path_@throws MalformedURLException if the given URL path is not valid;public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__		this.uri = null__	};create,a,new,url,resource,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path,this,uri,null
UrlResource -> public UrlResource(String path) throws MalformedURLException;1329393628;Create a new UrlResource._@param path a URL path_@throws MalformedURLException if the given URL path is not valid;public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__		this.uri = null__	};create,a,new,url,resource,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path,this,uri,null
UrlResource -> public UrlResource(String path) throws MalformedURLException;1356735495;Create a new UrlResource._@param path a URL path_@throws MalformedURLException if the given URL path is not valid;public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__		this.uri = null__	};create,a,new,url,resource,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path,this,uri,null
UrlResource -> public UrlResource(String path) throws MalformedURLException;1357119239;Create a new UrlResource._@param path a URL path_@throws MalformedURLException if the given URL path is not valid;public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__		this.uri = null__	};create,a,new,url,resource,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path,this,uri,null
UrlResource -> public UrlResource(String path) throws MalformedURLException;1368216700;Create a new UrlResource based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1368482696;Create a new UrlResource based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1425069697;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1468947211;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1469049917;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1491480442;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1491481620;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1496837955;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1498780456;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1509912089;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1530190293;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> public UrlResource(String path) throws MalformedURLException;1534939959;Create a new {@code UrlResource} based on a URL path._<p>Note: The given path needs to be pre-encoded if necessary._@param path a URL path_@throws MalformedURLException if the given URL path is not valid_@see java.net.URL#URL(String);public UrlResource(String path) throws MalformedURLException {_		Assert.notNull(path, "Path must not be null")__		this.uri = null__		this.url = new URL(path)__		this.cleanedUrl = getCleanedUrl(this.url, path)__	};create,a,new,code,url,resource,based,on,a,url,path,p,note,the,given,path,needs,to,be,pre,encoded,if,necessary,param,path,a,url,path,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,see,java,net,url,url,string;public,url,resource,string,path,throws,malformed,urlexception,assert,not,null,path,path,must,not,be,null,this,uri,null,this,url,new,url,path,this,cleaned,url,get,cleaned,url,this,url,path
UrlResource -> @Override 	public File getFile() throws IOException;1328020251;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1329393628;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1356735495;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1357119239;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1368216700;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1368482696;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1425069697;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1468947211;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1469049917;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1491480442;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1491481620;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1496837955;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1498780456;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1509912089;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1530190293;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> @Override 	public File getFile() throws IOException;1534939959;This implementation returns a File reference for the underlying URL/URI,_provided that it refers to a file in the file system._@see org.springframework.util.ResourceUtils#getFile(java.net.URL, String);@Override_	public File getFile() throws IOException {_		if (this.uri != null) {_			return super.getFile(this.uri)__		}_		else {_			return super.getFile()__		}_	};this,implementation,returns,a,file,reference,for,the,underlying,url,uri,provided,that,it,refers,to,a,file,in,the,file,system,see,org,springframework,util,resource,utils,get,file,java,net,url,string;override,public,file,get,file,throws,ioexception,if,this,uri,null,return,super,get,file,this,uri,else,return,super,get,file
UrlResource -> public String getDescription();1328020251;This implementation returns a description that includes the URL.;public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;public,string,get,description,return,url,this,url
UrlResource -> public String getDescription();1329393628;This implementation returns a description that includes the URL.;public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;public,string,get,description,return,url,this,url
UrlResource -> public String getDescription();1357119239;This implementation returns a description that includes the URL.;public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;public,string,get,description,return,url,this,url
UrlResource -> public String getDescription();1368216700;This implementation returns a description that includes the URL.;public String getDescription() {_		return "URL [" + this.url + "]"__	};this,implementation,returns,a,description,that,includes,the,url;public,string,get,description,return,url,this,url
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1328020251;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1329393628;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1356735495;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1357119239;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1368216700;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1368482696;This implementation creates a UrlResource, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1425069697;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1468947211;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1469049917;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1491480442;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1491481620;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1496837955;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1498780456;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1509912089;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1530190293;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> @Override 	public Resource createRelative(String relativePath) throws MalformedURLException;1534939959;This implementation creates a {@code UrlResource}, applying the given path_relative to the path of the underlying URL of this resource descriptor._@see java.net.URL#URL(java.net.URL, String);@Override_	public Resource createRelative(String relativePath) throws MalformedURLException {_		if (relativePath.startsWith("/")) {_			relativePath = relativePath.substring(1)__		}_		return new UrlResource(new URL(this.url, relativePath))__	};this,implementation,creates,a,code,url,resource,applying,the,given,path,relative,to,the,path,of,the,underlying,url,of,this,resource,descriptor,see,java,net,url,url,java,net,url,string;override,public,resource,create,relative,string,relative,path,throws,malformed,urlexception,if,relative,path,starts,with,relative,path,relative,path,substring,1,return,new,url,resource,new,url,this,url,relative,path
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1368216700;Create a new UrlResource based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1368482696;Create a new UrlResource based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1425069697;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1468947211;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1469049917;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1491480442;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1491481620;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1496837955;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1498780456;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1509912089;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1530190293;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(String protocol, String location) throws MalformedURLException;1534939959;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location) throws MalformedURLException  {_		this(protocol, location, null)__	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,throws,malformed,urlexception,this,protocol,location,null
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1328020251;Create a new UrlResource._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__		this.uri = uri__	};create,a,new,url,resource,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string,this,uri,uri
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1329393628;Create a new UrlResource._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__		this.uri = uri__	};create,a,new,url,resource,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string,this,uri,uri
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1356735495;Create a new UrlResource._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__		this.uri = uri__	};create,a,new,url,resource,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string,this,uri,uri
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1357119239;Create a new UrlResource._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__		this.uri = uri__	};create,a,new,url,resource,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string,this,uri,uri
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1368216700;Create a new UrlResource based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1368482696;Create a new UrlResource based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1425069697;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1468947211;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1469049917;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1491480442;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1491481620;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1496837955;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1498780456;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1509912089;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1530190293;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> public UrlResource(URI uri) throws MalformedURLException;1534939959;Create a new {@code UrlResource} based on the given URI object._@param uri a URI_@throws MalformedURLException if the given URL path is not valid_@since 2.5;public UrlResource(URI uri) throws MalformedURLException {_		Assert.notNull(uri, "URI must not be null")__		this.uri = uri__		this.url = uri.toURL()__		this.cleanedUrl = getCleanedUrl(this.url, uri.toString())__	};create,a,new,code,url,resource,based,on,the,given,uri,object,param,uri,a,uri,throws,malformed,urlexception,if,the,given,url,path,is,not,valid,since,2,5;public,url,resource,uri,uri,throws,malformed,urlexception,assert,not,null,uri,uri,must,not,be,null,this,uri,uri,this,url,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,uri,to,string
UrlResource -> @Override 	public String getFilename();1328020251;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1329393628;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1356735495;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1357119239;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1368216700;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1368482696;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1425069697;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1468947211;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1469049917;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getFile()_@see java.io.File#getName();@Override_	public String getFilename() {_		return new File(this.url.getFile()).getName()__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,file,see,java,io,file,get,name;override,public,string,get,filename,return,new,file,this,url,get,file,get,name
UrlResource -> @Override 	public String getFilename();1491480442;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.url.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,url,get,path
UrlResource -> @Override 	public String getFilename();1491481620;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public String getFilename();1496837955;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public String getFilename();1498780456;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public String getFilename();1509912089;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public String getFilename();1530190293;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public String getFilename();1534939959;This implementation returns the name of the file that this URL refers to._@see java.net.URL#getPath();@Override_	public String getFilename() {_		return StringUtils.getFilename(this.cleanedUrl.getPath())__	};this,implementation,returns,the,name,of,the,file,that,this,url,refers,to,see,java,net,url,get,path;override,public,string,get,filename,return,string,utils,get,filename,this,cleaned,url,get,path
UrlResource -> @Override 	public int hashCode();1328020251;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1329393628;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1356735495;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1357119239;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1368216700;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1368482696;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1425069697;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1468947211;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1469049917;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1491480442;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1491481620;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1496837955;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1498780456;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1509912089;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1530190293;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> @Override 	public int hashCode();1534939959;This implementation returns the hash code of the underlying URL reference.;@Override_	public int hashCode() {_		return this.cleanedUrl.hashCode()__	};this,implementation,returns,the,hash,code,of,the,underlying,url,reference;override,public,int,hash,code,return,this,cleaned,url,hash,code
UrlResource -> public InputStream getInputStream() throws IOException;1328020251;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to <code>false</code>,_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		con.setUseCaches(false)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,code,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,con,set,use,caches,false,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> public InputStream getInputStream() throws IOException;1329393628;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to <code>false</code>,_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,code,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> public InputStream getInputStream() throws IOException;1357119239;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> public InputStream getInputStream() throws IOException;1368216700;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1356735495;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1368482696;This implementation opens an InputStream for the given URL._It sets the "UseCaches" flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,it,sets,the,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1425069697;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1468947211;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1469049917;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1491480442;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1491481620;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1496837955;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1498780456;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1509912089;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1530190293;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> @Override 	public InputStream getInputStream() throws IOException;1534939959;This implementation opens an InputStream for the given URL._<p>It sets the {@code useCaches} flag to {@code false},_mainly to avoid jar file locking on Windows._@see java.net.URL#openConnection()_@see java.net.URLConnection#setUseCaches(boolean)_@see java.net.URLConnection#getInputStream();@Override_	public InputStream getInputStream() throws IOException {_		URLConnection con = this.url.openConnection()__		ResourceUtils.useCachesIfNecessary(con)__		try {_			return con.getInputStream()__		}_		catch (IOException ex) {_			_			if (con instanceof HttpURLConnection) {_				((HttpURLConnection) con).disconnect()__			}_			throw ex__		}_	};this,implementation,opens,an,input,stream,for,the,given,url,p,it,sets,the,code,use,caches,flag,to,code,false,mainly,to,avoid,jar,file,locking,on,windows,see,java,net,url,open,connection,see,java,net,urlconnection,set,use,caches,boolean,see,java,net,urlconnection,get,input,stream;override,public,input,stream,get,input,stream,throws,ioexception,urlconnection,con,this,url,open,connection,resource,utils,use,caches,if,necessary,con,try,return,con,get,input,stream,catch,ioexception,ex,if,con,instanceof,http,urlconnection,http,urlconnection,con,disconnect,throw,ex
UrlResource -> public UrlResource(URL url);1328020251;Create a new UrlResource._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1329393628;Create a new UrlResource._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1356735495;Create a new UrlResource._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1357119239;Create a new UrlResource._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1368216700;Create a new UrlResource based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1368482696;Create a new UrlResource based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1425069697;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1468947211;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1469049917;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1491480442;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1491481620;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1496837955;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1498780456;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1509912089;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1530190293;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> public UrlResource(URL url);1534939959;Create a new {@code UrlResource} based on the given URL object._@param url a URL;public UrlResource(URL url) {_		Assert.notNull(url, "URL must not be null")__		this.url = url__		this.cleanedUrl = getCleanedUrl(this.url, url.toString())__		this.uri = null__	};create,a,new,code,url,resource,based,on,the,given,url,object,param,url,a,url;public,url,resource,url,url,assert,not,null,url,url,must,not,be,null,this,url,url,this,cleaned,url,get,cleaned,url,this,url,url,to,string,this,uri,null
UrlResource -> @Override 	public boolean equals(Object obj);1328020251;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1329393628;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_		    (obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1356735495;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1357119239;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1368216700;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1368482696;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1425069697;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1468947211;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1469049917;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1491480442;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1491481620;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1496837955;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1498780456;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> @Override 	public boolean equals(Object obj);1509912089;This implementation compares the underlying URL references.;@Override_	public boolean equals(Object obj) {_		return (obj == this ||_			(obj instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) obj).cleanedUrl)))__	};this,implementation,compares,the,underlying,url,references;override,public,boolean,equals,object,obj,return,obj,this,obj,instanceof,url,resource,this,cleaned,url,equals,url,resource,obj,cleaned,url
UrlResource -> public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException;1496837955;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,nullable,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException;1498780456;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,nullable,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException;1509912089;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,nullable,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException;1530190293;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,nullable,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException;1534939959;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,nullable,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1368216700;Create a new UrlResource based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1368482696;Create a new UrlResource based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1425069697;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1468947211;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1469049917;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1491480442;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
UrlResource -> public UrlResource(String protocol, String location, String fragment) throws MalformedURLException;1491481620;Create a new {@code UrlResource} based on a URI specification._<p>The given parts will automatically get encoded if necessary._@param protocol the URL protocol to use (e.g. "jar" or "file" - without colon)__also known as "scheme"_@param location the location (e.g. the file path within that protocol)__also known as "scheme-specific part"_@param fragment the fragment within that location (e.g. anchor on an HTML page,_as following after a "#" separator)_@throws MalformedURLException if the given URL specification is not valid_@see java.net.URI#URI(String, String, String);public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {_		try {_			this.uri = new URI(protocol, location, fragment)__			this.url = this.uri.toURL()__			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString())__		}_		catch (URISyntaxException ex) {_			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage())__			exToThrow.initCause(ex)__			throw exToThrow__		}_	};create,a,new,code,url,resource,based,on,a,uri,specification,p,the,given,parts,will,automatically,get,encoded,if,necessary,param,protocol,the,url,protocol,to,use,e,g,jar,or,file,without,colon,also,known,as,scheme,param,location,the,location,e,g,the,file,path,within,that,protocol,also,known,as,scheme,specific,part,param,fragment,the,fragment,within,that,location,e,g,anchor,on,an,html,page,as,following,after,a,separator,throws,malformed,urlexception,if,the,given,url,specification,is,not,valid,see,java,net,uri,uri,string,string,string;public,url,resource,string,protocol,string,location,string,fragment,throws,malformed,urlexception,try,this,uri,new,uri,protocol,location,fragment,this,url,this,uri,to,url,this,cleaned,url,get,cleaned,url,this,url,this,uri,to,string,catch,urisyntax,exception,ex,malformed,urlexception,ex,to,throw,new,malformed,urlexception,ex,get,message,ex,to,throw,init,cause,ex,throw,ex,to,throw
