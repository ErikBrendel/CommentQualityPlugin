commented;modifiers;parameterAmount;loc;comment;code
true;private;2;12;/**  * Determine a cleaned URL for the given original URL.  * @param originalUrl the original URL  * @param originalPath the original URL path  * @return the cleaned URL (possibly the original URL as-is)  * @see org.springframework.util.StringUtils#cleanPath  */ ;/**  * Determine a cleaned URL for the given original URL.  * @param originalUrl the original URL  * @param originalPath the original URL path  * @return the cleaned URL (possibly the original URL as-is)  * @see org.springframework.util.StringUtils#cleanPath  */ private URL getCleanedUrl(URL originalUrl, String originalPath) {     String cleanedPath = StringUtils.cleanPath(originalPath).     if (!cleanedPath.equals(originalPath)) {         try {             return new URL(cleanedPath).         } catch (MalformedURLException ex) {         // Cleaned URL path cannot be converted to URL -> take original URL.         }     }     return originalUrl. }
true;public;0;15;/**  * This implementation opens an InputStream for the given URL.  * <p>It sets the {@code useCaches} flag to {@code false},  * mainly to avoid jar file locking on Windows.  * @see java.net.URL#openConnection()  * @see java.net.URLConnection#setUseCaches(boolean)  * @see java.net.URLConnection#getInputStream()  */ ;/**  * This implementation opens an InputStream for the given URL.  * <p>It sets the {@code useCaches} flag to {@code false},  * mainly to avoid jar file locking on Windows.  * @see java.net.URL#openConnection()  * @see java.net.URLConnection#setUseCaches(boolean)  * @see java.net.URLConnection#getInputStream()  */ @Override public InputStream getInputStream() throws IOException {     URLConnection con = this.url.openConnection().     ResourceUtils.useCachesIfNecessary(con).     try {         return con.getInputStream().     } catch (IOException ex) {         // Close the HTTP connection (if applicable).         if (con instanceof HttpURLConnection) {             ((HttpURLConnection) con).disconnect().         }         throw ex.     } }
true;public;0;4;/**  * This implementation returns the underlying URL reference.  */ ;/**  * This implementation returns the underlying URL reference.  */ @Override public URL getURL() {     return this.url. }
true;public;0;9;/**  * This implementation returns the underlying URI directly,  * if possible.  */ ;/**  * This implementation returns the underlying URI directly,  * if possible.  */ @Override public URI getURI() throws IOException {     if (this.uri != null) {         return this.uri.     } else {         return super.getURI().     } }
false;public;0;9;;@Override public boolean isFile() {     if (this.uri != null) {         return super.isFile(this.uri).     } else {         return super.isFile().     } }
true;public;0;9;/**  * This implementation returns a File reference for the underlying URL/URI,  * provided that it refers to a file in the file system.  * @see org.springframework.util.ResourceUtils#getFile(java.net.URL, String)  */ ;/**  * This implementation returns a File reference for the underlying URL/URI,  * provided that it refers to a file in the file system.  * @see org.springframework.util.ResourceUtils#getFile(java.net.URL, String)  */ @Override public File getFile() throws IOException {     if (this.uri != null) {         return super.getFile(this.uri).     } else {         return super.getFile().     } }
true;public;1;7;/**  * This implementation creates a {@code UrlResource}, applying the given path  * relative to the path of the underlying URL of this resource descriptor.  * @see java.net.URL#URL(java.net.URL, String)  */ ;/**  * This implementation creates a {@code UrlResource}, applying the given path  * relative to the path of the underlying URL of this resource descriptor.  * @see java.net.URL#URL(java.net.URL, String)  */ @Override public Resource createRelative(String relativePath) throws MalformedURLException {     if (relativePath.startsWith("/")) {         relativePath = relativePath.substring(1).     }     return new UrlResource(new URL(this.url, relativePath)). }
true;public;0;4;/**  * This implementation returns the name of the file that this URL refers to.  * @see java.net.URL#getPath()  */ ;/**  * This implementation returns the name of the file that this URL refers to.  * @see java.net.URL#getPath()  */ @Override public String getFilename() {     return StringUtils.getFilename(this.cleanedUrl.getPath()). }
true;public;0;4;/**  * This implementation returns a description that includes the URL.  */ ;/**  * This implementation returns a description that includes the URL.  */ @Override public String getDescription() {     return "URL [" + this.url + "]". }
true;public;1;5;/**  * This implementation compares the underlying URL references.  */ ;/**  * This implementation compares the underlying URL references.  */ @Override public boolean equals(Object other) {     return (this == other || (other instanceof UrlResource && this.cleanedUrl.equals(((UrlResource) other).cleanedUrl))). }
true;public;0;4;/**  * This implementation returns the hash code of the underlying URL reference.  */ ;/**  * This implementation returns the hash code of the underlying URL reference.  */ @Override public int hashCode() {     return this.cleanedUrl.hashCode(). }
