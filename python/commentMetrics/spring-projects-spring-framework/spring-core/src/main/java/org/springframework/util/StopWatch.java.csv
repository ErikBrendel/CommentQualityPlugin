# id;timestamp;commentText;codeText;commentWords;codeWords
StopWatch -> public StopWatch(String id);1328020251;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1356735495;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1405696918;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1443187419;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1443381471;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1467730834;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1468307434;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1495868221;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1498780456;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1519295386;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> public StopWatch(String id);1530174524;Construct a new stop watch with the given id._Does not start any task._@param id identifier for this stop watch._Handy when we have output from multiple stop watches_and need to distinguish between them.;public StopWatch(String id) {_		this.id = id__	};construct,a,new,stop,watch,with,the,given,id,does,not,start,any,task,param,id,identifier,for,this,stop,watch,handy,when,we,have,output,from,multiple,stop,watches,and,need,to,distinguish,between,them;public,stop,watch,string,id,this,id,id
StopWatch -> @Override 	public String toString();1328020251;Return an informative string describing all tasks performed_For custom reporting, call <code>getTaskInfo()</code> and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		} else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,code,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1356735495;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		} else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1405696918;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1443187419;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1443381471;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1467730834;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1468307434;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1495868221;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1498780456;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1519295386;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> @Override 	public String toString();1530174524;Return an informative string describing all tasks performed_For custom reporting, call {@code getTaskInfo()} and use the task info directly.;@Override_	public String toString() {_		StringBuilder sb = new StringBuilder(shortSummary())__		if (this.keepTaskList) {_			for (TaskInfo task : getTaskInfo()) {_				sb.append("_ [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis())__				long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds())__				sb.append(" = ").append(percent).append("%")__			}_		}_		else {_			sb.append("_ no task info kept")__		}_		return sb.toString()__	};return,an,informative,string,describing,all,tasks,performed,for,custom,reporting,call,code,get,task,info,and,use,the,task,info,directly;override,public,string,to,string,string,builder,sb,new,string,builder,short,summary,if,this,keep,task,list,for,task,info,task,get,task,info,sb,append,append,task,get,task,name,append,took,append,task,get,time,millis,long,percent,math,round,100,0,task,get,time,seconds,get,total,time,seconds,sb,append,append,percent,append,else,sb,append,no,task,info,kept,return,sb,to,string
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1328020251;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1356735495;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1405696918;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1443187419;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1443381471;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1467730834;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1468307434;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1495868221;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1498780456;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1519295386;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public long getLastTaskTimeMillis() throws IllegalStateException;1530174524;Return the time taken by the last task.;public long getLastTaskTimeMillis() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task interval")__		}_		return this.lastTaskInfo.getTimeMillis()__	};return,the,time,taken,by,the,last,task;public,long,get,last,task,time,millis,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,interval,return,this,last,task,info,get,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1328020251;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.startTimeMillis = System.currentTimeMillis()__		this.running = true__		this.currentTaskName = taskName__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,start,time,millis,system,current,time,millis,this,running,true,this,current,task,name,task,name
StopWatch -> public void start(String taskName) throws IllegalStateException;1356735495;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.startTimeMillis = System.currentTimeMillis()__		this.running = true__		this.currentTaskName = taskName__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,start,time,millis,system,current,time,millis,this,running,true,this,current,task,name,task,name
StopWatch -> public void start(String taskName) throws IllegalStateException;1405696918;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.startTimeMillis = System.currentTimeMillis()__		this.running = true__		this.currentTaskName = taskName__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,start,time,millis,system,current,time,millis,this,running,true,this,current,task,name,task,name
StopWatch -> public void start(String taskName) throws IllegalStateException;1443187419;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.running = true__		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,running,true,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1443381471;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.running = true__		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,running,true,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1467730834;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.running = true__		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,running,true,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1468307434;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.running = true__		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,running,true,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1495868221;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.running) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.running = true__		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,running,true,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1498780456;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.currentTaskName != null) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1519295386;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.currentTaskName != null) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public void start(String taskName) throws IllegalStateException;1530174524;Start a named task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@param taskName the name of the task to start_@see #stop();public void start(String taskName) throws IllegalStateException {_		if (this.currentTaskName != null) {_			throw new IllegalStateException("Can't start StopWatch: it's already running")__		}_		this.currentTaskName = taskName__		this.startTimeMillis = System.currentTimeMillis()__	};start,a,named,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,param,task,name,the,name,of,the,task,to,start,see,stop;public,void,start,string,task,name,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,start,stop,watch,it,s,already,running,this,current,task,name,task,name,this,start,time,millis,system,current,time,millis
StopWatch -> public StopWatch();1328020251;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this.id = ""__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this,id
StopWatch -> public StopWatch();1356735495;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this.id = ""__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this,id
StopWatch -> public StopWatch();1405696918;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this.id = ""__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this,id
StopWatch -> public StopWatch();1443187419;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this.id = ""__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this,id
StopWatch -> public StopWatch();1443381471;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1467730834;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1468307434;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1495868221;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1498780456;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1519295386;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public StopWatch();1530174524;Construct a new stop watch. Does not start any task.;public StopWatch() {_		this("")__	};construct,a,new,stop,watch,does,not,start,any,task;public,stop,watch,this
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1328020251;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1356735495;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1405696918;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1443187419;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1443381471;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1467730834;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1468307434;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1495868221;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1498780456;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1519295386;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> public void setKeepTaskList(boolean keepTaskList);1530174524;Determine whether the TaskInfo array is built over time. Set this to_"false" when using a StopWatch for millions of intervals, or the task_info structure will consume excessive memory. Default is "true".;public void setKeepTaskList(boolean keepTaskList) {_		this.keepTaskList = keepTaskList__	};determine,whether,the,task,info,array,is,built,over,time,set,this,to,false,when,using,a,stop,watch,for,millions,of,intervals,or,the,task,info,structure,will,consume,excessive,memory,default,is,true;public,void,set,keep,task,list,boolean,keep,task,list,this,keep,task,list,keep,task,list
StopWatch -> @Nullable 	public String currentTaskName();1495868221;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();@Nullable_	public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;nullable,public,string,current,task,name,return,this,current,task,name
StopWatch -> @Nullable 	public String currentTaskName();1498780456;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();@Nullable_	public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;nullable,public,string,current,task,name,return,this,current,task,name
StopWatch -> @Nullable 	public String currentTaskName();1519295386;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();@Nullable_	public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;nullable,public,string,current,task,name,return,this,current,task,name
StopWatch -> @Nullable 	public String currentTaskName();1530174524;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();@Nullable_	public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;nullable,public,string,current,task,name,return,this,current,task,name
StopWatch -> public String shortSummary();1328020251;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + this.id + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,this,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1356735495;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + this.id + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,this,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1405696918;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + this.id + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,this,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1443187419;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1443381471;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1467730834;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1468307434;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1495868221;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1498780456;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1519295386;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> public String shortSummary();1530174524;Return a short description of the total running time.;public String shortSummary() {_		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis()__	};return,a,short,description,of,the,total,running,time;public,string,short,summary,return,stop,watch,get,id,running,time,millis,get,total,time,millis
StopWatch -> TaskInfo -> public String getTaskName();1328020251;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1356735495;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1405696918;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1443187419;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1443381471;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1467730834;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1468307434;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1495868221;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1498780456;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1519295386;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> TaskInfo -> public String getTaskName();1530174524;Return the name of this task.;public String getTaskName() {_			return this.taskName__		};return,the,name,of,this,task;public,string,get,task,name,return,this,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1328020251;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1356735495;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1405696918;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1443187419;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1443381471;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1467730834;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1468307434;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1495868221;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1498780456;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1519295386;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String getLastTaskName() throws IllegalStateException;1530174524;Return the name of the last task.;public String getLastTaskName() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task name")__		}_		return this.lastTaskInfo.getTaskName()__	};return,the,name,of,the,last,task;public,string,get,last,task,name,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,name,return,this,last,task,info,get,task,name
StopWatch -> public String prettyPrint();1328020251;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		} else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1356735495;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		} else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1405696918;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1443187419;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1443381471;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1467730834;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1468307434;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1495868221;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1498780456;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1519295386;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public String prettyPrint();1530174524;Return a string with a table describing all tasks performed._For custom reporting, call getTaskInfo() and use the task info directly.;public String prettyPrint() {_		StringBuilder sb = new StringBuilder(shortSummary())__		sb.append('\n')__		if (!this.keepTaskList) {_			sb.append("No task info kept")__		}_		else {_			sb.append("-----------------------------------------\n")__			sb.append("ms     %     Task name\n")__			sb.append("-----------------------------------------\n")__			NumberFormat nf = NumberFormat.getNumberInstance()__			nf.setMinimumIntegerDigits(5)__			nf.setGroupingUsed(false)__			NumberFormat pf = NumberFormat.getPercentInstance()__			pf.setMinimumIntegerDigits(3)__			pf.setGroupingUsed(false)__			for (TaskInfo task : getTaskInfo()) {_				sb.append(nf.format(task.getTimeMillis())).append("  ")__				sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ")__				sb.append(task.getTaskName()).append("\n")__			}_		}_		return sb.toString()__	};return,a,string,with,a,table,describing,all,tasks,performed,for,custom,reporting,call,get,task,info,and,use,the,task,info,directly;public,string,pretty,print,string,builder,sb,new,string,builder,short,summary,sb,append,n,if,this,keep,task,list,sb,append,no,task,info,kept,else,sb,append,n,sb,append,ms,task,name,n,sb,append,n,number,format,nf,number,format,get,number,instance,nf,set,minimum,integer,digits,5,nf,set,grouping,used,false,number,format,pf,number,format,get,percent,instance,pf,set,minimum,integer,digits,3,pf,set,grouping,used,false,for,task,info,task,get,task,info,sb,append,nf,format,task,get,time,millis,append,sb,append,pf,format,task,get,time,seconds,get,total,time,seconds,append,sb,append,task,get,task,name,append,n,return,sb,to,string
StopWatch -> public void start() throws IllegalStateException;1328020251;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1356735495;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1405696918;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1443187419;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1443381471;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1467730834;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1468307434;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1495868221;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1498780456;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1519295386;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public void start() throws IllegalStateException;1530174524;Start an unnamed task. The results are undefined if {@link #stop()}_or timing methods are called without invoking this method._@see #stop();public void start() throws IllegalStateException {_		start("")__	};start,an,unnamed,task,the,results,are,undefined,if,link,stop,or,timing,methods,are,called,without,invoking,this,method,see,stop;public,void,start,throws,illegal,state,exception,start
StopWatch -> public boolean isRunning();1328020251;Return whether the stop watch is currently running.;public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1356735495;Return whether the stop watch is currently running.;public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1405696918;Return whether the stop watch is currently running.;public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1443187419;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1443381471;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1467730834;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1468307434;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1495868221;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return this.running__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,running
StopWatch -> public boolean isRunning();1498780456;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return (this.currentTaskName != null)__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,current,task,name,null
StopWatch -> public boolean isRunning();1519295386;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return (this.currentTaskName != null)__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,current,task,name,null
StopWatch -> public boolean isRunning();1530174524;Return whether the stop watch is currently running._@see #currentTaskName();public boolean isRunning() {_		return (this.currentTaskName != null)__	};return,whether,the,stop,watch,is,currently,running,see,current,task,name;public,boolean,is,running,return,this,current,task,name,null
StopWatch -> public long getTotalTimeMillis();1328020251;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1356735495;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1405696918;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1443187419;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1443381471;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1467730834;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1468307434;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1495868221;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1498780456;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1519295386;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public long getTotalTimeMillis();1530174524;Return the total time in milliseconds for all tasks.;public long getTotalTimeMillis() {_		return this.totalTimeMillis__	};return,the,total,time,in,milliseconds,for,all,tasks;public,long,get,total,time,millis,return,this,total,time,millis
StopWatch -> public void stop() throws IllegalStateException;1328020251;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@link #start()} / {@link #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,link,start,link,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1356735495;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@link #start()} / {@link #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,link,start,link,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1405696918;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@link #start()} / {@link #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,link,start,link,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1443187419;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code #start()} / {@code #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1443381471;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code #start()} / {@code #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1467730834;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code #start()} / {@code #stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1468307434;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code start()} / {@code stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1495868221;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code start()} / {@code stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (!this.running) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(lastTaskInfo)__		}_		++this.taskCount__		this.running = false__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,running,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,last,task,info,this,task,count,this,running,false,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1498780456;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code start()} / {@code stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (this.currentTaskName == null) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(this.lastTaskInfo)__		}_		++this.taskCount__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,this,last,task,info,this,task,count,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1519295386;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code start()} / {@code stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (this.currentTaskName == null) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(this.lastTaskInfo)__		}_		++this.taskCount__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,this,last,task,info,this,task,count,this,current,task,name,null
StopWatch -> public void stop() throws IllegalStateException;1530174524;Stop the current task. The results are undefined if timing_methods are called without invoking at least one pair_{@code start()} / {@code stop()} methods._@see #start();public void stop() throws IllegalStateException {_		if (this.currentTaskName == null) {_			throw new IllegalStateException("Can't stop StopWatch: it's not running")__		}_		long lastTime = System.currentTimeMillis() - this.startTimeMillis__		this.totalTimeMillis += lastTime__		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime)__		if (this.keepTaskList) {_			this.taskList.add(this.lastTaskInfo)__		}_		++this.taskCount__		this.currentTaskName = null__	};stop,the,current,task,the,results,are,undefined,if,timing,methods,are,called,without,invoking,at,least,one,pair,code,start,code,stop,methods,see,start;public,void,stop,throws,illegal,state,exception,if,this,current,task,name,null,throw,new,illegal,state,exception,can,t,stop,stop,watch,it,s,not,running,long,last,time,system,current,time,millis,this,start,time,millis,this,total,time,millis,last,time,this,last,task,info,new,task,info,this,current,task,name,last,time,if,this,keep,task,list,this,task,list,add,this,last,task,info,this,task,count,this,current,task,name,null
StopWatch -> public String currentTaskName();1443187419;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;public,string,current,task,name,return,this,current,task,name
StopWatch -> public String currentTaskName();1443381471;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;public,string,current,task,name,return,this,current,task,name
StopWatch -> public String currentTaskName();1467730834;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;public,string,current,task,name,return,this,current,task,name
StopWatch -> public String currentTaskName();1468307434;Return the name of the currently running task, if any._@since 4.2.2_@see #isRunning();public String currentTaskName() {_		return this.currentTaskName__	};return,the,name,of,the,currently,running,task,if,any,since,4,2,2,see,is,running;public,string,current,task,name,return,this,current,task,name
StopWatch -> public int getTaskCount();1328020251;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1356735495;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1405696918;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1443187419;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1443381471;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1467730834;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1468307434;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1495868221;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1498780456;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1519295386;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public int getTaskCount();1530174524;Return the number of tasks timed.;public int getTaskCount() {_		return this.taskCount__	};return,the,number,of,tasks,timed;public,int,get,task,count,return,this,task,count
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1328020251;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1356735495;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1405696918;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1443187419;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1443381471;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1467730834;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1468307434;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1495868221;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1498780456;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1519295386;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> public TaskInfo getLastTaskInfo() throws IllegalStateException;1530174524;Return the last task as a TaskInfo object.;public TaskInfo getLastTaskInfo() throws IllegalStateException {_		if (this.lastTaskInfo == null) {_			throw new IllegalStateException("No tasks run: can't get last task info")__		}_		return this.lastTaskInfo__	};return,the,last,task,as,a,task,info,object;public,task,info,get,last,task,info,throws,illegal,state,exception,if,this,last,task,info,null,throw,new,illegal,state,exception,no,tasks,run,can,t,get,last,task,info,return,this,last,task,info
StopWatch -> TaskInfo -> public double getTimeSeconds();1328020251;Return the time in seconds this task took.;public double getTimeSeconds() {_			return this.timeMillis / 1000.0__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1356735495;Return the time in seconds this task took.;public double getTimeSeconds() {_			return this.timeMillis / 1000.0__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1405696918;Return the time in seconds this task took.;public double getTimeSeconds() {_			return this.timeMillis / 1000.0__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1443187419;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1443381471;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1467730834;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1468307434;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1495868221;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1498780456;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1519295386;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public double getTimeSeconds();1530174524;Return the time in seconds this task took.;public double getTimeSeconds() {_			return (this.timeMillis / 1000.0)__		};return,the,time,in,seconds,this,task,took;public,double,get,time,seconds,return,this,time,millis,1000,0
StopWatch -> TaskInfo -> public long getTimeMillis();1328020251;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1356735495;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1405696918;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1443187419;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1443381471;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1467730834;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1468307434;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1495868221;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1498780456;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1519295386;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> TaskInfo -> public long getTimeMillis();1530174524;Return the time in milliseconds this task took.;public long getTimeMillis() {_			return this.timeMillis__		};return,the,time,in,milliseconds,this,task,took;public,long,get,time,millis,return,this,time,millis
StopWatch -> public double getTotalTimeSeconds();1328020251;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1356735495;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1405696918;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1443187419;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1443381471;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1467730834;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1468307434;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1495868221;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1498780456;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1519295386;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public double getTotalTimeSeconds();1530174524;Return the total time in seconds for all tasks.;public double getTotalTimeSeconds() {_		return this.totalTimeMillis / 1000.0__	};return,the,total,time,in,seconds,for,all,tasks;public,double,get,total,time,seconds,return,this,total,time,millis,1000,0
StopWatch -> public TaskInfo[] getTaskInfo();1328020251;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1356735495;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1405696918;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1443187419;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1443381471;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1467730834;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1468307434;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1495868221;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1498780456;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[this.taskList.size()])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,this,task,list,size
StopWatch -> public TaskInfo[] getTaskInfo();1519295386;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[0])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,0
StopWatch -> public TaskInfo[] getTaskInfo();1530174524;Return an array of the data for tasks performed.;public TaskInfo[] getTaskInfo() {_		if (!this.keepTaskList) {_			throw new UnsupportedOperationException("Task info is not being kept!")__		}_		return this.taskList.toArray(new TaskInfo[0])__	};return,an,array,of,the,data,for,tasks,performed;public,task,info,get,task,info,if,this,keep,task,list,throw,new,unsupported,operation,exception,task,info,is,not,being,kept,return,this,task,list,to,array,new,task,info,0
StopWatch -> public String getId();1443187419;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1443381471;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1467730834;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1468307434;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1495868221;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1498780456;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1519295386;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
StopWatch -> public String getId();1530174524;Return the id of this stop watch, as specified on construction._@return the id (empty String by default)_@since 4.2.2_@see #StopWatch(String);public String getId() {_		return this.id__	};return,the,id,of,this,stop,watch,as,specified,on,construction,return,the,id,empty,string,by,default,since,4,2,2,see,stop,watch,string;public,string,get,id,return,this,id
