commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the id of this stop watch, as specified on construction.  * @return the id (empty String by default)  * @since 4.2.2  * @see #StopWatch(String)  */ ;/**  * Return the id of this stop watch, as specified on construction.  * @return the id (empty String by default)  * @since 4.2.2  * @see #StopWatch(String)  */ public String getId() {     return this.id. }
true;public;1;3;/**  * Determine whether the TaskInfo array is built over time. Set this to  * "false" when using a StopWatch for millions of intervals, or the task  * info structure will consume excessive memory. Default is "true".  */ ;/**  * Determine whether the TaskInfo array is built over time. Set this to  * "false" when using a StopWatch for millions of intervals, or the task  * info structure will consume excessive memory. Default is "true".  */ public void setKeepTaskList(boolean keepTaskList) {     this.keepTaskList = keepTaskList. }
true;public;0;3;/**  * Start an unnamed task. The results are undefined if {@link #stop()}  * or timing methods are called without invoking this method.  * @see #stop()  */ ;/**  * Start an unnamed task. The results are undefined if {@link #stop()}  * or timing methods are called without invoking this method.  * @see #stop()  */ public void start() throws IllegalStateException {     start(""). }
true;public;1;7;/**  * Start a named task. The results are undefined if {@link #stop()}  * or timing methods are called without invoking this method.  * @param taskName the name of the task to start  * @see #stop()  */ ;/**  * Start a named task. The results are undefined if {@link #stop()}  * or timing methods are called without invoking this method.  * @param taskName the name of the task to start  * @see #stop()  */ public void start(String taskName) throws IllegalStateException {     if (this.currentTaskName != null) {         throw new IllegalStateException("Can't start StopWatch: it's already running").     }     this.currentTaskName = taskName.     this.startTimeMillis = System.currentTimeMillis(). }
true;public;0;13;/**  * Stop the current task. The results are undefined if timing  * methods are called without invoking at least one pair  * {@code start()} / {@code stop()} methods.  * @see #start()  */ ;/**  * Stop the current task. The results are undefined if timing  * methods are called without invoking at least one pair  * {@code start()} / {@code stop()} methods.  * @see #start()  */ public void stop() throws IllegalStateException {     if (this.currentTaskName == null) {         throw new IllegalStateException("Can't stop StopWatch: it's not running").     }     long lastTime = System.currentTimeMillis() - this.startTimeMillis.     this.totalTimeMillis += lastTime.     this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime).     if (this.keepTaskList) {         this.taskList.add(this.lastTaskInfo).     }     ++this.taskCount.     this.currentTaskName = null. }
true;public;0;3;/**  * Return whether the stop watch is currently running.  * @see #currentTaskName()  */ ;/**  * Return whether the stop watch is currently running.  * @see #currentTaskName()  */ public boolean isRunning() {     return (this.currentTaskName != null). }
true;public;0;4;/**  * Return the name of the currently running task, if any.  * @since 4.2.2  * @see #isRunning()  */ ;/**  * Return the name of the currently running task, if any.  * @since 4.2.2  * @see #isRunning()  */ @Nullable public String currentTaskName() {     return this.currentTaskName. }
true;public;0;6;/**  * Return the time taken by the last task.  */ ;/**  * Return the time taken by the last task.  */ public long getLastTaskTimeMillis() throws IllegalStateException {     if (this.lastTaskInfo == null) {         throw new IllegalStateException("No tasks run: can't get last task interval").     }     return this.lastTaskInfo.getTimeMillis(). }
true;public;0;6;/**  * Return the name of the last task.  */ ;/**  * Return the name of the last task.  */ public String getLastTaskName() throws IllegalStateException {     if (this.lastTaskInfo == null) {         throw new IllegalStateException("No tasks run: can't get last task name").     }     return this.lastTaskInfo.getTaskName(). }
true;public;0;6;/**  * Return the last task as a TaskInfo object.  */ ;/**  * Return the last task as a TaskInfo object.  */ public TaskInfo getLastTaskInfo() throws IllegalStateException {     if (this.lastTaskInfo == null) {         throw new IllegalStateException("No tasks run: can't get last task info").     }     return this.lastTaskInfo. }
true;public;0;3;/**  * Return the total time in milliseconds for all tasks.  */ ;/**  * Return the total time in milliseconds for all tasks.  */ public long getTotalTimeMillis() {     return this.totalTimeMillis. }
true;public;0;3;/**  * Return the total time in seconds for all tasks.  */ ;/**  * Return the total time in seconds for all tasks.  */ public double getTotalTimeSeconds() {     return this.totalTimeMillis / 1000.0. }
true;public;0;3;/**  * Return the number of tasks timed.  */ ;/**  * Return the number of tasks timed.  */ public int getTaskCount() {     return this.taskCount. }
true;public;0;6;/**  * Return an array of the data for tasks performed.  */ ;/**  * Return an array of the data for tasks performed.  */ public TaskInfo[] getTaskInfo() {     if (!this.keepTaskList) {         throw new UnsupportedOperationException("Task info is not being kept!").     }     return this.taskList.toArray(new TaskInfo[0]). }
true;public;0;3;/**  * Return a short description of the total running time.  */ ;/**  * Return a short description of the total running time.  */ public String shortSummary() {     return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis(). }
true;public;0;24;/**  * Return a string with a table describing all tasks performed.  * For custom reporting, call getTaskInfo() and use the task info directly.  */ ;/**  * Return a string with a table describing all tasks performed.  * For custom reporting, call getTaskInfo() and use the task info directly.  */ public String prettyPrint() {     StringBuilder sb = new StringBuilder(shortSummary()).     sb.append('\n').     if (!this.keepTaskList) {         sb.append("No task info kept").     } else {         sb.append("-----------------------------------------\n").         sb.append("ms     %     Task name\n").         sb.append("-----------------------------------------\n").         NumberFormat nf = NumberFormat.getNumberInstance().         nf.setMinimumIntegerDigits(5).         nf.setGroupingUsed(false).         NumberFormat pf = NumberFormat.getPercentInstance().         pf.setMinimumIntegerDigits(3).         pf.setGroupingUsed(false).         for (TaskInfo task : getTaskInfo()) {             sb.append(nf.format(task.getTimeMillis())).append("  ").             sb.append(pf.format(task.getTimeSeconds() / getTotalTimeSeconds())).append("  ").             sb.append(task.getTaskName()).append("\n").         }     }     return sb.toString(). }
true;public;0;15;/**  * Return an informative string describing all tasks performed  * For custom reporting, call {@code getTaskInfo()} and use the task info directly.  */ ;/**  * Return an informative string describing all tasks performed  * For custom reporting, call {@code getTaskInfo()} and use the task info directly.  */ @Override public String toString() {     StringBuilder sb = new StringBuilder(shortSummary()).     if (this.keepTaskList) {         for (TaskInfo task : getTaskInfo()) {             sb.append(". [").append(task.getTaskName()).append("] took ").append(task.getTimeMillis()).             long percent = Math.round((100.0 * task.getTimeSeconds()) / getTotalTimeSeconds()).             sb.append(" = ").append(percent).append("%").         }     } else {         sb.append(". no task info kept").     }     return sb.toString(). }
true;public;0;3;/**  * Return the name of this task.  */ ;/**  * Return the name of this task.  */ public String getTaskName() {     return this.taskName. }
true;public;0;3;/**  * Return the time in milliseconds this task took.  */ ;/**  * Return the time in milliseconds this task took.  */ public long getTimeMillis() {     return this.timeMillis. }
true;public;0;3;/**  * Return the time in seconds this task took.  */ ;/**  * Return the time in seconds this task took.  */ public double getTimeSeconds() {     return (this.timeMillis / 1000.0). }
