commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void visit(String attributeName, Object attributeValue) {     this.attributes.put(attributeName, attributeValue). }
false;public;2;7;;@Override public AnnotationVisitor visitAnnotation(String attributeName, String asmTypeDescriptor) {     String annotationType = Type.getType(asmTypeDescriptor).getClassName().     AnnotationAttributes nestedAttributes = new AnnotationAttributes(annotationType, this.classLoader).     this.attributes.put(attributeName, nestedAttributes).     return new RecursiveAnnotationAttributesVisitor(annotationType, nestedAttributes, this.classLoader). }
false;public;1;4;;@Override public AnnotationVisitor visitArray(String attributeName) {     return new RecursiveAnnotationArrayVisitor(attributeName, this.attributes, this.classLoader). }
false;public;3;5;;@Override public void visitEnum(String attributeName, String asmTypeDescriptor, String attributeValue) {     Object newValue = getEnumValue(asmTypeDescriptor, attributeValue).     visit(attributeName, newValue). }
false;protected;2;18;;protected Object getEnumValue(String asmTypeDescriptor, String attributeValue) {     Object valueToUse = attributeValue.     try {         Class<?> enumType = ClassUtils.forName(Type.getType(asmTypeDescriptor).getClassName(), this.classLoader).         Field enumConstant = ReflectionUtils.findField(enumType, attributeValue).         if (enumConstant != null) {             ReflectionUtils.makeAccessible(enumConstant).             valueToUse = enumConstant.get(null).         }     } catch (ClassNotFoundException | NoClassDefFoundError ex) {         logger.debug("Failed to classload enum type while reading annotation metadata", ex).     } catch (IllegalAccessException | AccessControlException ex) {         logger.debug("Could not access enum value while reading annotation metadata", ex).     }     return valueToUse. }
