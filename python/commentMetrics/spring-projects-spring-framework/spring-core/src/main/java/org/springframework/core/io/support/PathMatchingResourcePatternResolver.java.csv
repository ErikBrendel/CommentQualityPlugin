# id;timestamp;commentText;codeText;commentWords;codeWords
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1328020251;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1329393628;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1356735495;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1357119239;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1362408075;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1367955086;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1368482696;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1398290095;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1398638841;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1403212152;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1408473285;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1411322184;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1411399863;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1429890013;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1432125256;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1450437477;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1454933923;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1456392313;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1458828017;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1461683397;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1467726769;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1467730834;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1479827130;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1479906097;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1487760984;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1489686949;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1493841539;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1495868221;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1496837955;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1498780456;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1502974979;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1506419389;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1509024507;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1513100167;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1519295386;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1519588127;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1520529117;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1529093369;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1530174524;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1532091916;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1540214029;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader);1549380778;Create a new PathMatchingResourcePatternResolver._<p>ClassLoader access will happen via the thread context class loader._@param resourceLoader the ResourceLoader to load root directories and_actual resources with;public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {_		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		this.resourceLoader = resourceLoader__	};create,a,new,path,matching,resource,pattern,resolver,p,class,loader,access,will,happen,via,the,thread,context,class,loader,param,resource,loader,the,resource,loader,to,load,root,directories,and,actual,resources,with;public,path,matching,resource,pattern,resolver,resource,loader,resource,loader,assert,not,null,resource,loader,resource,loader,must,not,be,null,this,resource,loader,resource,loader
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1467726769;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1467730834;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1479827130;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1479906097;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1487760984;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1489686949;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1493841539;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1495868221;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1496837955;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1498780456;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1502974979;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1506419389;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1509024507;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1513100167;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1519295386;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1519588127;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1520529117;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1529093369;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1530174524;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1532091916;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isTraceEnabled()) {_				logger.trace("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1540214029;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isTraceEnabled()) {_				logger.trace("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern) 			throws IOException;1549380778;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param rootDirURL the pre-resolved root directory URL_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@since 4.3_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)_			throws IOException {__		URLConnection con = rootDirURL.openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirURL.getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR)__				if (separatorIndex == -1) {_					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				}_				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + 2)_  _					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isTraceEnabled()) {_				logger.trace("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,root,dir,url,the,pre,resolved,root,directory,url,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,since,4,3,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,url,root,dir,url,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,2,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1496837955;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1498780456;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1502974979;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1506419389;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1509024507;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1513100167;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1519295386;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1519588127;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1520529117;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1529093369;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1530174524;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1532091916;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1540214029;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result);1549380778;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = (ResourceUtils.URL_PROTOCOL_JAR.equals(url.getProtocol()) ?_								new UrlResource(url) :_								new UrlResource(ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR))__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,nullable,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,resource,utils,equals,url,get,protocol,new,url,resource,url,new,url,resource,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1506419389;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1509024507;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1513100167;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1519295386;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1519588127;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1520529117;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1529093369;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1530174524;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1532091916;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1540214029;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> private boolean hasDuplicate(String filePath, Set<Resource> result);1549380778;Check whether the given file path has a duplicate but differently structured entry_in the existing result, i.e. with or without a leading slash._@param filePath the file path (with or without a leading slash)_@param result the current result_@return {@code true} if there is a duplicate (i.e. to ignore the given file path),_{@code false} to proceed with adding a corresponding resource to the current result;private boolean hasDuplicate(String filePath, Set<Resource> result) {_		if (result.isEmpty()) {_			return false__		}_		String duplicatePath = (filePath.startsWith("/") ? filePath.substring(1) : "/" + filePath)__		try {_			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +_					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR))__		}_		catch (MalformedURLException ex) {_			_			return false__		}_	};check,whether,the,given,file,path,has,a,duplicate,but,differently,structured,entry,in,the,existing,result,i,e,with,or,without,a,leading,slash,param,file,path,the,file,path,with,or,without,a,leading,slash,param,result,the,current,result,return,code,true,if,there,is,a,duplicate,i,e,to,ignore,the,given,file,path,code,false,to,proceed,with,adding,a,corresponding,resource,to,the,current,result;private,boolean,has,duplicate,string,file,path,set,resource,result,if,result,is,empty,return,false,string,duplicate,path,file,path,starts,with,file,path,substring,1,file,path,try,return,result,contains,new,url,resource,resource,utils,resource,utils,duplicate,path,resource,utils,catch,malformed,urlexception,ex,return,false
PathMatchingResourcePatternResolver -> protected File[] listDirectory(File dir);1529093369;Determine a sorted list of files in the given directory._@param dir the directory to introspect_@return the sorted list of files (by default in alphabetical order)_@since 5.1_@see File#listFiles();protected File[] listDirectory(File dir) {_		File[] files = dir.listFiles()__		if (files == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return new File[0]__		}_		Arrays.sort(files, Comparator.comparing(File::getName))__		return files__	};determine,a,sorted,list,of,files,in,the,given,directory,param,dir,the,directory,to,introspect,return,the,sorted,list,of,files,by,default,in,alphabetical,order,since,5,1,see,file,list,files;protected,file,list,directory,file,dir,file,files,dir,list,files,if,files,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,new,file,0,arrays,sort,files,comparator,comparing,file,get,name,return,files
PathMatchingResourcePatternResolver -> protected File[] listDirectory(File dir);1530174524;Determine a sorted list of files in the given directory._@param dir the directory to introspect_@return the sorted list of files (by default in alphabetical order)_@since 5.1_@see File#listFiles();protected File[] listDirectory(File dir) {_		File[] files = dir.listFiles()__		if (files == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return new File[0]__		}_		Arrays.sort(files, Comparator.comparing(File::getName))__		return files__	};determine,a,sorted,list,of,files,in,the,given,directory,param,dir,the,directory,to,introspect,return,the,sorted,list,of,files,by,default,in,alphabetical,order,since,5,1,see,file,list,files;protected,file,list,directory,file,dir,file,files,dir,list,files,if,files,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,new,file,0,arrays,sort,files,comparator,comparing,file,get,name,return,files
PathMatchingResourcePatternResolver -> protected File[] listDirectory(File dir);1532091916;Determine a sorted list of files in the given directory._@param dir the directory to introspect_@return the sorted list of files (by default in alphabetical order)_@since 5.1_@see File#listFiles();protected File[] listDirectory(File dir) {_		File[] files = dir.listFiles()__		if (files == null) {_			if (logger.isInfoEnabled()) {_				logger.info("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return new File[0]__		}_		Arrays.sort(files, Comparator.comparing(File::getName))__		return files__	};determine,a,sorted,list,of,files,in,the,given,directory,param,dir,the,directory,to,introspect,return,the,sorted,list,of,files,by,default,in,alphabetical,order,since,5,1,see,file,list,files;protected,file,list,directory,file,dir,file,files,dir,list,files,if,files,null,if,logger,is,info,enabled,logger,info,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,new,file,0,arrays,sort,files,comparator,comparing,file,get,name,return,files
PathMatchingResourcePatternResolver -> protected File[] listDirectory(File dir);1540214029;Determine a sorted list of files in the given directory._@param dir the directory to introspect_@return the sorted list of files (by default in alphabetical order)_@since 5.1_@see File#listFiles();protected File[] listDirectory(File dir) {_		File[] files = dir.listFiles()__		if (files == null) {_			if (logger.isInfoEnabled()) {_				logger.info("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return new File[0]__		}_		Arrays.sort(files, Comparator.comparing(File::getName))__		return files__	};determine,a,sorted,list,of,files,in,the,given,directory,param,dir,the,directory,to,introspect,return,the,sorted,list,of,files,by,default,in,alphabetical,order,since,5,1,see,file,list,files;protected,file,list,directory,file,dir,file,files,dir,list,files,if,files,null,if,logger,is,info,enabled,logger,info,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,new,file,0,arrays,sort,files,comparator,comparing,file,get,name,return,files
PathMatchingResourcePatternResolver -> protected File[] listDirectory(File dir);1549380778;Determine a sorted list of files in the given directory._@param dir the directory to introspect_@return the sorted list of files (by default in alphabetical order)_@since 5.1_@see File#listFiles();protected File[] listDirectory(File dir) {_		File[] files = dir.listFiles()__		if (files == null) {_			if (logger.isInfoEnabled()) {_				logger.info("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return new File[0]__		}_		Arrays.sort(files, Comparator.comparing(File::getName))__		return files__	};determine,a,sorted,list,of,files,in,the,given,directory,param,dir,the,directory,to,introspect,return,the,sorted,list,of,files,by,default,in,alphabetical,order,since,5,1,see,file,list,files;protected,file,list,directory,file,dir,file,files,dir,list,files,if,files,null,if,logger,is,info,enabled,logger,info,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,new,file,0,arrays,sort,files,comparator,comparing,file,get,name,return,files
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1328020251;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1329393628;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1356735495;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1357119239;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1362408075;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1367955086;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1368482696;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1398290095;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1398638841;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1403212152;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1408473285;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1411322184;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1411399863;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1429890013;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1432125256;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1450437477;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1454933923;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1456392313;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1458828017;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1461683397;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1467726769;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1467730834;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1479827130;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1479906097;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1487760984;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1489686949;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1493841539;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1495868221;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1496837955;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1498780456;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1502974979;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1506419389;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1509024507;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1513100167;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1519295386;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1519588127;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1520529117;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1529093369;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1530174524;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1532091916;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1540214029;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public ResourceLoader getResourceLoader();1549380778;Return the ResourceLoader that this pattern resolver works with.;public ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,resource,loader,that,this,pattern,resolver,works,with;public,resource,loader,get,resource,loader,return,this,resource,loader
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1328020251;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1329393628;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1356735495;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1357119239;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1362408075;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1367955086;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1368482696;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1398290095;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1398638841;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1403212152;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1408473285;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1411322184;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1411399863;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1429890013;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1432125256;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1450437477;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1454933923;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1456392313;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1458828017;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1461683397;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1467726769;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1467730834;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1479827130;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1479906097;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1487760984;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1489686949;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1493841539;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1495868221;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1496837955;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1498780456;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1502974979;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1506419389;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1509024507;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1513100167;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1519295386;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1519588127;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1520529117;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1529093369;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1530174524;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1532091916;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1540214029;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> public PathMatcher getPathMatcher();1549380778;Return the PathMatcher that this resource pattern resolver uses.;public PathMatcher getPathMatcher() {_		return this.pathMatcher__	};return,the,path,matcher,that,this,resource,pattern,resolver,uses;public,path,matcher,get,path,matcher,return,this,path,matcher
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1328020251;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1329393628;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1356735495;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1357119239;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1362408075;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1367955086;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1368482696;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1398290095;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1398638841;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1403212152;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1408473285;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1411322184;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return the Set of matching File instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,the,set,of,matching,file,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1411399863;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1429890013;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1432125256;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1450437477;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1454933923;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1456392313;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1458828017;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1461683397;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1467726769;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<File>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,file,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1467730834;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1479827130;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1479906097;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1487760984;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1489686949;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1493841539;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1495868221;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1496837955;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1498780456;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1502974979;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1506419389;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1509024507;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1513100167;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1519295386;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1519588127;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1520529117;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1529093369;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1530174524;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isWarnEnabled()) {_				logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,warn,enabled,logger,warn,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1532091916;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isInfoEnabled()) {_				logger.info("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,info,enabled,logger,info,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,info,enabled,logger,info,cannot,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1540214029;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isInfoEnabled()) {_				logger.info("Skipping search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,info,enabled,logger,info,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,info,enabled,logger,info,skipping,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException;1549380778;Retrieve files that match the given path pattern,_checking the given directory and its subdirectories._@param rootDir the directory to start from_@param pattern the pattern to match against,_relative to the root directory_@return a mutable Set of matching Resource instances_@throws IOException if directory contents could not be retrieved;protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {_		if (!rootDir.exists()) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist")__			}_			return Collections.emptySet()__		}_		if (!rootDir.isDirectory()) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory")__			}_			return Collections.emptySet()__		}_		if (!rootDir.canRead()) {_			if (logger.isInfoEnabled()) {_				logger.info("Skipping search for matching files underneath directory [" + rootDir.getAbsolutePath() +_						"] because the application is not allowed to read the directory")__			}_			return Collections.emptySet()__		}_		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, "/")__		if (!pattern.startsWith("/")) {_			fullPattern += "/"__		}_		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, "/")__		Set<File> result = new LinkedHashSet<>(8)__		doRetrieveMatchingFiles(fullPattern, rootDir, result)__		return result__	};retrieve,files,that,match,the,given,path,pattern,checking,the,given,directory,and,its,subdirectories,param,root,dir,the,directory,to,start,from,param,pattern,the,pattern,to,match,against,relative,to,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,set,file,retrieve,matching,files,file,root,dir,string,pattern,throws,ioexception,if,root,dir,exists,if,logger,is,debug,enabled,logger,debug,skipping,root,dir,get,absolute,path,because,it,does,not,exist,return,collections,empty,set,if,root,dir,is,directory,if,logger,is,info,enabled,logger,info,skipping,root,dir,get,absolute,path,because,it,does,not,denote,a,directory,return,collections,empty,set,if,root,dir,can,read,if,logger,is,info,enabled,logger,info,skipping,search,for,matching,files,underneath,directory,root,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,return,collections,empty,set,string,full,pattern,string,utils,replace,root,dir,get,absolute,path,file,separator,if,pattern,starts,with,full,pattern,full,pattern,full,pattern,string,utils,replace,pattern,file,separator,set,file,result,new,linked,hash,set,8,do,retrieve,matching,files,full,pattern,root,dir,result,return,result
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1450437477;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1454933923;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1456392313;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1458828017;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1461683397;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1467726769;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1467730834;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String url : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + url +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,url,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,url,ends,with,resource,utils,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,url,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1479827130;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					if (path.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {_						File file = new File(path)__						UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_								ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_								ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,if,path,ends,with,resource,utils,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1479906097;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1487760984;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1489686949;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1493841539;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1495868221;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1496837955;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1498780456;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1502974979;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					File file = new File(path)__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +_							ResourceUtils.JAR_URL_SEPARATOR)__					if (jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,file,file,new,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,get,absolute,path,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1506419389;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1509024507;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = filePath.substring(0, 1).toUpperCase() + filePath.substring(1)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,file,path,substring,0,1,to,upper,case,file,path,substring,1,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1513100167;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1519295386;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1519588127;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1520529117;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1529093369;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1530174524;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1532091916;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1540214029;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected void addClassPathManifestEntries(Set<Resource> result);1549380778;Determine jar file references from the "java.class.path." manifest property and add them_to the given set of resources in the form of pointers to the root of the jar file content._@param result the set of resources to add jar roots to_@since 4.3;protected void addClassPathManifestEntries(Set<Resource> result) {_		try {_			String javaClassPathProperty = System.getProperty("java.class.path")__			for (String path : StringUtils.delimitedListToStringArray(_					javaClassPathProperty, System.getProperty("path.separator"))) {_				try {_					String filePath = new File(path).getAbsolutePath()__					int prefixIndex = filePath.indexOf(':')__					if (prefixIndex == 1) {_						_						filePath = StringUtils.capitalize(filePath)__					}_					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +_							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR)__					_					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {_						result.add(jarResource)__					}_				}_				catch (MalformedURLException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Cannot search for matching files underneath [" + path +_								"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__					}_				}_			}_		}_		catch (Exception ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex)__			}_		}_	};determine,jar,file,references,from,the,java,class,path,manifest,property,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,3;protected,void,add,class,path,manifest,entries,set,resource,result,try,string,java,class,path,property,system,get,property,java,class,path,for,string,path,string,utils,delimited,list,to,string,array,java,class,path,property,system,get,property,path,separator,try,string,file,path,new,file,path,get,absolute,path,int,prefix,index,file,path,index,of,if,prefix,index,1,file,path,string,utils,capitalize,file,path,url,resource,jar,resource,new,url,resource,resource,utils,resource,utils,file,path,resource,utils,if,result,contains,jar,resource,has,duplicate,file,path,result,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,path,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,evaluate,java,class,path,manifest,entries,ex
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1411399863;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1429890013;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1432125256;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1450437477;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1454933923;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1456392313;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1458828017;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1461683397;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1467726769;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<Resource>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,resource,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1467730834;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1479827130;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1479906097;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1487760984;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1489686949;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1493841539;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1495868221;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1496837955;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1498780456;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1502974979;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1506419389;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1509024507;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1513100167;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1519295386;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1519588127;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1520529117;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1529093369;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1530174524;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1532091916;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1540214029;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindAllClassPathResources(String path) throws IOException;1549380778;Find all class location resources with the given path via the ClassLoader._Called by {@link #findAllClassPathResources(String)}._@param path the absolute path within the classpath (never a leading slash)_@return a mutable Set of matching Resource instances_@since 4.1.1;protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {_		Set<Resource> result = new LinkedHashSet<>(16)__		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result__	};find,all,class,location,resources,with,the,given,path,via,the,class,loader,called,by,link,find,all,class,path,resources,string,param,path,the,absolute,path,within,the,classpath,never,a,leading,slash,return,a,mutable,set,of,matching,resource,instances,since,4,1,1;protected,set,resource,do,find,all,class,path,resources,string,path,throws,ioexception,set,resource,result,new,linked,hash,set,16,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1328020251;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1329393628;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1356735495;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1357119239;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1362408075;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1367955086;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1368482696;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1398290095;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1398638841;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1403212152;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1408473285;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1411322184;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1411399863;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1429890013;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1432125256;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1450437477;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1454933923;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1456392313;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1458828017;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1461683397;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1467726769;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,resource,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1467730834;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1479827130;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1479906097;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1487760984;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1489686949;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1493841539;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1495868221;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1496837955;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1498780456;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1502974979;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1506419389;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1509024507;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1513100167;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1519295386;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1519588127;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1520529117;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1529093369;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1530174524;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1532091916;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1540214029;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException;1549380778;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDir the root directory in the file system_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Looking for matching resources in directory tree [" + rootDir.getPath() + "]")__		}_		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern)__		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size())__		for (File file : matchingFiles) {_			result.add(new FileSystemResource(file))__		}_		return result__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,the,root,directory,in,the,file,system,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,matching,file,system,resources,file,root,dir,string,sub,pattern,throws,ioexception,if,logger,is,trace,enabled,logger,trace,looking,for,matching,resources,in,directory,tree,root,dir,get,path,set,file,matching,files,retrieve,matching,files,root,dir,sub,pattern,set,resource,result,new,linked,hash,set,matching,files,size,for,file,file,matching,files,result,add,new,file,system,resource,file,return,result
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1328020251;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or <code>null</code> for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,code,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1329393628;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or <code>null</code> for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,code,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1356735495;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1357119239;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1362408075;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1367955086;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1368482696;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1398290095;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1398638841;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1403212152;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1408473285;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1411322184;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1411399863;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1429890013;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1432125256;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1450437477;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1454933923;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1456392313;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1458828017;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1461683397;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1467726769;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1467730834;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1479827130;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1479906097;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1487760984;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1489686949;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(ClassLoader classLoader);1493841539;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1328020251;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			jarCon.setUseCaches(false)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,jar,con,set,use,caches,false,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1329393628;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1356735495;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1357119239;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1362408075;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1367955086;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1368482696;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1398290095;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1398638841;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1403212152;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1408473285;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1411322184;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1411399863;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__			if (separatorIndex != -1) {_				jarFileUrl = urlFile.substring(0, separatorIndex)__				rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__				jarFile = getJarFile(jarFileUrl)__			}_			else {_				jarFile = new JarFile(urlFile)__				jarFileUrl = urlFile__				rootEntryPath = ""__			}_			newJarFile = true__		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1429890013;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				newJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1432125256;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				newJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1450437477;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				newJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1454933923;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean newJarFile = false___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				newJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			_			_			if (newJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,new,jar,file,false,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,new,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,new,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1456392313;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) 			throws IOException;1458828017;Find all resources in jar files that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see java.net.JarURLConnection_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern)_			throws IOException {__		URLConnection con = rootDirResource.getURL().openConnection()__		JarFile jarFile__		String jarFileUrl__		String rootEntryPath__		boolean closeJarFile___		if (con instanceof JarURLConnection) {_			_			JarURLConnection jarCon = (JarURLConnection) con__			ResourceUtils.useCachesIfNecessary(jarCon)__			jarFile = jarCon.getJarFile()__			jarFileUrl = jarCon.getJarFileURL().toExternalForm()__			JarEntry jarEntry = jarCon.getJarEntry()__			rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")__			closeJarFile = !jarCon.getUseCaches()__		}_		else {_			_			_			_			_			String urlFile = rootDirResource.getURL().getFile()__			try {_				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR)__				if (separatorIndex != -1) {_					jarFileUrl = urlFile.substring(0, separatorIndex)__					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length())__					jarFile = getJarFile(jarFileUrl)__				}_				else {_					jarFile = new JarFile(urlFile)__					jarFileUrl = urlFile__					rootEntryPath = ""__				}_				closeJarFile = true__			}_			catch (ZipException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]")__				}_				return Collections.emptySet()__			}_		}__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]")__			}_			if (!"".equals(rootEntryPath) && !rootEntryPath.endsWith("/")) {_				_				_				rootEntryPath = rootEntryPath + "/"__			}_			Set<Resource> result = new LinkedHashSet<Resource>(8)__			for (Enumeration<JarEntry> entries = jarFile.entries()_ entries.hasMoreElements()_) {_				JarEntry entry = entries.nextElement()__				String entryPath = entry.getName()__				if (entryPath.startsWith(rootEntryPath)) {_					String relativePath = entryPath.substring(rootEntryPath.length())__					if (getPathMatcher().match(subPattern, relativePath)) {_						result.add(rootDirResource.createRelative(relativePath))__					}_				}_			}_			return result__		}_		finally {_			if (closeJarFile) {_				jarFile.close()__			}_		}_	};find,all,resources,in,jar,files,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,java,net,jar,urlconnection,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,jar,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,urlconnection,con,root,dir,resource,get,url,open,connection,jar,file,jar,file,string,jar,file,url,string,root,entry,path,boolean,close,jar,file,if,con,instanceof,jar,urlconnection,jar,urlconnection,jar,con,jar,urlconnection,con,resource,utils,use,caches,if,necessary,jar,con,jar,file,jar,con,get,jar,file,jar,file,url,jar,con,get,jar,file,url,to,external,form,jar,entry,jar,entry,jar,con,get,jar,entry,root,entry,path,jar,entry,null,jar,entry,get,name,close,jar,file,jar,con,get,use,caches,else,string,url,file,root,dir,resource,get,url,get,file,try,int,separator,index,url,file,index,of,resource,utils,if,separator,index,1,jar,file,url,url,file,substring,0,separator,index,root,entry,path,url,file,substring,separator,index,resource,utils,length,jar,file,get,jar,file,jar,file,url,else,jar,file,new,jar,file,url,file,jar,file,url,url,file,root,entry,path,close,jar,file,true,catch,zip,exception,ex,if,logger,is,debug,enabled,logger,debug,skipping,invalid,jar,classpath,entry,url,file,return,collections,empty,set,try,if,logger,is,debug,enabled,logger,debug,looking,for,matching,resources,in,jar,file,jar,file,url,if,equals,root,entry,path,root,entry,path,ends,with,root,entry,path,root,entry,path,set,resource,result,new,linked,hash,set,resource,8,for,enumeration,jar,entry,entries,jar,file,entries,entries,has,more,elements,jar,entry,entry,entries,next,element,string,entry,path,entry,get,name,if,entry,path,starts,with,root,entry,path,string,relative,path,entry,path,substring,root,entry,path,length,if,get,path,matcher,match,sub,pattern,relative,path,result,add,root,dir,resource,create,relative,relative,path,return,result,finally,if,close,jar,file,jar,file,close
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1328020251;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a <code>java.io.File</code>_and passing it into <code>retrieveMatchingFiles</code>, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,code,and,passing,it,into,code,retrieve,matching,files,code,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1329393628;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a <code>java.io.File</code>_and passing it into <code>retrieveMatchingFiles</code>, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,code,and,passing,it,into,code,retrieve,matching,files,code,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1356735495;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1357119239;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1362408075;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1367955086;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1368482696;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1398290095;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1398638841;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1403212152;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1408473285;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1411322184;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1411399863;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1429890013;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1432125256;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1450437477;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1454933923;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1456392313;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1458828017;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1461683397;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1467726769;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1467730834;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1479827130;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1479906097;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1487760984;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1489686949;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1493841539;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1495868221;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1496837955;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1498780456;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1502974979;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1506419389;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1509024507;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1513100167;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1519295386;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(":") + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1519588127;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1520529117;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1529093369;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1530174524;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1532091916;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1540214029;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> protected String determineRootDir(String location);1549380778;Determine the root directory for the given location._<p>Used for determining the starting point for file matching,_resolving the root directory location to a {@code java.io.File}_and passing it into {@code retrieveMatchingFiles}, with the_remainder of the location as pattern._<p>Will return "/WEB-INF/" for the pattern "/WEB-INF/*.xml",_for example._@param location the location to check_@return the part of the location that denotes the root directory_@see #retrieveMatchingFiles;protected String determineRootDir(String location) {_		int prefixEnd = location.indexOf(':') + 1__		int rootDirEnd = location.length()__		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {_			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1__		}_		if (rootDirEnd == 0) {_			rootDirEnd = prefixEnd__		}_		return location.substring(0, rootDirEnd)__	};determine,the,root,directory,for,the,given,location,p,used,for,determining,the,starting,point,for,file,matching,resolving,the,root,directory,location,to,a,code,java,io,file,and,passing,it,into,code,retrieve,matching,files,with,the,remainder,of,the,location,as,pattern,p,will,return,web,inf,for,the,pattern,web,inf,xml,for,example,param,location,the,location,to,check,return,the,part,of,the,location,that,denotes,the,root,directory,see,retrieve,matching,files;protected,string,determine,root,dir,string,location,int,prefix,end,location,index,of,1,int,root,dir,end,location,length,while,root,dir,end,prefix,end,get,path,matcher,is,pattern,location,substring,prefix,end,root,dir,end,root,dir,end,location,last,index,of,root,dir,end,2,1,if,root,dir,end,0,root,dir,end,prefix,end,return,location,substring,0,root,dir,end
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1328020251;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1329393628;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1356735495;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1357119239;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1362408075;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1367955086;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1368482696;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1398290095;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1398638841;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1403212152;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1408473285;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1411322184;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1411399863;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1429890013;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1432125256;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1450437477;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1454933923;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1456392313;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1458828017;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1461683397;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1467726769;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1467730834;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1479827130;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1479906097;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1487760984;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1489686949;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1493841539;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1495868221;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1496837955;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1498780456;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1502974979;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1506419389;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1509024507;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1513100167;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1519295386;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1519588127;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1520529117;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1529093369;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1530174524;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1532091916;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1540214029;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> public void setPathMatcher(PathMatcher pathMatcher);1549380778;Set the PathMatcher implementation to use for this_resource pattern resolver. Default is AntPathMatcher._@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		Assert.notNull(pathMatcher, "PathMatcher must not be null")__		this.pathMatcher = pathMatcher__	};set,the,path,matcher,implementation,to,use,for,this,resource,pattern,resolver,default,is,ant,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,assert,not,null,path,matcher,path,matcher,must,not,be,null,this,path,matcher,path,matcher
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1411322184;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}_		if (classLoader != null) {_			try {_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1411399863;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}_		if (classLoader != null) {_			try {_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1429890013;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}_		if (classLoader != null) {_			try {_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1432125256;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}_		if (classLoader != null) {_			try {_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1450437477;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1454933923;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1456392313;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1458828017;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1461683397;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1467726769;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1467730834;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1479827130;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					if (ResourceUtils.isJarFileURL(url)) {_						try {_							UrlResource jarResource = new UrlResource(_									ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__							if (jarResource.exists()) {_								result.add(jarResource)__							}_						}_						catch (MalformedURLException ex) {_							if (logger.isDebugEnabled()) {_								logger.debug("Cannot search for matching files underneath [" + url +_										"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__							}_						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,if,resource,utils,is,jar,file,url,url,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1479906097;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1487760984;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1489686949;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1493841539;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result);1495868221;Search all {@link URLClassLoader} URLs for jar file references and add them to the_given set of resources in the form of pointers to the root of the jar file content._@param classLoader the ClassLoader to search (including its ancestors)_@param result the set of resources to add jar roots to_@since 4.1.1;protected void addAllClassLoaderJarRoots(ClassLoader classLoader, Set<Resource> result) {_		if (classLoader instanceof URLClassLoader) {_			try {_				for (URL url : ((URLClassLoader) classLoader).getURLs()) {_					try {_						UrlResource jarResource = new UrlResource(_								ResourceUtils.JAR_URL_PREFIX + url.toString() + ResourceUtils.JAR_URL_SEPARATOR)__						if (jarResource.exists()) {_							result.add(jarResource)__						}_					}_					catch (MalformedURLException ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Cannot search for matching files underneath [" + url +_									"] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage())__						}_					}_				}_			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader +_							"] does not support 'getURLs()': " + ex)__				}_			}_		}__		if (classLoader == ClassLoader.getSystemClassLoader()) {_			_			addClassPathManifestEntries(result)__		}__		if (classLoader != null) {_			try {_				_				addAllClassLoaderJarRoots(classLoader.getParent(), result)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader +_							"] does not support 'getParent()': " + ex)__				}_			}_		}_	};search,all,link,urlclass,loader,urls,for,jar,file,references,and,add,them,to,the,given,set,of,resources,in,the,form,of,pointers,to,the,root,of,the,jar,file,content,param,class,loader,the,class,loader,to,search,including,its,ancestors,param,result,the,set,of,resources,to,add,jar,roots,to,since,4,1,1;protected,void,add,all,class,loader,jar,roots,class,loader,class,loader,set,resource,result,if,class,loader,instanceof,urlclass,loader,try,for,url,url,urlclass,loader,class,loader,get,urls,try,url,resource,jar,resource,new,url,resource,resource,utils,url,to,string,resource,utils,if,jar,resource,exists,result,add,jar,resource,catch,malformed,urlexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,url,because,it,cannot,be,converted,to,a,valid,jar,url,ex,get,message,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,since,class,loader,class,loader,does,not,support,get,urls,ex,if,class,loader,class,loader,get,system,class,loader,add,class,path,manifest,entries,result,if,class,loader,null,try,add,all,class,loader,jar,roots,class,loader,get,parent,result,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,introspect,jar,files,in,parent,class,loader,since,class,loader,does,not,support,get,parent,ex
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1328020251;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1329393628;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1356735495;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1357119239;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1362408075;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1367955086;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1368482696;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1398290095;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1398638841;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1403212152;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1408473285;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1411322184;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return the Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,the,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1411399863;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1429890013;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1432125256;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1450437477;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1454933923;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1456392313;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1458828017;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1461683397;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1467726769;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1467730834;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1479827130;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1479906097;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1487760984;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1489686949;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1493841539;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1495868221;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1496837955;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1498780456;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1502974979;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1506419389;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1509024507;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1513100167;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1519295386;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1519588127;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1520529117;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1529093369;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1530174524;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,warn,enabled,logger,warn,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1532091916;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (IOException ex) {_			if (logger.isInfoEnabled()) {_				logger.info("Cannot search for matching files underneath " + rootDirResource +_						" because it does not correspond to a directory in the file system", ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,ioexception,ex,if,logger,is,info,enabled,logger,info,cannot,search,for,matching,files,underneath,root,dir,resource,because,it,does,not,correspond,to,a,directory,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1540214029;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (FileNotFoundException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot search for matching files underneath " + rootDirResource +_						" in the file system: " + ex.getMessage())__			}_			return Collections.emptySet()__		}_		catch (Exception ex) {_			if (logger.isInfoEnabled()) {_				logger.info("Failed to resolve " + rootDirResource + " in the file system: " + ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,file,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,root,dir,resource,in,the,file,system,ex,get,message,return,collections,empty,set,catch,exception,ex,if,logger,is,info,enabled,logger,info,failed,to,resolve,root,dir,resource,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern) 			throws IOException;1549380778;Find all resources in the file system that match the given location pattern_via the Ant-style PathMatcher._@param rootDirResource the root directory as Resource_@param subPattern the sub pattern to match (below the root directory)_@return a mutable Set of matching Resource instances_@throws IOException in case of I/O errors_@see #retrieveMatchingFiles_@see org.springframework.util.PathMatcher;protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)_			throws IOException {__		File rootDir__		try {_			rootDir = rootDirResource.getFile().getAbsoluteFile()__		}_		catch (FileNotFoundException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Cannot search for matching files underneath " + rootDirResource +_						" in the file system: " + ex.getMessage())__			}_			return Collections.emptySet()__		}_		catch (Exception ex) {_			if (logger.isInfoEnabled()) {_				logger.info("Failed to resolve " + rootDirResource + " in the file system: " + ex)__			}_			return Collections.emptySet()__		}_		return doFindMatchingFileSystemResources(rootDir, subPattern)__	};find,all,resources,in,the,file,system,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,param,root,dir,resource,the,root,directory,as,resource,param,sub,pattern,the,sub,pattern,to,match,below,the,root,directory,return,a,mutable,set,of,matching,resource,instances,throws,ioexception,in,case,of,i,o,errors,see,retrieve,matching,files,see,org,springframework,util,path,matcher;protected,set,resource,do,find,path,matching,file,resources,resource,root,dir,resource,string,sub,pattern,throws,ioexception,file,root,dir,try,root,dir,root,dir,resource,get,file,get,absolute,file,catch,file,not,found,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,search,for,matching,files,underneath,root,dir,resource,in,the,file,system,ex,get,message,return,collections,empty,set,catch,exception,ex,if,logger,is,info,enabled,logger,info,failed,to,resolve,root,dir,resource,in,the,file,system,ex,return,collections,empty,set,return,do,find,matching,file,system,resources,root,dir,sub,pattern
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1328020251;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1329393628;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1356735495;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1357119239;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1362408075;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1367955086;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1368482696;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1398290095;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1398638841;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1403212152;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1408473285;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1411322184;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1411399863;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1429890013;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1432125256;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1450437477;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1454933923;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1456392313;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1458828017;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1461683397;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1467726769;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1467730834;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1479827130;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1479906097;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1487760984;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1489686949;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1493841539;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1495868221;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1496837955;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1498780456;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1502974979;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1506419389;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1509024507;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1513100167;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1519295386;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1519588127;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1520529117;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1529093369;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1530174524;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1532091916;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1540214029;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> protected JarFile getJarFile(String jarFileUrl) throws IOException;1549380778;Resolve the given jar file URL into a JarFile object.;protected JarFile getJarFile(String jarFileUrl) throws IOException {_		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {_			try {_				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart())__			}_			catch (URISyntaxException ex) {_				_				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()))__			}_		}_		else {_			return new JarFile(jarFileUrl)__		}_	};resolve,the,given,jar,file,url,into,a,jar,file,object;protected,jar,file,get,jar,file,string,jar,file,url,throws,ioexception,if,jar,file,url,starts,with,resource,utils,try,return,new,jar,file,resource,utils,to,uri,jar,file,url,get,scheme,specific,part,catch,urisyntax,exception,ex,return,new,jar,file,jar,file,url,substring,resource,utils,length,else,return,new,jar,file,jar,file,url
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1495868221;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1496837955;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1498780456;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1502974979;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1506419389;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1509024507;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1513100167;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1519295386;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1519588127;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1520529117;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1529093369;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1530174524;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1532091916;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1540214029;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader);1549380778;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._@param classLoader the ClassLoader to load classpath resources with,_or {@code null} for using the thread context class loader_at the time of actual resource access_@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {_		this.resourceLoader = new DefaultResourceLoader(classLoader)__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,param,class,loader,the,class,loader,to,load,classpath,resources,with,or,code,null,for,using,the,thread,context,class,loader,at,the,time,of,actual,resource,access,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,nullable,class,loader,class,loader,this,resource,loader,new,default,resource,loader,class,loader
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1328020251;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1329393628;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1356735495;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1357119239;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1362408075;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1367955086;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1368482696;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1398290095;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1398638841;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1403212152;Convert the given URL as returned from the ClassLoader into a Resource object._<p>The default implementation simply creates a UrlResource instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,resource,object,p,the,default,implementation,simply,creates,a,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1408473285;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1411322184;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1411399863;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1429890013;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1432125256;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1450437477;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1454933923;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1456392313;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1458828017;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1461683397;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1467726769;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1467730834;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1479827130;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1479906097;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1487760984;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1489686949;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1493841539;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1495868221;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1496837955;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1498780456;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1502974979;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1506419389;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1509024507;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1513100167;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1519295386;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1519588127;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1520529117;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1529093369;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1530174524;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1532091916;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1540214029;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> protected Resource convertClassLoaderURL(URL url);1549380778;Convert the given URL as returned from the ClassLoader into a {@link Resource}._<p>The default implementation simply creates a {@link UrlResource} instance._@param url a URL as returned from the ClassLoader_@return the corresponding Resource object_@see java.lang.ClassLoader#getResources_@see org.springframework.core.io.Resource;protected Resource convertClassLoaderURL(URL url) {_		return new UrlResource(url)__	};convert,the,given,url,as,returned,from,the,class,loader,into,a,link,resource,p,the,default,implementation,simply,creates,a,link,url,resource,instance,param,url,a,url,as,returned,from,the,class,loader,return,the,corresponding,resource,object,see,java,lang,class,loader,get,resources,see,org,springframework,core,io,resource;protected,resource,convert,class,loader,url,url,url,return,new,url,resource,url
PathMatchingResourcePatternResolver -> @Override 	public ClassLoader getClassLoader();1356735495;Return the ClassLoader that this pattern resolver works with_(never {@code null}).;@Override_	public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null;override,public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> @Override 	public ClassLoader getClassLoader();1368482696;Return the ClassLoader that this pattern resolver works with_(never {@code null}).;@Override_	public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null;override,public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> @Override 	public ClassLoader getClassLoader();1398290095;Return the ClassLoader that this pattern resolver works with_(only {@code null} if even the system ClassLoader isn't accessible)._@see org.springframework.util.ClassUtils#getDefaultClassLoader();@Override_	public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,only,code,null,if,even,the,system,class,loader,isn,t,accessible,see,org,springframework,util,class,utils,get,default,class,loader;override,public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> public ClassLoader getClassLoader();1328020251;Return the ClassLoader that this pattern resolver works with_(never <code>null</code>).;public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null,code;public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> public ClassLoader getClassLoader();1329393628;Return the ClassLoader that this pattern resolver works with_(never <code>null</code>).;public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null,code;public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> public ClassLoader getClassLoader();1357119239;Return the ClassLoader that this pattern resolver works with_(never {@code null}).;public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null;public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> public ClassLoader getClassLoader();1362408075;Return the ClassLoader that this pattern resolver works with_(never {@code null}).;public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null;public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> public ClassLoader getClassLoader();1367955086;Return the ClassLoader that this pattern resolver works with_(never {@code null}).;public ClassLoader getClassLoader() {_		return getResourceLoader().getClassLoader()__	};return,the,class,loader,that,this,pattern,resolver,works,with,never,code,null;public,class,loader,get,class,loader,return,get,resource,loader,get,class,loader
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1328020251;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1329393628;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1356735495;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1357119239;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1362408075;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1367955086;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1368482696;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Enumeration<URL> resourceUrls = getClassLoader().getResources(path)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,enumeration,url,resource,urls,get,class,loader,get,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1398290095;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1398638841;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1403212152;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1408473285;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1411322184;Find all class location resources with the given location via the ClassLoader._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		ClassLoader cl = getClassLoader()__		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path))__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		while (resourceUrls.hasMoreElements()) {_			URL url = resourceUrls.nextElement()__			result.add(convertClassLoaderURL(url))__		}_		if ("".equals(path)) {_			_			_			addAllClassLoaderJarRoots(cl, result)__		}_		postProcessFindAllClassPathResourcesResult(location, result)__		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,class,loader,cl,get,class,loader,enumeration,url,resource,urls,cl,null,cl,get,resources,path,class,loader,get,system,resources,path,set,resource,result,new,linked,hash,set,resource,16,while,resource,urls,has,more,elements,url,url,resource,urls,next,element,result,add,convert,class,loader,url,url,if,equals,path,add,all,class,loader,jar,roots,cl,result,post,process,find,all,class,path,resources,result,location,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1411399863;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1429890013;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1432125256;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1450437477;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1454933923;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1456392313;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1458828017;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1461683397;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1467726769;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1467730834;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1479827130;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1479906097;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1487760984;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1489686949;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1493841539;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1495868221;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1496837955;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1498780456;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1502974979;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1506419389;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1509024507;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1513100167;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1519295386;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1519588127;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1520529117;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1529093369;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1530174524;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isDebugEnabled()) {_			logger.debug("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,debug,enabled,logger,debug,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1532091916;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isTraceEnabled()) {_			logger.trace("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,trace,enabled,logger,trace,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1540214029;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isTraceEnabled()) {_			logger.trace("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,trace,enabled,logger,trace,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findAllClassPathResources(String location) throws IOException;1549380778;Find all class location resources with the given location via the ClassLoader._Delegates to {@link #doFindAllClassPathResources(String)}._@param location the absolute path within the classpath_@return the result as Resource array_@throws IOException in case of I/O errors_@see java.lang.ClassLoader#getResources_@see #convertClassLoaderURL;protected Resource[] findAllClassPathResources(String location) throws IOException {_		String path = location__		if (path.startsWith("/")) {_			path = path.substring(1)__		}_		Set<Resource> result = doFindAllClassPathResources(path)__		if (logger.isTraceEnabled()) {_			logger.trace("Resolved classpath location [" + location + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,class,location,resources,with,the,given,location,via,the,class,loader,delegates,to,link,do,find,all,class,path,resources,string,param,location,the,absolute,path,within,the,classpath,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,java,lang,class,loader,get,resources,see,convert,class,loader,url;protected,resource,find,all,class,path,resources,string,location,throws,ioexception,string,path,location,if,path,starts,with,path,path,substring,1,set,resource,result,do,find,all,class,path,resources,path,if,logger,is,trace,enabled,logger,trace,resolved,classpath,location,location,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1328020251;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1329393628;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1356735495;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1357119239;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1362408075;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1367955086;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1368482696;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1398290095;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1398638841;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1403212152;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1408473285;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1411322184;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1411399863;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1429890013;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1432125256;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1450437477;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1454933923;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1456392313;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1458828017;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))__			}_			else if (isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,if,root,dir,resource,get,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,resource,sub,pattern,get,path,matcher,else,if,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1461683397;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1467726769;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<Resource>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,resource,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1467730834;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1479827130;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1479906097;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1487760984;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1489686949;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1493841539;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1495868221;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirURL = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirURL.getProtocol().startsWith("bundle")) {_					rootDirURL = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirURL)__					rootDirResource = new UrlResource(rootDirURL)__				}_			}_			if (rootDirURL.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirURL, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirURL) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirURL, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,root,dir,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1496837955;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1498780456;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1502974979;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1506419389;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1509024507;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1513100167;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[result.size()])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,result,size
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1519295386;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1519588127;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null) {_				if (rootDirUrl.getProtocol().startsWith("bundle")) {_					URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__					if (resolvedUrl != null) {_						rootDirUrl = resolvedUrl__					}_					rootDirResource = new UrlResource(rootDirUrl)__				}_			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,if,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1520529117;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1529093369;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1530174524;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,debug,enabled,logger,debug,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1532091916;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,trace,enabled,logger,trace,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1540214029;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,trace,enabled,logger,trace,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected Resource[] findPathMatchingResources(String locationPattern) throws IOException;1549380778;Find all resources that match the given location pattern via the_Ant-style PathMatcher. Supports resources in jar files and zip files_and in the file system._@param locationPattern the location pattern to match_@return the result as Resource array_@throws IOException in case of I/O errors_@see #doFindPathMatchingJarResources_@see #doFindPathMatchingFileResources_@see org.springframework.util.PathMatcher;protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {_		String rootDirPath = determineRootDir(locationPattern)__		String subPattern = locationPattern.substring(rootDirPath.length())__		Resource[] rootDirResources = getResources(rootDirPath)__		Set<Resource> result = new LinkedHashSet<>(16)__		for (Resource rootDirResource : rootDirResources) {_			rootDirResource = resolveRootDirResource(rootDirResource)__			URL rootDirUrl = rootDirResource.getURL()__			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith("bundle")) {_				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl)__				if (resolvedUrl != null) {_					rootDirUrl = resolvedUrl__				}_				rootDirResource = new UrlResource(rootDirUrl)__			}_			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {_				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()))__			}_			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {_				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern))__			}_			else {_				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))__			}_		}_		if (logger.isTraceEnabled()) {_			logger.trace("Resolved location pattern [" + locationPattern + "] to resources " + result)__		}_		return result.toArray(new Resource[0])__	};find,all,resources,that,match,the,given,location,pattern,via,the,ant,style,path,matcher,supports,resources,in,jar,files,and,zip,files,and,in,the,file,system,param,location,pattern,the,location,pattern,to,match,return,the,result,as,resource,array,throws,ioexception,in,case,of,i,o,errors,see,do,find,path,matching,jar,resources,see,do,find,path,matching,file,resources,see,org,springframework,util,path,matcher;protected,resource,find,path,matching,resources,string,location,pattern,throws,ioexception,string,root,dir,path,determine,root,dir,location,pattern,string,sub,pattern,location,pattern,substring,root,dir,path,length,resource,root,dir,resources,get,resources,root,dir,path,set,resource,result,new,linked,hash,set,16,for,resource,root,dir,resource,root,dir,resources,root,dir,resource,resolve,root,dir,resource,root,dir,resource,url,root,dir,url,root,dir,resource,get,url,if,equinox,resolve,method,null,root,dir,url,get,protocol,starts,with,bundle,url,resolved,url,url,reflection,utils,invoke,method,equinox,resolve,method,null,root,dir,url,if,resolved,url,null,root,dir,url,resolved,url,root,dir,resource,new,url,resource,root,dir,url,if,root,dir,url,get,protocol,starts,with,resource,utils,result,add,all,vfs,resource,matching,delegate,find,matching,resources,root,dir,url,sub,pattern,get,path,matcher,else,if,resource,utils,is,jar,url,root,dir,url,is,jar,resource,root,dir,resource,result,add,all,do,find,path,matching,jar,resources,root,dir,resource,root,dir,url,sub,pattern,else,result,add,all,do,find,path,matching,file,resources,root,dir,resource,sub,pattern,if,logger,is,trace,enabled,logger,trace,resolved,location,pattern,location,pattern,to,resources,result,return,result,to,array,new,resource,0
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1328020251;Return whether the given resource handle indicates a jar resource_that the <code>doFindPathMatchingJarResources</code> method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,code,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1329393628;Return whether the given resource handle indicates a jar resource_that the <code>doFindPathMatchingJarResources</code> method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,code,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1356735495;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1357119239;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1362408075;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1367955086;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1368482696;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1398290095;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1398638841;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1403212152;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1408473285;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1411322184;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1411399863;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1429890013;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1432125256;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1450437477;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1454933923;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1456392313;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1458828017;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>The default implementation checks against the URL protocols_"jar", "zip" and "wsjar" (the latter are used by BEA WebLogic Server_and IBM WebSphere, respectively, but can be treated like jar files)._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return ResourceUtils.isJarURL(resource.getURL())__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,the,default,implementation,checks,against,the,url,protocols,jar,zip,and,wsjar,the,latter,are,used,by,bea,web,logic,server,and,ibm,web,sphere,respectively,but,can,be,treated,like,jar,files,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,resource,utils,is,jar,url,resource,get,url
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1461683397;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1467726769;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1467730834;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1479827130;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1479906097;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1487760984;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1489686949;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1493841539;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1495868221;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1496837955;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1498780456;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1502974979;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1506419389;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1509024507;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1513100167;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1519295386;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1519588127;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1520529117;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1529093369;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1530174524;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1532091916;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1540214029;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected boolean isJarResource(Resource resource) throws IOException;1549380778;Return whether the given resource handle indicates a jar resource_that the {@code doFindPathMatchingJarResources} method can handle._<p>By default, the URL protocols "jar", "zip", "vfszip and "wsjar"_will be treated as jar resources. This template method allows for_detecting further kinds of jar-like resources, e.g. through_{@code instanceof} checks on the resource handle type._@param resource the resource handle to check_(usually the root directory to start path matching from)_@see #doFindPathMatchingJarResources_@see org.springframework.util.ResourceUtils#isJarURL;protected boolean isJarResource(Resource resource) throws IOException {_		return false__	};return,whether,the,given,resource,handle,indicates,a,jar,resource,that,the,code,do,find,path,matching,jar,resources,method,can,handle,p,by,default,the,url,protocols,jar,zip,vfszip,and,wsjar,will,be,treated,as,jar,resources,this,template,method,allows,for,detecting,further,kinds,of,jar,like,resources,e,g,through,code,instanceof,checks,on,the,resource,handle,type,param,resource,the,resource,handle,to,check,usually,the,root,directory,to,start,path,matching,from,see,do,find,path,matching,jar,resources,see,org,springframework,util,resource,utils,is,jar,url;protected,boolean,is,jar,resource,resource,resource,throws,ioexception,return,false
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1328020251;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1329393628;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1356735495;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1357119239;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1362408075;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1367955086;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1368482696;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1398290095;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1398638841;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1403212152;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1408473285;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1411322184;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1411399863;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1429890013;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1432125256;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1450437477;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1454933923;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1456392313;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1458828017;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1461683397;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1467726769;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1467730834;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1479827130;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1479906097;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1487760984;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1489686949;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1493841539;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1495868221;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1496837955;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1498780456;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1502974979;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1506419389;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1509024507;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1513100167;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1519295386;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1519588127;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1520529117;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		File[] dirContents = dir.listFiles()__		if (dirContents == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]")__			}_			return__		}_		Arrays.sort(dirContents)__		for (File content : dirContents) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,file,dir,contents,dir,list,files,if,dir,contents,null,if,logger,is,warn,enabled,logger,warn,could,not,retrieve,contents,of,directory,dir,get,absolute,path,return,arrays,sort,dir,contents,for,file,content,dir,contents,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1529093369;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		for (File content : listDirectory(dir)) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,for,file,content,list,directory,dir,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1530174524;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		for (File content : listDirectory(dir)) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,debug,enabled,logger,debug,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,for,file,content,list,directory,dir,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1532091916;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		for (File content : listDirectory(dir)) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,trace,enabled,logger,trace,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,for,file,content,list,directory,dir,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1540214029;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		for (File content : listDirectory(dir)) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,trace,enabled,logger,trace,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,for,file,content,list,directory,dir,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException;1549380778;Recursively retrieve files that match the given pattern,_adding them to the given result list._@param fullPattern the pattern to match against,_with prepended root directory path_@param dir the current directory_@param result the Set of matching File instances to add to_@throws IOException if directory contents could not be retrieved;protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {_		if (logger.isTraceEnabled()) {_			logger.trace("Searching directory [" + dir.getAbsolutePath() +_					"] for files matching pattern [" + fullPattern + "]")__		}_		for (File content : listDirectory(dir)) {_			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, "/")__			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + "/")) {_				if (!content.canRead()) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() +_								"] because the application is not allowed to read the directory")__					}_				}_				else {_					doRetrieveMatchingFiles(fullPattern, content, result)__				}_			}_			if (getPathMatcher().match(fullPattern, currPath)) {_				result.add(content)__			}_		}_	};recursively,retrieve,files,that,match,the,given,pattern,adding,them,to,the,given,result,list,param,full,pattern,the,pattern,to,match,against,with,prepended,root,directory,path,param,dir,the,current,directory,param,result,the,set,of,matching,file,instances,to,add,to,throws,ioexception,if,directory,contents,could,not,be,retrieved;protected,void,do,retrieve,matching,files,string,full,pattern,file,dir,set,file,result,throws,ioexception,if,logger,is,trace,enabled,logger,trace,searching,directory,dir,get,absolute,path,for,files,matching,pattern,full,pattern,for,file,content,list,directory,dir,string,curr,path,string,utils,replace,content,get,absolute,path,file,separator,if,content,is,directory,get,path,matcher,match,start,full,pattern,curr,path,if,content,can,read,if,logger,is,debug,enabled,logger,debug,skipping,subdirectory,dir,get,absolute,path,because,the,application,is,not,allowed,to,read,the,directory,else,do,retrieve,matching,files,full,pattern,content,result,if,get,path,matcher,match,full,pattern,curr,path,result,add,content
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1328020251;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1329393628;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1356735495;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1357119239;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1362408075;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1367955086;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1368482696;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1398290095;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1398638841;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1403212152;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1408473285;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1411322184;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1411399863;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1429890013;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1432125256;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1450437477;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1454933923;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1456392313;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1458828017;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1461683397;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1467726769;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1467730834;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1479827130;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1479906097;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1487760984;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1489686949;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1493841539;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1495868221;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1496837955;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1498780456;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1502974979;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1506419389;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1509024507;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1513100167;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1519295386;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1519588127;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1520529117;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1529093369;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1530174524;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1532091916;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1540214029;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> public PathMatchingResourcePatternResolver();1549380778;Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader._<p>ClassLoader access will happen via the thread context class loader._@see org.springframework.core.io.DefaultResourceLoader;public PathMatchingResourcePatternResolver() {_		this.resourceLoader = new DefaultResourceLoader()__	};create,a,new,path,matching,resource,pattern,resolver,with,a,default,resource,loader,p,class,loader,access,will,happen,via,the,thread,context,class,loader,see,org,springframework,core,io,default,resource,loader;public,path,matching,resource,pattern,resolver,this,resource,loader,new,default,resource,loader
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1328020251;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1329393628;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1356735495;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1357119239;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1362408075;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1367955086;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1368482696;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1398290095;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1398638841;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1403212152;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1408473285;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1411322184;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1411399863;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1429890013;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1432125256;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1450437477;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1454933923;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1456392313;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1458828017;Resolve the specified resource for path matching._<p>The default implementation detects an Equinox OSGi "bundleresource:"_/ "bundleentry:" URL and resolves it into a standard jar file URL that_can be traversed using Spring's standard jar file traversal algorithm._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		if (equinoxResolveMethod != null) {_			URL url = original.getURL()__			if (url.getProtocol().startsWith("bundle")) {_				return new UrlResource((URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, url))__			}_		}_		return original__	};resolve,the,specified,resource,for,path,matching,p,the,default,implementation,detects,an,equinox,osgi,bundleresource,bundleentry,url,and,resolves,it,into,a,standard,jar,file,url,that,can,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,if,equinox,resolve,method,null,url,url,original,get,url,if,url,get,protocol,starts,with,bundle,return,new,url,resource,url,reflection,utils,invoke,method,equinox,resolve,method,null,url,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1461683397;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1467726769;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1467730834;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1479827130;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1479906097;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1487760984;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1489686949;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1493841539;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1495868221;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1496837955;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1498780456;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1502974979;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1506419389;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1509024507;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1513100167;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1519295386;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1519588127;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1520529117;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1529093369;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1530174524;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1532091916;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1540214029;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
PathMatchingResourcePatternResolver -> protected Resource resolveRootDirResource(Resource original) throws IOException;1549380778;Resolve the specified resource for path matching._<p>By default, Equinox OSGi "bundleresource:" / "bundleentry:" URL will be_resolved into a standard jar file URL that be traversed using Spring's_standard jar file traversal algorithm. For any preceding custom resolution,_override this method and replace the resource handle accordingly._@param original the resource to resolve_@return the resolved resource (may be identical to the passed-in resource)_@throws IOException in case of resolution failure;protected Resource resolveRootDirResource(Resource original) throws IOException {_		return original__	};resolve,the,specified,resource,for,path,matching,p,by,default,equinox,osgi,bundleresource,bundleentry,url,will,be,resolved,into,a,standard,jar,file,url,that,be,traversed,using,spring,s,standard,jar,file,traversal,algorithm,for,any,preceding,custom,resolution,override,this,method,and,replace,the,resource,handle,accordingly,param,original,the,resource,to,resolve,return,the,resolved,resource,may,be,identical,to,the,passed,in,resource,throws,ioexception,in,case,of,resolution,failure;protected,resource,resolve,root,dir,resource,resource,original,throws,ioexception,return,original
