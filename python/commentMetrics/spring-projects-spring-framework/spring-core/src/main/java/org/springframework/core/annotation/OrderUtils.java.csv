commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;4;/**  * Return the order on the specified {@code type}, or the specified  * default value if none can be found.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the priority value, or the specified default order if none can be found  * @since 5.0  * @see #getPriority(Class)  */ ;/**  * Return the order on the specified {@code type}, or the specified  * default value if none can be found.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the priority value, or the specified default order if none can be found  * @since 5.0  * @see #getPriority(Class)  */ public static int getOrder(Class<?> type, int defaultOrder) {     Integer order = getOrder(type).     return (order != null ? order : defaultOrder). }
true;public,static;2;5;/**  * Return the order on the specified {@code type}, or the specified  * default value if none can be found.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the priority value, or the specified default order if none can be found  * @see #getPriority(Class)  */ ;/**  * Return the order on the specified {@code type}, or the specified  * default value if none can be found.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the priority value, or the specified default order if none can be found  * @see #getPriority(Class)  */ @Nullable public static Integer getOrder(Class<?> type, @Nullable Integer defaultOrder) {     Integer order = getOrder(type).     return (order != null ? order : defaultOrder). }
true;public,static;1;17;/**  * Return the order on the specified {@code type}.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the order value, or {@code null} if none can be found  * @see #getPriority(Class)  */ ;/**  * Return the order on the specified {@code type}.  * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}.  * @param type the type to handle  * @return the order value, or {@code null} if none can be found  * @see #getPriority(Class)  */ @Nullable public static Integer getOrder(Class<?> type) {     Object cached = orderCache.get(type).     if (cached != null) {         return (cached instanceof Integer ? (Integer) cached : null).     }     Order order = AnnotationUtils.findAnnotation(type, Order.class).     Integer result.     if (order != null) {         result = order.value().     } else {         result = getPriority(type).     }     orderCache.put(type, (result != null ? result : NOT_ANNOTATED)).     return result. }
true;public,static;1;17;/**  * Return the value of the {@code javax.annotation.Priority} annotation  * declared on the specified type, or {@code null} if none.  * @param type the type to handle  * @return the priority value if the annotation is declared, or {@code null} if none  */ ;/**  * Return the value of the {@code javax.annotation.Priority} annotation  * declared on the specified type, or {@code null} if none.  * @param type the type to handle  * @return the priority value if the annotation is declared, or {@code null} if none  */ @Nullable public static Integer getPriority(Class<?> type) {     if (priorityAnnotationType == null) {         return null.     }     Object cached = priorityCache.get(type).     if (cached != null) {         return (cached instanceof Integer ? (Integer) cached : null).     }     Annotation priority = AnnotationUtils.findAnnotation(type, priorityAnnotationType).     Integer result = null.     if (priority != null) {         result = (Integer) AnnotationUtils.getValue(priority).     }     priorityCache.put(type, (result != null ? result : NOT_ANNOTATED)).     return result. }
