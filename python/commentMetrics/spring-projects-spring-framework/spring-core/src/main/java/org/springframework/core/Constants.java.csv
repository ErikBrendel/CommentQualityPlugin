# id;timestamp;commentText;codeText;commentWords;codeWords
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1328020251;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be <code>null</code>)_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : null)__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,code,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,null,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1337248826;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be <code>null</code>)_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,code,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1356735495;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1467730834;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1485175315;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException;1485810955;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public final String getClassName();1328020251;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1337248826;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1356735495;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1467730834;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1485175315;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1485810955;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1495868221;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1522103912;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public final String getClassName();1530174524;Return the name of the analyzed class.;public final String getClassName() {_		return this.className__	};return,the,name,of,the,analyzed,class;public,final,string,get,class,name,return,this,class,name
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1328020251;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>nameSuffix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be <code>null</code>)_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1337248826;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>nameSuffix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be <code>null</code>)_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1356735495;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1467730834;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1485175315;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(String nameSuffix);1485810955;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(@Nullable String nameSuffix);1495868221;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValuesForSuffix(@Nullable String nameSuffix);1522103912;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		this.fieldCache.forEach((code, value) -> {_			if (code.endsWith(suffixToUse)) {_				values.add(value)__			}_		})__		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,this,field,cache,for,each,code,value,if,code,ends,with,suffix,to,use,values,add,value,return,values
Constants -> public Set<Object> getValuesForSuffix(@Nullable String nameSuffix);1530174524;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValuesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		this.fieldCache.forEach((code, value) -> {_			if (code.endsWith(suffixToUse)) {_				values.add(value)__			}_		})__		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,this,field,cache,for,each,code,value,if,code,ends,with,suffix,to,use,values,add,value,return,values
Constants -> public Set<String> getNamesForProperty(String propertyName);1328020251;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1337248826;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1356735495;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1467730834;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1485175315;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1485810955;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1495868221;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1522103912;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNamesForProperty(String propertyName);1530174524;Return all names of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<String> getNamesForProperty(String propertyName) {_		return getNames(propertyToConstantNamePrefix(propertyName))__	};return,all,names,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,string,get,names,for,property,string,property,name,return,get,names,property,to,constant,name,prefix,property,name
Constants -> public Set<String> getNames(@Nullable String namePrefix);1495868221;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(@Nullable String namePrefix);1522103912;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(@Nullable String namePrefix);1530174524;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public String toCode(Object value, @Nullable String namePrefix) throws ConstantException;1495868221;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, @Nullable String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,nullable,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, @Nullable String namePrefix) throws ConstantException;1522103912;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, @Nullable String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,nullable,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, @Nullable String namePrefix) throws ConstantException;1530174524;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, @Nullable String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,nullable,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String propertyToConstantNamePrefix(String propertyName);1328020251;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_	  StringBuilder parsedPrefix = new StringBuilder()__	  for(int i = 0_ i < propertyName.length()_ i++) {_	    char c = propertyName.charAt(i)__	    if (Character.isUpperCase(c)) {_	      parsedPrefix.append("_")__	      parsedPrefix.append(c)__	    }_	    else {_	      parsedPrefix.append(Character.toUpperCase(c))__	    }_	  }_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1337248826;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_	  StringBuilder parsedPrefix = new StringBuilder()__	  for(int i = 0_ i < propertyName.length()_ i++) {_	    char c = propertyName.charAt(i)__	    if (Character.isUpperCase(c)) {_	      parsedPrefix.append("_")__	      parsedPrefix.append(c)__	    }_	    else {_	      parsedPrefix.append(Character.toUpperCase(c))__	    }_	  }_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1356735495;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1467730834;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1485175315;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1485810955;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1495868221;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1522103912;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public String propertyToConstantNamePrefix(String propertyName);1530174524;Convert the given bean property name to a constant name prefix._<p>Uses a common naming idiom: turning all lower case characters to_upper case, and prepending upper case characters with an underscore._<p>Example: "imageSize" -> "IMAGE_SIZE"<br>_Example: "imagesize" -> "IMAGESIZE".<br>_Example: "ImageSize" -> "_IMAGE_SIZE".<br>_Example: "IMAGESIZE" -> "_I_M_A_G_E_S_I_Z_E"_@param propertyName the name of the bean property_@return the corresponding constant name prefix_@see #getValuesForProperty_@see #toCodeForProperty;public String propertyToConstantNamePrefix(String propertyName) {_		StringBuilder parsedPrefix = new StringBuilder()__		for (int i = 0_ i < propertyName.length()_ i++) {_			char c = propertyName.charAt(i)__			if (Character.isUpperCase(c)) {_				parsedPrefix.append("_")__				parsedPrefix.append(c)__			}_			else {_				parsedPrefix.append(Character.toUpperCase(c))__			}_		}_		return parsedPrefix.toString()__	};convert,the,given,bean,property,name,to,a,constant,name,prefix,p,uses,a,common,naming,idiom,turning,all,lower,case,characters,to,upper,case,and,prepending,upper,case,characters,with,an,underscore,p,example,image,size,br,example,imagesize,imagesize,br,example,image,size,br,example,imagesize,param,property,name,the,name,of,the,bean,property,return,the,corresponding,constant,name,prefix,see,get,values,for,property,see,to,code,for,property;public,string,property,to,constant,name,prefix,string,property,name,string,builder,parsed,prefix,new,string,builder,for,int,i,0,i,property,name,length,i,char,c,property,name,char,at,i,if,character,is,upper,case,c,parsed,prefix,append,parsed,prefix,append,c,else,parsed,prefix,append,character,to,upper,case,c,return,parsed,prefix,to,string
Constants -> public Object asObject(String code) throws ConstantException;1328020251;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never <code>null</code>)_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,code,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1337248826;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never <code>null</code>)_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,code,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1356735495;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1467730834;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1485175315;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1485810955;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1495868221;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1522103912;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Object asObject(String code) throws ConstantException;1530174524;Parse the given String (upper or lower case accepted) and return_the appropriate value if it's the name of a constant field in the_class that we're analysing._@param code the name of the field (never {@code null})_@return the Object value_@throws ConstantException if there's no such field;public Object asObject(String code) throws ConstantException {_		Assert.notNull(code, "Code must not be null")__		String codeToUse = code.toUpperCase(Locale.ENGLISH)__		Object val = this.fieldCache.get(codeToUse)__		if (val == null) {_			throw new ConstantException(this.className, codeToUse, "not found")__		}_		return val__	};parse,the,given,string,upper,or,lower,case,accepted,and,return,the,appropriate,value,if,it,s,the,name,of,a,constant,field,in,the,class,that,we,re,analysing,param,code,the,name,of,the,field,never,code,null,return,the,object,value,throws,constant,exception,if,there,s,no,such,field;public,object,as,object,string,code,throws,constant,exception,assert,not,null,code,code,must,not,be,null,string,code,to,use,code,to,upper,case,locale,english,object,val,this,field,cache,get,code,to,use,if,val,null,throw,new,constant,exception,this,class,name,code,to,use,not,found,return,val
Constants -> public Set<Object> getValues(@Nullable String namePrefix);1495868221;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(@Nullable String namePrefix);1522103912;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		this.fieldCache.forEach((code, value) -> {_			if (code.startsWith(prefixToUse)) {_				values.add(value)__			}_		})__		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,this,field,cache,for,each,code,value,if,code,starts,with,prefix,to,use,values,add,value,return,values
Constants -> public Set<Object> getValues(@Nullable String namePrefix);1530174524;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(@Nullable String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		this.fieldCache.forEach((code, value) -> {_			if (code.startsWith(prefixToUse)) {_				values.add(value)__			}_		})__		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,nullable,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,this,field,cache,for,each,code,value,if,code,starts,with,prefix,to,use,values,add,value,return,values
Constants -> public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException;1495868221;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,nullable,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException;1522103912;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,nullable,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException;1530174524;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, suffixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,for,suffix,object,value,nullable,string,name,suffix,throws,constant,exception,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,ends,with,suffix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,suffix,to,use,value
Constants -> public String asString(String code) throws ConstantException;1328020251;Return a constant value as a String._@param code the name of the field (never <code>null</code>)_@return the String value_Works even if it's not a string (invokes <code>toString()</code>)._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,code,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,code,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1337248826;Return a constant value as a String._@param code the name of the field (never <code>null</code>)_@return the String value_Works even if it's not a string (invokes <code>toString()</code>)._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,code,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,code,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1356735495;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1467730834;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1485175315;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1485810955;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1495868221;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1522103912;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@see #asObject_@throws ConstantException if the field name wasn't found;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> public String asString(String code) throws ConstantException;1530174524;Return a constant value as a String._@param code the name of the field (never {@code null})_@return the String value_Works even if it's not a string (invokes {@code toString()})._@throws ConstantException if the field name wasn't found_@see #asObject;public String asString(String code) throws ConstantException {_		return asObject(code).toString()__	};return,a,constant,value,as,a,string,param,code,the,name,of,the,field,never,code,null,return,the,string,value,works,even,if,it,s,not,a,string,invokes,code,to,string,throws,constant,exception,if,the,field,name,wasn,t,found,see,as,object;public,string,as,string,string,code,throws,constant,exception,return,as,object,code,to,string
Constants -> ConstantException -> public ConstantException(String className, String field, String message);1485175315;Thrown when an invalid constant name is requested._@param className name of the class containing the constant definitions_@param field invalid constant name_@param message description of the problem;public ConstantException(String className, String field, String message) {_			super("Field '" + field + "' " + message + " in class [" + className + "]")__		};thrown,when,an,invalid,constant,name,is,requested,param,class,name,name,of,the,class,containing,the,constant,definitions,param,field,invalid,constant,name,param,message,description,of,the,problem;public,constant,exception,string,class,name,string,field,string,message,super,field,field,message,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String field, String message);1485810955;Thrown when an invalid constant name is requested._@param className name of the class containing the constant definitions_@param field invalid constant name_@param message description of the problem;public ConstantException(String className, String field, String message) {_			super("Field '" + field + "' " + message + " in class [" + className + "]")__		};thrown,when,an,invalid,constant,name,is,requested,param,class,name,name,of,the,class,containing,the,constant,definitions,param,field,invalid,constant,name,param,message,description,of,the,problem;public,constant,exception,string,class,name,string,field,string,message,super,field,field,message,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String field, String message);1495868221;Thrown when an invalid constant name is requested._@param className name of the class containing the constant definitions_@param field invalid constant name_@param message description of the problem;public ConstantException(String className, String field, String message) {_			super("Field '" + field + "' " + message + " in class [" + className + "]")__		};thrown,when,an,invalid,constant,name,is,requested,param,class,name,name,of,the,class,containing,the,constant,definitions,param,field,invalid,constant,name,param,message,description,of,the,problem;public,constant,exception,string,class,name,string,field,string,message,super,field,field,message,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String field, String message);1522103912;Thrown when an invalid constant name is requested._@param className name of the class containing the constant definitions_@param field invalid constant name_@param message description of the problem;public ConstantException(String className, String field, String message) {_			super("Field '" + field + "' " + message + " in class [" + className + "]")__		};thrown,when,an,invalid,constant,name,is,requested,param,class,name,name,of,the,class,containing,the,constant,definitions,param,field,invalid,constant,name,param,message,description,of,the,problem;public,constant,exception,string,class,name,string,field,string,message,super,field,field,message,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String field, String message);1530174524;Thrown when an invalid constant name is requested._@param className name of the class containing the constant definitions_@param field invalid constant name_@param message description of the problem;public ConstantException(String className, String field, String message) {_			super("Field '" + field + "' " + message + " in class [" + className + "]")__		};thrown,when,an,invalid,constant,name,is,requested,param,class,name,name,of,the,class,containing,the,constant,definitions,param,field,invalid,constant,name,param,message,description,of,the,problem;public,constant,exception,string,class,name,string,field,string,message,super,field,field,message,in,class,class,name
Constants -> public Number asNumber(String code) throws ConstantException;1328020251;Return a constant value cast to a Number._@param code the name of the field (never <code>null</code>)_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,code,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1337248826;Return a constant value cast to a Number._@param code the name of the field (never <code>null</code>)_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,code,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1356735495;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1467730834;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1485175315;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1485810955;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1495868221;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1522103912;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@see #asObject_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,see,as,object,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public Number asNumber(String code) throws ConstantException;1530174524;Return a constant value cast to a Number._@param code the name of the field (never {@code null})_@return the Number value_@throws ConstantException if the field name wasn't found_or if the type wasn't compatible with Number_@see #asObject;public Number asNumber(String code) throws ConstantException {_		Object obj = asObject(code)__		if (!(obj instanceof Number)) {_			throw new ConstantException(this.className, code, "not a Number")__		}_		return (Number) obj__	};return,a,constant,value,cast,to,a,number,param,code,the,name,of,the,field,never,code,null,return,the,number,value,throws,constant,exception,if,the,field,name,wasn,t,found,or,if,the,type,wasn,t,compatible,with,number,see,as,object;public,number,as,number,string,code,throws,constant,exception,object,obj,as,object,code,if,obj,instanceof,number,throw,new,constant,exception,this,class,name,code,not,a,number,return,number,obj
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1328020251;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1337248826;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1356735495;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1467730834;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1485175315;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1485810955;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1495868221;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1522103912;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public String toCodeForProperty(Object value, String propertyName) throws ConstantException;1530174524;Look up the given value within the group of constants for_the given bean property name. Will return the first match._@param value constant value to look up_@param propertyName the name of the bean property_@return the name of the constant field_@throws ConstantException if the value wasn't found_@see #propertyToConstantNamePrefix;public String toCodeForProperty(Object value, String propertyName) throws ConstantException {_		return toCode(value, propertyToConstantNamePrefix(propertyName))__	};look,up,the,given,value,within,the,group,of,constants,for,the,given,bean,property,name,will,return,the,first,match,param,value,constant,value,to,look,up,param,property,name,the,name,of,the,bean,property,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found,see,property,to,constant,name,prefix;public,string,to,code,for,property,object,value,string,property,name,throws,constant,exception,return,to,code,value,property,to,constant,name,prefix,property,name
Constants -> public Constants(Class<?> clazz);1337248826;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied <code>clazz</code> is <code>null</code>;public Constants(Class<?> clazz) {_		Assert.notNull(clazz)__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,code,is,code,null,code;public,constants,class,clazz,assert,not,null,clazz,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1356735495;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz)__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1467730834;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz)__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1485175315;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz)__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1485810955;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,class,must,not,be,null,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1495868221;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,class,must,not,be,null,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1522103912;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,class,must,not,be,null,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public Constants(Class<?> clazz);1530174524;Create a new Constants converter class wrapping the given class._<p>All <b>public</b> static final variables will be exposed, whatever their type._@param clazz the class to analyze_@throws IllegalArgumentException if the supplied {@code clazz} is {@code null};public Constants(Class<?> clazz) {_		Assert.notNull(clazz, "Class must not be null")__		this.className = clazz.getName()__		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (ReflectionUtils.isPublicStaticFinal(field)) {_				String name = field.getName()__				try {_					Object value = field.get(null)__					this.fieldCache.put(name, value)__				}_				catch (IllegalAccessException ex) {_					_				}_			}_		}_	};create,a,new,constants,converter,class,wrapping,the,given,class,p,all,b,public,b,static,final,variables,will,be,exposed,whatever,their,type,param,clazz,the,class,to,analyze,throws,illegal,argument,exception,if,the,supplied,code,clazz,is,code,null;public,constants,class,clazz,assert,not,null,clazz,class,must,not,be,null,this,class,name,clazz,get,name,field,fields,clazz,get,fields,for,field,field,fields,if,reflection,utils,is,public,static,final,field,string,name,field,get,name,try,object,value,field,get,null,this,field,cache,put,name,value,catch,illegal,access,exception,ex
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1328020251;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : null)__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,null,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1337248826;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1356735495;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1467730834;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1485175315;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> public String toCode(Object value, String namePrefix) throws ConstantException;1485810955;Look up the given value within the given group of constants._<p>Will return the first match._@param value constant value to look up_@param namePrefix prefix of the constant names to search (may be {@code null})_@return the name of the constant field_@throws ConstantException if the value wasn't found;public String toCode(Object value, String namePrefix) throws ConstantException {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {_			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {_				return entry.getKey()__			}_		}_		throw new ConstantException(this.className, prefixToUse, value)__	};look,up,the,given,value,within,the,given,group,of,constants,p,will,return,the,first,match,param,value,constant,value,to,look,up,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,name,of,the,constant,field,throws,constant,exception,if,the,value,wasn,t,found;public,string,to,code,object,value,string,name,prefix,throws,constant,exception,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,for,map,entry,string,object,entry,this,field,cache,entry,set,if,entry,get,key,starts,with,prefix,to,use,entry,get,value,equals,value,return,entry,get,key,throw,new,constant,exception,this,class,name,prefix,to,use,value
Constants -> protected final Map<String, Object> getFieldCache();1328020251;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1337248826;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1356735495;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1467730834;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1485175315;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1485810955;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1495868221;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1522103912;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> protected final Map<String, Object> getFieldCache();1530174524;Exposes the field cache to subclasses:_a Map from String field name to object value.;protected final Map<String, Object> getFieldCache() {_		return this.fieldCache__	};exposes,the,field,cache,to,subclasses,a,map,from,string,field,name,to,object,value;protected,final,map,string,object,get,field,cache,return,this,field,cache
Constants -> public Set<String> getNamesForSuffix(@Nullable String nameSuffix);1495868221;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(@Nullable String nameSuffix);1522103912;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(@Nullable String nameSuffix);1530174524;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(@Nullable String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,nullable,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<Object> getValues(String namePrefix);1328020251;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>namePrefix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(String namePrefix);1337248826;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>namePrefix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(String namePrefix);1356735495;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<Object>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,object,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(String namePrefix);1467730834;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(String namePrefix);1485175315;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> public Set<Object> getValues(String namePrefix);1485810955;Return all values of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of values;public Set<Object> getValues(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<Object> values = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				values.add(this.fieldCache.get(code))__			}_		}_		return values__	};return,all,values,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,values;public,set,object,get,values,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,object,values,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,values,add,this,field,cache,get,code,return,values
Constants -> ConstantException -> public ConstantException(String className, String namePrefix, Object value);1485175315;Thrown when an invalid constant value is looked up._@param className name of the class containing the constant definitions_@param namePrefix prefix of the searched constant names_@param value the looked up constant value;public ConstantException(String className, String namePrefix, Object value) {_			super("No '" + namePrefix + "' field with value '" + value + "' found in class [" + className + "]")__		};thrown,when,an,invalid,constant,value,is,looked,up,param,class,name,name,of,the,class,containing,the,constant,definitions,param,name,prefix,prefix,of,the,searched,constant,names,param,value,the,looked,up,constant,value;public,constant,exception,string,class,name,string,name,prefix,object,value,super,no,name,prefix,field,with,value,value,found,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String namePrefix, Object value);1485810955;Thrown when an invalid constant value is looked up._@param className name of the class containing the constant definitions_@param namePrefix prefix of the searched constant names_@param value the looked up constant value;public ConstantException(String className, String namePrefix, Object value) {_			super("No '" + namePrefix + "' field with value '" + value + "' found in class [" + className + "]")__		};thrown,when,an,invalid,constant,value,is,looked,up,param,class,name,name,of,the,class,containing,the,constant,definitions,param,name,prefix,prefix,of,the,searched,constant,names,param,value,the,looked,up,constant,value;public,constant,exception,string,class,name,string,name,prefix,object,value,super,no,name,prefix,field,with,value,value,found,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String namePrefix, Object value);1495868221;Thrown when an invalid constant value is looked up._@param className name of the class containing the constant definitions_@param namePrefix prefix of the searched constant names_@param value the looked up constant value;public ConstantException(String className, String namePrefix, Object value) {_			super("No '" + namePrefix + "' field with value '" + value + "' found in class [" + className + "]")__		};thrown,when,an,invalid,constant,value,is,looked,up,param,class,name,name,of,the,class,containing,the,constant,definitions,param,name,prefix,prefix,of,the,searched,constant,names,param,value,the,looked,up,constant,value;public,constant,exception,string,class,name,string,name,prefix,object,value,super,no,name,prefix,field,with,value,value,found,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String namePrefix, Object value);1522103912;Thrown when an invalid constant value is looked up._@param className name of the class containing the constant definitions_@param namePrefix prefix of the searched constant names_@param value the looked up constant value;public ConstantException(String className, String namePrefix, Object value) {_			super("No '" + namePrefix + "' field with value '" + value + "' found in class [" + className + "]")__		};thrown,when,an,invalid,constant,value,is,looked,up,param,class,name,name,of,the,class,containing,the,constant,definitions,param,name,prefix,prefix,of,the,searched,constant,names,param,value,the,looked,up,constant,value;public,constant,exception,string,class,name,string,name,prefix,object,value,super,no,name,prefix,field,with,value,value,found,in,class,class,name
Constants -> ConstantException -> public ConstantException(String className, String namePrefix, Object value);1530174524;Thrown when an invalid constant value is looked up._@param className name of the class containing the constant definitions_@param namePrefix prefix of the searched constant names_@param value the looked up constant value;public ConstantException(String className, String namePrefix, Object value) {_			super("No '" + namePrefix + "' field with value '" + value + "' found in class [" + className + "]")__		};thrown,when,an,invalid,constant,value,is,looked,up,param,class,name,name,of,the,class,containing,the,constant,definitions,param,name,prefix,prefix,of,the,searched,constant,names,param,value,the,looked,up,constant,value;public,constant,exception,string,class,name,string,name,prefix,object,value,super,no,name,prefix,field,with,value,value,found,in,class,class,name
Constants -> public Set<String> getNames(String namePrefix);1328020251;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>namePrefix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<String>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,string,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(String namePrefix);1337248826;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>namePrefix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be <code>null</code>)_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<String>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,string,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(String namePrefix);1356735495;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<String>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,string,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(String namePrefix);1467730834;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(String namePrefix);1485175315;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNames(String namePrefix);1485810955;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code namePrefix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param namePrefix prefix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNames(String namePrefix) {_		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.startsWith(prefixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,prefix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,prefix,prefix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,string,name,prefix,string,prefix,to,use,name,prefix,null,name,prefix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,starts,with,prefix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(String nameSuffix);1337248826;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied <code>nameSuffix</code>_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be <code>null</code>)_@return the set of constant names;public Set<String> getNamesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<String>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,code,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,code,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,string,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(String nameSuffix);1356735495;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<String>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,string,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(String nameSuffix);1467730834;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(String nameSuffix);1485175315;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public Set<String> getNamesForSuffix(String nameSuffix);1485810955;Return all names of the given group of constants._<p>Note that this method assumes that constants are named_in accordance with the standard Java convention for constant_values (i.e. all uppercase). The supplied {@code nameSuffix}_will be uppercased (in a locale-insensitive fashion) prior to_the main logic of this method kicking in._@param nameSuffix suffix of the constant names to search (may be {@code null})_@return the set of constant names;public Set<String> getNamesForSuffix(String nameSuffix) {_		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : "")__		Set<String> names = new HashSet<>()__		for (String code : this.fieldCache.keySet()) {_			if (code.endsWith(suffixToUse)) {_				names.add(code)__			}_		}_		return names__	};return,all,names,of,the,given,group,of,constants,p,note,that,this,method,assumes,that,constants,are,named,in,accordance,with,the,standard,java,convention,for,constant,values,i,e,all,uppercase,the,supplied,code,name,suffix,will,be,uppercased,in,a,locale,insensitive,fashion,prior,to,the,main,logic,of,this,method,kicking,in,param,name,suffix,suffix,of,the,constant,names,to,search,may,be,code,null,return,the,set,of,constant,names;public,set,string,get,names,for,suffix,string,name,suffix,string,suffix,to,use,name,suffix,null,name,suffix,trim,to,upper,case,locale,english,set,string,names,new,hash,set,for,string,code,this,field,cache,key,set,if,code,ends,with,suffix,to,use,names,add,code,return,names
Constants -> public final int getSize();1328020251;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1337248826;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1356735495;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1467730834;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1485175315;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1485810955;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1495868221;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1522103912;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public final int getSize();1530174524;Return the number of constants exposed.;public final int getSize() {_		return this.fieldCache.size()__	};return,the,number,of,constants,exposed;public,final,int,get,size,return,this,field,cache,size
Constants -> public Set<Object> getValuesForProperty(String propertyName);1328020251;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1337248826;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1356735495;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1467730834;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1485175315;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1485810955;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1495868221;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1522103912;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
Constants -> public Set<Object> getValuesForProperty(String propertyName);1530174524;Return all values of the group of constants for the_given bean property name._@param propertyName the name of the bean property_@return the set of values_@see #propertyToConstantNamePrefix;public Set<Object> getValuesForProperty(String propertyName) {_		return getValues(propertyToConstantNamePrefix(propertyName))__	};return,all,values,of,the,group,of,constants,for,the,given,bean,property,name,param,property,name,the,name,of,the,bean,property,return,the,set,of,values,see,property,to,constant,name,prefix;public,set,object,get,values,for,property,string,property,name,return,get,values,property,to,constant,name,prefix,property,name
