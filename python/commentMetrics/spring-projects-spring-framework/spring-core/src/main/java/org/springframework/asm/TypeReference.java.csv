commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns a type reference of the given sort.  *  * @param sort one of {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link  *     #LOCAL_VARIABLE}, {@link #RESOURCE_VARIABLE}, {@link #INSTANCEOF}, {@link #NEW}, {@link  *     #CONSTRUCTOR_REFERENCE}, or {@link #METHOD_REFERENCE}.  * @return a type reference of the given sort.  */ ;/**  * Returns a type reference of the given sort.  *  * @param sort one of {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link  *     #LOCAL_VARIABLE}, {@link #RESOURCE_VARIABLE}, {@link #INSTANCEOF}, {@link #NEW}, {@link  *     #CONSTRUCTOR_REFERENCE}, or {@link #METHOD_REFERENCE}.  * @return a type reference of the given sort.  */ public static TypeReference newTypeReference(final int sort) {     return new TypeReference(sort << 24). }
true;public,static;2;3;/**  * Returns a reference to a type parameter of a generic class or method.  *  * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.  * @param paramIndex the type parameter index.  * @return a reference to the given generic class or method type parameter.  */ ;/**  * Returns a reference to a type parameter of a generic class or method.  *  * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.  * @param paramIndex the type parameter index.  * @return a reference to the given generic class or method type parameter.  */ public static TypeReference newTypeParameterReference(final int sort, final int paramIndex) {     return new TypeReference((sort << 24) | (paramIndex << 16)). }
true;public,static;3;4;/**  * Returns a reference to a type parameter bound of a generic class or method.  *  * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.  * @param paramIndex the type parameter index.  * @param boundIndex the type bound index within the above type parameters.  * @return a reference to the given generic class or method type parameter bound.  */ ;/**  * Returns a reference to a type parameter bound of a generic class or method.  *  * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.  * @param paramIndex the type parameter index.  * @param boundIndex the type bound index within the above type parameters.  * @return a reference to the given generic class or method type parameter bound.  */ public static TypeReference newTypeParameterBoundReference(final int sort, final int paramIndex, final int boundIndex) {     return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8)). }
true;public,static;1;3;/**  * Returns a reference to the super class or to an interface of the 'implements' clause of a  * class.  *  * @param itfIndex the index of an interface in the 'implements' clause of a class, or -1 to  *     reference the super class of the class.  * @return a reference to the given super type of a class.  */ ;/**  * Returns a reference to the super class or to an interface of the 'implements' clause of a  * class.  *  * @param itfIndex the index of an interface in the 'implements' clause of a class, or -1 to  *     reference the super class of the class.  * @return a reference to the given super type of a class.  */ public static TypeReference newSuperTypeReference(final int itfIndex) {     return new TypeReference((CLASS_EXTENDS << 24) | ((itfIndex & 0xFFFF) << 8)). }
true;public,static;1;3;/**  * Returns a reference to the type of a formal parameter of a method.  *  * @param paramIndex the formal parameter index.  * @return a reference to the type of the given method formal parameter.  */ ;/**  * Returns a reference to the type of a formal parameter of a method.  *  * @param paramIndex the formal parameter index.  * @return a reference to the type of the given method formal parameter.  */ public static TypeReference newFormalParameterReference(final int paramIndex) {     return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16)). }
true;public,static;1;3;/**  * Returns a reference to the type of an exception, in a 'throws' clause of a method.  *  * @param exceptionIndex the index of an exception in a 'throws' clause of a method.  * @return a reference to the type of the given exception.  */ ;/**  * Returns a reference to the type of an exception, in a 'throws' clause of a method.  *  * @param exceptionIndex the index of an exception in a 'throws' clause of a method.  * @return a reference to the type of the given exception.  */ public static TypeReference newExceptionReference(final int exceptionIndex) {     return new TypeReference((THROWS << 24) | (exceptionIndex << 8)). }
true;public,static;1;3;/**  * Returns a reference to the type of the exception declared in a 'catch' clause of a method.  *  * @param tryCatchBlockIndex the index of a try catch block (using the order in which they are  *     visited with visitTryCatchBlock).  * @return a reference to the type of the given exception.  */ ;/**  * Returns a reference to the type of the exception declared in a 'catch' clause of a method.  *  * @param tryCatchBlockIndex the index of a try catch block (using the order in which they are  *     visited with visitTryCatchBlock).  * @return a reference to the type of the given exception.  */ public static TypeReference newTryCatchReference(final int tryCatchBlockIndex) {     return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8)). }
true;public,static;2;3;/**  * Returns a reference to the type of a type argument in a constructor or method call or  * reference.  *  * @param sort one of {@link #CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link  *     #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link  *     #METHOD_REFERENCE_TYPE_ARGUMENT}.  * @param argIndex the type argument index.  * @return a reference to the type of the given type argument.  */ ;/**  * Returns a reference to the type of a type argument in a constructor or method call or  * reference.  *  * @param sort one of {@link #CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link  *     #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link  *     #METHOD_REFERENCE_TYPE_ARGUMENT}.  * @param argIndex the type argument index.  * @return a reference to the type of the given type argument.  */ public static TypeReference newTypeArgumentReference(final int sort, final int argIndex) {     return new TypeReference((sort << 24) | argIndex). }
true;public;0;3;/**  * Returns the sort of this type reference.  *  * @return one of {@link #CLASS_TYPE_PARAMETER}, {@link #METHOD_TYPE_PARAMETER}, {@link  *     #CLASS_EXTENDS}, {@link #CLASS_TYPE_PARAMETER_BOUND}, {@link #METHOD_TYPE_PARAMETER_BOUND},  *     {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link  *     #METHOD_FORMAL_PARAMETER}, {@link #THROWS}, {@link #LOCAL_VARIABLE}, {@link  *     #RESOURCE_VARIABLE}, {@link #EXCEPTION_PARAMETER}, {@link #INSTANCEOF}, {@link #NEW},  *     {@link #CONSTRUCTOR_REFERENCE}, {@link #METHOD_REFERENCE}, {@link #CAST}, {@link  *     #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link  *     #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.  */ ;/**  * Returns the sort of this type reference.  *  * @return one of {@link #CLASS_TYPE_PARAMETER}, {@link #METHOD_TYPE_PARAMETER}, {@link  *     #CLASS_EXTENDS}, {@link #CLASS_TYPE_PARAMETER_BOUND}, {@link #METHOD_TYPE_PARAMETER_BOUND},  *     {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link  *     #METHOD_FORMAL_PARAMETER}, {@link #THROWS}, {@link #LOCAL_VARIABLE}, {@link  *     #RESOURCE_VARIABLE}, {@link #EXCEPTION_PARAMETER}, {@link #INSTANCEOF}, {@link #NEW},  *     {@link #CONSTRUCTOR_REFERENCE}, {@link #METHOD_REFERENCE}, {@link #CAST}, {@link  *     #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link  *     #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.  */ public int getSort() {     return targetTypeAndInfo >>> 24. }
true;public;0;3;/**  * Returns the index of the type parameter referenced by this type reference. This method must  * only be used for type references whose sort is {@link #CLASS_TYPE_PARAMETER}, {@link  * #METHOD_TYPE_PARAMETER}, {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link  * #METHOD_TYPE_PARAMETER_BOUND}.  *  * @return a type parameter index.  */ ;/**  * Returns the index of the type parameter referenced by this type reference. This method must  * only be used for type references whose sort is {@link #CLASS_TYPE_PARAMETER}, {@link  * #METHOD_TYPE_PARAMETER}, {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link  * #METHOD_TYPE_PARAMETER_BOUND}.  *  * @return a type parameter index.  */ public int getTypeParameterIndex() {     return (targetTypeAndInfo & 0x00FF0000) >> 16. }
true;public;0;3;/**  * Returns the index of the type parameter bound, within the type parameter {@link  * #getTypeParameterIndex}, referenced by this type reference. This method must only be used for  * type references whose sort is {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link  * #METHOD_TYPE_PARAMETER_BOUND}.  *  * @return a type parameter bound index.  */ ;/**  * Returns the index of the type parameter bound, within the type parameter {@link  * #getTypeParameterIndex}, referenced by this type reference. This method must only be used for  * type references whose sort is {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link  * #METHOD_TYPE_PARAMETER_BOUND}.  *  * @return a type parameter bound index.  */ public int getTypeParameterBoundIndex() {     return (targetTypeAndInfo & 0x0000FF00) >> 8. }
true;public;0;3;/**  * Returns the index of the "super type" of a class that is referenced by this type reference.  * This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.  *  * @return the index of an interface in the 'implements' clause of a class, or -1 if this type  *     reference references the type of the super class.  */ ;/**  * Returns the index of the "super type" of a class that is referenced by this type reference.  * This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.  *  * @return the index of an interface in the 'implements' clause of a class, or -1 if this type  *     reference references the type of the super class.  */ public int getSuperTypeIndex() {     return (short) ((targetTypeAndInfo & 0x00FFFF00) >> 8). }
true;public;0;3;/**  * Returns the index of the formal parameter whose type is referenced by this type reference. This  * method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.  *  * @return a formal parameter index.  */ ;/**  * Returns the index of the formal parameter whose type is referenced by this type reference. This  * method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.  *  * @return a formal parameter index.  */ public int getFormalParameterIndex() {     return (targetTypeAndInfo & 0x00FF0000) >> 16. }
true;public;0;3;/**  * Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced  * by this type reference. This method must only be used for type references whose sort is {@link  * #THROWS}.  *  * @return the index of an exception in the 'throws' clause of a method.  */ ;/**  * Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced  * by this type reference. This method must only be used for type references whose sort is {@link  * #THROWS}.  *  * @return the index of an exception in the 'throws' clause of a method.  */ public int getExceptionIndex() {     return (targetTypeAndInfo & 0x00FFFF00) >> 8. }
true;public;0;3;/**  * Returns the index of the try catch block (using the order in which they are visited with  * visitTryCatchBlock), whose 'catch' type is referenced by this type reference. This method must  * only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .  *  * @return the index of an exception in the 'throws' clause of a method.  */ ;/**  * Returns the index of the try catch block (using the order in which they are visited with  * visitTryCatchBlock), whose 'catch' type is referenced by this type reference. This method must  * only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .  *  * @return the index of an exception in the 'throws' clause of a method.  */ public int getTryCatchBlockIndex() {     return (targetTypeAndInfo & 0x00FFFF00) >> 8. }
true;public;0;3;/**  * Returns the index of the type argument referenced by this type reference. This method must only  * be used for type references whose sort is {@link #CAST}, {@link  * #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link  * #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.  *  * @return a type parameter index.  */ ;/**  * Returns the index of the type argument referenced by this type reference. This method must only  * be used for type references whose sort is {@link #CAST}, {@link  * #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link  * #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.  *  * @return a type parameter index.  */ public int getTypeArgumentIndex() {     return targetTypeAndInfo & 0xFF. }
true;public;0;3;/**  * Returns the int encoded value of this type reference, suitable for use in visit methods related  * to type annotations, like visitTypeAnnotation.  *  * @return the int encoded value of this type reference.  */ ;/**  * Returns the int encoded value of this type reference, suitable for use in visit methods related  * to type annotations, like visitTypeAnnotation.  *  * @return the int encoded value of this type reference.  */ public int getValue() {     return targetTypeAndInfo. }
true;static;2;34;/**  * Puts the given target_type and target_info JVMS structures into the given ByteVector.  *  * @param targetTypeAndInfo a target_type and a target_info structures encoded as in {@link  *     #targetTypeAndInfo}. LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.  * @param output where the type reference must be put.  */ ;/**  * Puts the given target_type and target_info JVMS structures into the given ByteVector.  *  * @param targetTypeAndInfo a target_type and a target_info structures encoded as in {@link  *     #targetTypeAndInfo}. LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.  * @param output where the type reference must be put.  */ static void putTarget(final int targetTypeAndInfo, final ByteVector output) {     switch(targetTypeAndInfo >>> 24) {         case CLASS_TYPE_PARAMETER:         case METHOD_TYPE_PARAMETER:         case METHOD_FORMAL_PARAMETER:             output.putShort(targetTypeAndInfo >>> 16).             break.         case FIELD:         case METHOD_RETURN:         case METHOD_RECEIVER:             output.putByte(targetTypeAndInfo >>> 24).             break.         case CAST:         case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:         case METHOD_INVOCATION_TYPE_ARGUMENT:         case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:         case METHOD_REFERENCE_TYPE_ARGUMENT:             output.putInt(targetTypeAndInfo).             break.         case CLASS_EXTENDS:         case CLASS_TYPE_PARAMETER_BOUND:         case METHOD_TYPE_PARAMETER_BOUND:         case THROWS:         case EXCEPTION_PARAMETER:         case INSTANCEOF:         case NEW:         case CONSTRUCTOR_REFERENCE:         case METHOD_REFERENCE:             output.put12(targetTypeAndInfo >>> 24, (targetTypeAndInfo & 0xFFFF00) >> 8).             break.         default:             throw new IllegalArgumentException().     } }
