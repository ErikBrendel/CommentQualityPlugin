# id;timestamp;commentText;codeText;commentWords;codeWords
LogFormatUtils -> public static String formatValue(@Nullable Object value, boolean limitLength);1536962806;Format the given value via {@code toString()}, quoting it if it is a_{@link CharSequence}, and possibly truncating at 100 if limitLength is_set to true._@param value the value to format_@param limitLength whether to truncate large formatted values (over 100)._@return the formatted value_@since 5.1;public static String formatValue(@Nullable Object value, boolean limitLength) {_		if (value == null) {_			return ""__		}_		String s = value instanceof CharSequence ? "\"" + value + "\"" : value.toString()__		return limitLength && s.length() > 100 ? s.substring(0, 100) + " (truncated)..." : s__	};format,the,given,value,via,code,to,string,quoting,it,if,it,is,a,link,char,sequence,and,possibly,truncating,at,100,if,limit,length,is,set,to,true,param,value,the,value,to,format,param,limit,length,whether,to,truncate,large,formatted,values,over,100,return,the,formatted,value,since,5,1;public,static,string,format,value,nullable,object,value,boolean,limit,length,if,value,null,return,string,s,value,instanceof,char,sequence,value,value,to,string,return,limit,length,s,length,100,s,substring,0,100,truncated,s
LogFormatUtils -> public static String formatValue(@Nullable Object value, boolean limitLength);1536963437;Format the given value via {@code toString()}, quoting it if it is a_{@link CharSequence}, and possibly truncating at 100 if limitLength is_set to true._@param value the value to format_@param limitLength whether to truncate large formatted values (over 100)_@return the formatted value_@since 5.1;public static String formatValue(@Nullable Object value, boolean limitLength) {_		if (value == null) {_			return ""__		}_		String s = (value instanceof CharSequence ? "\"" + value + "\"" : value.toString())__		return (limitLength && s.length() > 100 ? s.substring(0, 100) + " (truncated)..." : s)__	};format,the,given,value,via,code,to,string,quoting,it,if,it,is,a,link,char,sequence,and,possibly,truncating,at,100,if,limit,length,is,set,to,true,param,value,the,value,to,format,param,limit,length,whether,to,truncate,large,formatted,values,over,100,return,the,formatted,value,since,5,1;public,static,string,format,value,nullable,object,value,boolean,limit,length,if,value,null,return,string,s,value,instanceof,char,sequence,value,value,to,string,return,limit,length,s,length,100,s,substring,0,100,truncated,s
LogFormatUtils -> public static String formatValue(@Nullable Object value, boolean limitLength);1537372445;Format the given value via {@code toString()}, quoting it if it is a_{@link CharSequence}, and possibly truncating at 100 if limitLength is_set to true._@param value the value to format_@param limitLength whether to truncate large formatted values (over 100)_@return the formatted value_@since 5.1;public static String formatValue(@Nullable Object value, boolean limitLength) {_		if (value == null) {_			return ""__		}_		String s = (value instanceof CharSequence ? "\"" + value + "\"" : value.toString())__		return (limitLength && s.length() > 100 ? s.substring(0, 100) + " (truncated)..." : s)__	};format,the,given,value,via,code,to,string,quoting,it,if,it,is,a,link,char,sequence,and,possibly,truncating,at,100,if,limit,length,is,set,to,true,param,value,the,value,to,format,param,limit,length,whether,to,truncate,large,formatted,values,over,100,return,the,formatted,value,since,5,1;public,static,string,format,value,nullable,object,value,boolean,limit,length,if,value,null,return,string,s,value,instanceof,char,sequence,value,value,to,string,return,limit,length,s,length,100,s,substring,0,100,truncated,s
LogFormatUtils -> public static String formatValue(@Nullable Object value, boolean limitLength);1539878672;Format the given value via {@code toString()}, quoting it if it is a_{@link CharSequence}, and possibly truncating at 100 if limitLength is_set to true._@param value the value to format_@param limitLength whether to truncate large formatted values (over 100)_@return the formatted value;public static String formatValue(@Nullable Object value, boolean limitLength) {_		if (value == null) {_			return ""__		}_		String str__		if (value instanceof CharSequence) {_			str = "\"" + value + "\""__		}_		else {_			try {_				str = value.toString()__			}_			catch (Throwable ex) {_				str = ex.toString()__			}_		}_		return (limitLength && str.length() > 100 ? str.substring(0, 100) + " (truncated)..." : str)__	};format,the,given,value,via,code,to,string,quoting,it,if,it,is,a,link,char,sequence,and,possibly,truncating,at,100,if,limit,length,is,set,to,true,param,value,the,value,to,format,param,limit,length,whether,to,truncate,large,formatted,values,over,100,return,the,formatted,value;public,static,string,format,value,nullable,object,value,boolean,limit,length,if,value,null,return,string,str,if,value,instanceof,char,sequence,str,value,else,try,str,value,to,string,catch,throwable,ex,str,ex,to,string,return,limit,length,str,length,100,str,substring,0,100,truncated,str
LogFormatUtils -> public static void traceDebug(Log logger, Function<Boolean, String> messageFactory);1536962806;Use this to log a message with different levels of detail (or different_messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:_<pre class="code">_if (logger.isDebugEnabled()) {_String s = logger.isTraceEnabled() ? "..." : "..."__if (logger.isTraceEnabled()) {_logger.trace(s)___else {_logger.debug(s)____</pre>_@param logger the logger to use to log the message_@param messageFactory function that accepts a boolean set to the value_of {@link Log#isTraceEnabled()}.;public static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {_		if (logger.isDebugEnabled()) {_			String logMessage = messageFactory.apply(logger.isTraceEnabled())__			if (logger.isTraceEnabled()) {_				logger.trace(logMessage)__			}_			else {_				logger.debug(logMessage)__			}_		}_	};use,this,to,log,a,message,with,different,levels,of,detail,or,different,messages,at,trace,vs,debug,log,levels,effectively,a,substitute,for,pre,class,code,if,logger,is,debug,enabled,string,s,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,s,else,logger,debug,s,pre,param,logger,the,logger,to,use,to,log,the,message,param,message,factory,function,that,accepts,a,boolean,set,to,the,value,of,link,log,is,trace,enabled;public,static,void,trace,debug,log,logger,function,boolean,string,message,factory,if,logger,is,debug,enabled,string,log,message,message,factory,apply,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,log,message,else,logger,debug,log,message
LogFormatUtils -> public static void traceDebug(Log logger, Function<Boolean, String> messageFactory);1536963437;Use this to log a message with different levels of detail (or different_messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:_<pre class="code">_if (logger.isDebugEnabled()) {_String s = logger.isTraceEnabled() ? "..." : "..."__if (logger.isTraceEnabled()) {_logger.trace(s)___else {_logger.debug(s)____</pre>_@param logger the logger to use to log the message_@param messageFactory function that accepts a boolean set to the value_of {@link Log#isTraceEnabled()};public static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {_		if (logger.isDebugEnabled()) {_			String logMessage = messageFactory.apply(logger.isTraceEnabled())__			if (logger.isTraceEnabled()) {_				logger.trace(logMessage)__			}_			else {_				logger.debug(logMessage)__			}_		}_	};use,this,to,log,a,message,with,different,levels,of,detail,or,different,messages,at,trace,vs,debug,log,levels,effectively,a,substitute,for,pre,class,code,if,logger,is,debug,enabled,string,s,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,s,else,logger,debug,s,pre,param,logger,the,logger,to,use,to,log,the,message,param,message,factory,function,that,accepts,a,boolean,set,to,the,value,of,link,log,is,trace,enabled;public,static,void,trace,debug,log,logger,function,boolean,string,message,factory,if,logger,is,debug,enabled,string,log,message,message,factory,apply,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,log,message,else,logger,debug,log,message
LogFormatUtils -> public static void traceDebug(Log logger, Function<Boolean, String> messageFactory);1537372445;Use this to log a message with different levels of detail (or different_messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:_<pre class="code">_if (logger.isDebugEnabled()) {_String s = logger.isTraceEnabled() ? "..." : "..."__if (logger.isTraceEnabled()) {_logger.trace(s)___else {_logger.debug(s)____</pre>_@param logger the logger to use to log the message_@param messageFactory function that accepts a boolean set to the value_of {@link Log#isTraceEnabled()};public static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {_		if (logger.isDebugEnabled()) {_			String logMessage = messageFactory.apply(logger.isTraceEnabled())__			if (logger.isTraceEnabled()) {_				logger.trace(logMessage)__			}_			else {_				logger.debug(logMessage)__			}_		}_	};use,this,to,log,a,message,with,different,levels,of,detail,or,different,messages,at,trace,vs,debug,log,levels,effectively,a,substitute,for,pre,class,code,if,logger,is,debug,enabled,string,s,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,s,else,logger,debug,s,pre,param,logger,the,logger,to,use,to,log,the,message,param,message,factory,function,that,accepts,a,boolean,set,to,the,value,of,link,log,is,trace,enabled;public,static,void,trace,debug,log,logger,function,boolean,string,message,factory,if,logger,is,debug,enabled,string,log,message,message,factory,apply,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,log,message,else,logger,debug,log,message
LogFormatUtils -> public static void traceDebug(Log logger, Function<Boolean, String> messageFactory);1539878672;Use this to log a message with different levels of detail (or different_messages) at TRACE vs DEBUG log levels. Effectively, a substitute for:_<pre class="code">_if (logger.isDebugEnabled()) {_String str = logger.isTraceEnabled() ? "..." : "..."__if (logger.isTraceEnabled()) {_logger.trace(str)___else {_logger.debug(str)____</pre>_@param logger the logger to use to log the message_@param messageFactory function that accepts a boolean set to the value_of {@link Log#isTraceEnabled()};public static void traceDebug(Log logger, Function<Boolean, String> messageFactory) {_		if (logger.isDebugEnabled()) {_			String logMessage = messageFactory.apply(logger.isTraceEnabled())__			if (logger.isTraceEnabled()) {_				logger.trace(logMessage)__			}_			else {_				logger.debug(logMessage)__			}_		}_	};use,this,to,log,a,message,with,different,levels,of,detail,or,different,messages,at,trace,vs,debug,log,levels,effectively,a,substitute,for,pre,class,code,if,logger,is,debug,enabled,string,str,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,str,else,logger,debug,str,pre,param,logger,the,logger,to,use,to,log,the,message,param,message,factory,function,that,accepts,a,boolean,set,to,the,value,of,link,log,is,trace,enabled;public,static,void,trace,debug,log,logger,function,boolean,string,message,factory,if,logger,is,debug,enabled,string,log,message,message,factory,apply,logger,is,trace,enabled,if,logger,is,trace,enabled,logger,trace,log,message,else,logger,debug,log,message
