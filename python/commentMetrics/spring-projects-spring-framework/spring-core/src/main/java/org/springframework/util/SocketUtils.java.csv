# id;timestamp;commentText;codeText;commentWords;codeWords
SocketUtils -> public static int findAvailableUdpPort();1372363092;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].__@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1385507478;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1405696918;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1410296907;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1410305334;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1413848647;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1439397952;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1439675300;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1439728788;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1461683397;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1467730834;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1512604442;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1512607126;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1512608429;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableUdpPort();1549646187;Find an available UDP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort() {_		return findAvailableUdpPort(PORT_RANGE_MIN)__	};find,an,available,udp,port,randomly,selected,from,the,range,value,value,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,return,find,available,udp,port
SocketUtils -> public static int findAvailableTcpPort();1372363092;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].__@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1385507478;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1405696918;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1410296907;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1410305334;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1413848647;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1439397952;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1439675300;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1439728788;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1461683397;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1467730834;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1512604442;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1512607126;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1512608429;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static int findAvailableTcpPort();1549646187;Find an available TCP port randomly selected from the range_[{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort() {_		return findAvailableTcpPort(PORT_RANGE_MIN)__	};find,an,available,tcp,port,randomly,selected,from,the,range,value,value,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,return,find,available,tcp,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1372363092;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}].__@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1385507478;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1405696918;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1410296907;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1410305334;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1413848647;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1439397952;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1439675300;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1439728788;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1461683397;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1467730834;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1512604442;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1512607126;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1512608429;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort);1549646187;Find the requested number of available UDP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,udp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1372363092;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}].__@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1385507478;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1405696918;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1410296907;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1410305334;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1413848647;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1439397952;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1439675300;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + new SecureRandom().nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,new,secure,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1439728788;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1461683397;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1467730834;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1512604442;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1512607126;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1512608429;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> private int findRandomPort(int minPort, int maxPort);1549646187;Find a pseudo-random port number within the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return a random port number within the specified range;private int findRandomPort(int minPort, int maxPort) {_			int portRange = maxPort - minPort__			return minPort + random.nextInt(portRange + 1)__		};find,a,pseudo,random,port,number,within,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,random,port,number,within,the,specified,range;private,int,find,random,port,int,min,port,int,max,port,int,port,range,max,port,min,port,return,min,port,random,next,int,port,range,1
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1372363092;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1385507478;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1405696918;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1410296907;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1410305334;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1413848647;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1439397952;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1439675300;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1439728788;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1461683397;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1467730834;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1512604442;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1512607126;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1512608429;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> SocketType -> protected abstract boolean isPortAvailable(int port)_;1549646187;Determine if the specified port for this {@code SocketType} is_currently available on {@code localhost}.;protected abstract boolean isPortAvailable(int port)_;determine,if,the,specified,port,for,this,code,socket,type,is,currently,available,on,code,localhost;protected,abstract,boolean,is,port,available,int,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1372363092;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}].__@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1385507478;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1405696918;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1410296907;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1410305334;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1413848647;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1439397952;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1439675300;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1439728788;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1461683397;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1467730834;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1512604442;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1512607126;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1512608429;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> public static int findAvailableTcpPort(int minPort);1549646187;Find an available TCP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort) {_		return findAvailableTcpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,return,find,available,tcp,port,min,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1372363092;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}].__@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			} while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1385507478;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			} while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1405696918;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1410296907;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1410305334;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1413848647;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1439397952;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1439675300;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1439728788;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_						"Could not find an available %s port in the range [%d, %d] after %d attempts", name(), minPort,_						maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1461683397;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equals 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equals,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1467730834;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equals 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equals,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1512604442;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equal to 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (++searchCounter > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equal,to,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1512607126;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equal to 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (searchCounter++ > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equal,to,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1512608429;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equal to 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (searchCounter > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__				searchCounter++__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equal,to,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,search,counter,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> SocketType -> int findAvailablePort(int minPort, int maxPort);1549646187;Find an available port for this {@code SocketType}, randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available port number for this socket type_@throws IllegalStateException if no available port could be found;int findAvailablePort(int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort >= minPort, "'maxPort' must be greater than or equal to 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)___			int portRange = maxPort - minPort__			int candidatePort__			int searchCounter = 0__			do {_				if (searchCounter > portRange) {_					throw new IllegalStateException(String.format(_							"Could not find an available %s port in the range [%d, %d] after %d attempts",_							name(), minPort, maxPort, searchCounter))__				}_				candidatePort = findRandomPort(minPort, maxPort)__				searchCounter++__			}_			while (!isPortAvailable(candidatePort))___			return candidatePort__		};find,an,available,port,for,this,code,socket,type,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,port,number,for,this,socket,type,throws,illegal,state,exception,if,no,available,port,could,be,found;int,find,available,port,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,or,equal,to,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,int,port,range,max,port,min,port,int,candidate,port,int,search,counter,0,do,if,search,counter,port,range,throw,new,illegal,state,exception,string,format,could,not,find,an,available,s,port,in,the,range,d,d,after,d,attempts,name,min,port,max,port,search,counter,candidate,port,find,random,port,min,port,max,port,search,counter,while,is,port,available,candidate,port,return,candidate,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1372363092;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}].__@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1385507478;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1405696918;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1410296907;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1410305334;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1413848647;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1439397952;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1439675300;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1439728788;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1461683397;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1467730834;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1512604442;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1512607126;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1512608429;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort);1549646187;Find the requested number of available TCP ports, each randomly selected_from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,int,min,port,int,max,port,return,socket,type,tcp,find,available,ports,num,requested,min,port,max,port
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1372363092;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}].__@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1385507478;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1405696918;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1410296907;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1410305334;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1413848647;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1439397952;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1439675300;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1439728788;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_				"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			final SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && (availablePorts.size() < numRequested)) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_					"Could not find %d available %s ports in the range [%d, %d]", numRequested, name(), minPort,_					maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,final,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1461683397;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<Integer>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,integer,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1467730834;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1512604442;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1512607126;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1512608429;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> SocketType -> SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort);1549646187;Find the requested number of available ports for this {@code SocketType},_each randomly selected from the range [{@code minPort}, {@code maxPort}]._@param numRequested the number of available ports to find_@param minPort the minimum port number_@param maxPort the maximum port number_@return a sorted set of available port numbers for this socket type_@throws IllegalStateException if the requested number of available ports could not be found;SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {_			Assert.isTrue(minPort > 0, "'minPort' must be greater than 0")__			Assert.isTrue(maxPort > minPort, "'maxPort' must be greater than 'minPort'")__			Assert.isTrue(maxPort <= PORT_RANGE_MAX, "'maxPort' must be less than or equal to " + PORT_RANGE_MAX)__			Assert.isTrue(numRequested > 0, "'numRequested' must be greater than 0")__			Assert.isTrue((maxPort - minPort) >= numRequested,_					"'numRequested' must not be greater than 'maxPort' - 'minPort'")___			SortedSet<Integer> availablePorts = new TreeSet<>()__			int attemptCount = 0__			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {_				availablePorts.add(findAvailablePort(minPort, maxPort))__			}__			if (availablePorts.size() != numRequested) {_				throw new IllegalStateException(String.format(_						"Could not find %d available %s ports in the range [%d, %d]",_						numRequested, name(), minPort, maxPort))__			}__			return availablePorts__		};find,the,requested,number,of,available,ports,for,this,code,socket,type,each,randomly,selected,from,the,range,code,min,port,code,max,port,param,num,requested,the,number,of,available,ports,to,find,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,a,sorted,set,of,available,port,numbers,for,this,socket,type,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;sorted,set,integer,find,available,ports,int,num,requested,int,min,port,int,max,port,assert,is,true,min,port,0,min,port,must,be,greater,than,0,assert,is,true,max,port,min,port,max,port,must,be,greater,than,min,port,assert,is,true,max,port,max,port,must,be,less,than,or,equal,to,assert,is,true,num,requested,0,num,requested,must,be,greater,than,0,assert,is,true,max,port,min,port,num,requested,num,requested,must,not,be,greater,than,max,port,min,port,sorted,set,integer,available,ports,new,tree,set,int,attempt,count,0,while,attempt,count,num,requested,100,available,ports,size,num,requested,available,ports,add,find,available,port,min,port,max,port,if,available,ports,size,num,requested,throw,new,illegal,state,exception,string,format,could,not,find,d,available,s,ports,in,the,range,d,d,num,requested,name,min,port,max,port,return,available,ports
SocketUtils -> public static int findAvailableUdpPort(int minPort);1372363092;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}].__@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1385507478;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1405696918;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1410296907;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1410305334;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1413848647;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1439397952;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1439675300;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1439728788;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1461683397;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1467730834;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1512604442;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1512607126;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1512608429;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static int findAvailableUdpPort(int minPort);1549646187;Find an available UDP port randomly selected from the range_[{@code minPort}, {@value #PORT_RANGE_MAX}]._@param minPort the minimum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort) {_		return findAvailableUdpPort(minPort, PORT_RANGE_MAX)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,value,param,min,port,the,minimum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,return,find,available,udp,port,min,port
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1372363092;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].__@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1385507478;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1405696918;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1410296907;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1410305334;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1413848647;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1439397952;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1439675300;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1439728788;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1461683397;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1467730834;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1512604442;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1512607126;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1512608429;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableUdpPorts(int numRequested);1549646187;Find the requested number of available UDP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available UDP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {_		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,udp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,udp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,udp,ports,int,num,requested,return,find,available,udp,ports,num,requested
SocketUtils -> public SocketUtils();1372363092;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}.__<h4>Rationale</h4>__<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax.__<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>__If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example.__<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt___&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt___&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1385507478;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}.__<h4>Rationale</h4>__<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax.__<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>__If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example.__<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt___&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt___&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1405696918;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1410296907;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1410305334;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1413848647;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1439397952;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1439675300;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1439728788;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1461683397;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1467730834;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1512604442;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1512607126;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1512608429;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_		_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public SocketUtils();1549646187;Although {@code SocketUtils} consists solely of static utility methods,_this constructor is intentionally {@code public}._<h4>Rationale</h4>_<p>Static methods from this class may be invoked from within XML_configuration files using the Spring Expression Language (SpEL) and the_following syntax._<pre><code>&lt_bean id="bean1" ... p:port="#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}" /&gt_</code></pre>_If this constructor were {@code private}, you would be required to supply_the fully qualified class name to SpEL's {@code T()} function for each usage._Thus, the fact that this constructor is {@code public} allows you to reduce_boilerplate configuration with SpEL as can be seen in the following example._<pre><code>&lt_bean id="socketUtils" class="org.springframework.util.SocketUtils" /&gt__&lt_bean id="bean1" ... p:port="#{socketUtils.findAvailableTcpPort(12000)}" /&gt__&lt_bean id="bean2" ... p:port="#{socketUtils.findAvailableTcpPort(30000)}" /&gt_</code></pre>;public SocketUtils() {_	};although,code,socket,utils,consists,solely,of,static,utility,methods,this,constructor,is,intentionally,code,public,h4,rationale,h4,p,static,methods,from,this,class,may,be,invoked,from,within,xml,configuration,files,using,the,spring,expression,language,sp,el,and,the,following,syntax,pre,code,lt,bean,id,bean1,p,port,t,org,springframework,util,socket,utils,find,available,tcp,port,12000,gt,code,pre,if,this,constructor,were,code,private,you,would,be,required,to,supply,the,fully,qualified,class,name,to,sp,el,s,code,t,function,for,each,usage,thus,the,fact,that,this,constructor,is,code,public,allows,you,to,reduce,boilerplate,configuration,with,sp,el,as,can,be,seen,in,the,following,example,pre,code,lt,bean,id,socket,utils,class,org,springframework,util,socket,utils,gt,lt,bean,id,bean1,p,port,socket,utils,find,available,tcp,port,12000,gt,lt,bean,id,bean2,p,port,socket,utils,find,available,tcp,port,30000,gt,code,pre;public,socket,utils
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1372363092;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}].__@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1385507478;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1405696918;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1410296907;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1410305334;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1413848647;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1439397952;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1439675300;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1439728788;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1461683397;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1467730834;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1512604442;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1512607126;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1512608429;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableUdpPort(int minPort, int maxPort);1549646187;Find an available UDP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available UDP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableUdpPort(int minPort, int maxPort) {_		return SocketType.UDP.findAvailablePort(minPort, maxPort)__	};find,an,available,udp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,udp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,udp,port,int,min,port,int,max,port,return,socket,type,udp,find,available,port,min,port,max,port
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1372363092;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}].__@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1385507478;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1405696918;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1410296907;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1410305334;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1413848647;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1439397952;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1439675300;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1439728788;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1461683397;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1467730834;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1512604442;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1512607126;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1512608429;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static SortedSet<Integer> findAvailableTcpPorts(int numRequested);1549646187;Find the requested number of available TCP ports, each randomly selected_from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]._@param numRequested the number of available ports to find_@return a sorted set of available TCP port numbers_@throws IllegalStateException if the requested number of available ports could not be found;public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {_		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX)__	};find,the,requested,number,of,available,tcp,ports,each,randomly,selected,from,the,range,value,value,param,num,requested,the,number,of,available,ports,to,find,return,a,sorted,set,of,available,tcp,port,numbers,throws,illegal,state,exception,if,the,requested,number,of,available,ports,could,not,be,found;public,static,sorted,set,integer,find,available,tcp,ports,int,num,requested,return,find,available,tcp,ports,num,requested
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1372363092;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}].__@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1385507478;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1405696918;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1410296907;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1410305334;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1413848647;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1439397952;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1439675300;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1439728788;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1461683397;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1467730834;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1512604442;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1512607126;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1512608429;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
SocketUtils -> public static int findAvailableTcpPort(int minPort, int maxPort);1549646187;Find an available TCP port randomly selected from the range_[{@code minPort}, {@code maxPort}]._@param minPort the minimum port number_@param maxPort the maximum port number_@return an available TCP port number_@throws IllegalStateException if no available port could be found;public static int findAvailableTcpPort(int minPort, int maxPort) {_		return SocketType.TCP.findAvailablePort(minPort, maxPort)__	};find,an,available,tcp,port,randomly,selected,from,the,range,code,min,port,code,max,port,param,min,port,the,minimum,port,number,param,max,port,the,maximum,port,number,return,an,available,tcp,port,number,throws,illegal,state,exception,if,no,available,port,could,be,found;public,static,int,find,available,tcp,port,int,min,port,int,max,port,return,socket,type,tcp,find,available,port,min,port,max,port
