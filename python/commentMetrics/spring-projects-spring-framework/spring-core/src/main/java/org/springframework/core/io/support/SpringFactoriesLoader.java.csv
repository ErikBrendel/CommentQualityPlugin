# id;timestamp;commentText;codeText;commentWords;codeWords
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1347311781;Loads the factory implementations of the given type from the default location, using_the given class loader._<p>The returned factories are ordered in accordance with the {@link OrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		if (classLoader == null) {_			classLoader = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoader)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoader))__		}_		OrderComparator.sort(result)__		return result__	};loads,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,if,class,loader,null,class,loader,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1367879572;Loads the factory implementations of the given type from the default location, using_the given class loader._<p>The returned factories are ordered in accordance with the {@link OrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		if (classLoader == null) {_			classLoader = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoader)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoader))__		}_		OrderComparator.sort(result)__		return result__	};loads,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,if,class,loader,null,class,loader,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1390507193;Load the factory implementations of the given type from the default location,_using the given class loader._<p>The returned factories are ordered in accordance with the {@link OrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		if (classLoader == null) {_			classLoader = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoader)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoader))__		}_		OrderComparator.sort(result)__		return result__	};load,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,if,class,loader,null,class,loader,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1398290095;Load the factory implementations of the given type from the default location,_using the given class loader._<p>The returned factories are ordered in accordance with the {@link OrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		OrderComparator.sort(result)__		return result__	};load,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1398638841;Load the factory implementations of the given type from the default location,_using the given class loader._<p>The returned factories are ordered in accordance with the {@link OrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		OrderComparator.sort(result)__		return result__	};load,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1408048216;Load the factory implementations of the given type from the default location,_using the given class loader._<p>The returned factories are ordered in accordance with the {@link AnnotationAwareOrderComparator}._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default);public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,the,factory,implementations,of,the,given,type,from,the,default,location,using,the,given,class,loader,p,the,returned,factories,are,ordered,in,accordance,with,the,link,annotation,aware,order,comparator,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1408201650;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,in,accordance,with,the,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1456164095;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<T>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,in,accordance,with,the,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,t,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1467730834;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,in,accordance,with,the,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1468948866;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,in,accordance,with,the,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1493808712;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,in,accordance,with,the,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader);1493811929;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1408201650;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		try {_			Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :_					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION))__			List<String> result = new ArrayList<String>()__			while (urls.hasMoreElements()) {_				URL url = urls.nextElement()__				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url))__				String factoryClassNames = properties.getProperty(factoryClassName)__				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)))__			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +_					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex)__		}_	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,try,enumeration,url,urls,class,loader,null,class,loader,get,resources,class,loader,get,system,resources,list,string,result,new,array,list,string,while,urls,has,more,elements,url,url,urls,next,element,properties,properties,properties,loader,utils,load,properties,new,url,resource,url,string,factory,class,names,properties,get,property,factory,class,name,result,add,all,arrays,as,list,string,utils,comma,delimited,list,to,string,array,factory,class,names,return,result,catch,ioexception,ex,throw,new,illegal,argument,exception,unable,to,load,factory,class,get,name,factories,from,location,ex
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1456164095;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		try {_			Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :_					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION))__			List<String> result = new ArrayList<String>()__			while (urls.hasMoreElements()) {_				URL url = urls.nextElement()__				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url))__				String factoryClassNames = properties.getProperty(factoryClassName)__				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)))__			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +_					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex)__		}_	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,try,enumeration,url,urls,class,loader,null,class,loader,get,resources,class,loader,get,system,resources,list,string,result,new,array,list,string,while,urls,has,more,elements,url,url,urls,next,element,properties,properties,properties,loader,utils,load,properties,new,url,resource,url,string,factory,class,names,properties,get,property,factory,class,name,result,add,all,arrays,as,list,string,utils,comma,delimited,list,to,string,array,factory,class,names,return,result,catch,ioexception,ex,throw,new,illegal,argument,exception,unable,to,load,factory,class,get,name,factories,from,location,ex
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1467730834;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		try {_			Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :_					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION))__			List<String> result = new ArrayList<>()__			while (urls.hasMoreElements()) {_				URL url = urls.nextElement()__				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url))__				String factoryClassNames = properties.getProperty(factoryClassName)__				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)))__			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +_					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex)__		}_	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,try,enumeration,url,urls,class,loader,null,class,loader,get,resources,class,loader,get,system,resources,list,string,result,new,array,list,while,urls,has,more,elements,url,url,urls,next,element,properties,properties,properties,loader,utils,load,properties,new,url,resource,url,string,factory,class,names,properties,get,property,factory,class,name,result,add,all,arrays,as,list,string,utils,comma,delimited,list,to,string,array,factory,class,names,return,result,catch,ioexception,ex,throw,new,illegal,argument,exception,unable,to,load,factory,class,get,name,factories,from,location,ex
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1468948866;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		try {_			Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :_					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION))__			List<String> result = new ArrayList<>()__			while (urls.hasMoreElements()) {_				URL url = urls.nextElement()__				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url))__				String factoryClassNames = properties.getProperty(factoryClassName)__				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)))__			}_			return result__		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +_					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex)__		}_	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,try,enumeration,url,urls,class,loader,null,class,loader,get,resources,class,loader,get,system,resources,list,string,result,new,array,list,while,urls,has,more,elements,url,url,urls,next,element,properties,properties,properties,loader,utils,load,properties,new,url,resource,url,string,factory,class,names,properties,get,property,factory,class,name,result,add,all,arrays,as,list,string,utils,comma,delimited,list,to,string,array,factory,class,names,return,result,catch,ioexception,ex,throw,new,illegal,argument,exception,unable,to,load,factory,class,get,name,factories,from,location,ex
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1493808712;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName,_				Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader);1493811929;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1495868221;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1496837955;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1522103912;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@see #loadFactoryNames_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,see,load,factory,names,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1530174524;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory_@see #loadFactoryNames;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory,see,load,factory,names;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1530532518;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory_@see #loadFactoryNames;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory,see,load,factory,names;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader);1540214038;Load and instantiate the factory implementations of the given type from_{@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader._<p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}._<p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}_to obtain all registered factory names._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@throws IllegalArgumentException if any factory implementation class cannot_be loaded or if an error occurs while instantiating any factory_@see #loadFactoryNames;public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {_		Assert.notNull(factoryClass, "'factoryClass' must not be null")__		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()__		}_		List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)__		if (logger.isTraceEnabled()) {_			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)__		}_		List<T> result = new ArrayList<>(factoryNames.size())__		for (String factoryName : factoryNames) {_			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))__		}_		AnnotationAwareOrderComparator.sort(result)__		return result__	};load,and,instantiate,the,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,p,the,returned,factories,are,sorted,through,link,annotation,aware,order,comparator,p,if,a,custom,instantiation,strategy,is,required,use,link,load,factory,names,to,obtain,all,registered,factory,names,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,any,factory,implementation,class,cannot,be,loaded,or,if,an,error,occurs,while,instantiating,any,factory,see,load,factory,names;public,static,t,list,t,load,factories,class,t,factory,class,nullable,class,loader,class,loader,assert,not,null,factory,class,factory,class,must,not,be,null,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,spring,factories,loader,class,get,class,loader,list,string,factory,names,load,factory,names,factory,class,class,loader,to,use,if,logger,is,trace,enabled,logger,trace,loaded,factory,class,get,name,names,factory,names,list,t,result,new,array,list,factory,names,size,for,string,factory,name,factory,names,result,add,instantiate,factory,factory,name,factory,class,class,loader,to,use,annotation,aware,order,comparator,sort,result,return,result
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1495868221;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1496837955;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1522103912;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@see #loadFactories_@throws IllegalArgumentException if an error occurs while loading factory names;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,see,load,factories,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1530174524;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@throws IllegalArgumentException if an error occurs while loading factory names_@see #loadFactories;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names,see,load,factories;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1530532518;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@throws IllegalArgumentException if an error occurs while loading factory names_@see #loadFactories;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names,see,load,factories;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
SpringFactoriesLoader -> public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader);1540214038;Load the fully qualified class names of factory implementations of the_given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given_class loader._@param factoryClass the interface or abstract class representing the factory_@param classLoader the ClassLoader to use for loading resources_ can be_{@code null} to use the default_@throws IllegalArgumentException if an error occurs while loading factory names_@see #loadFactories;public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {_		String factoryClassName = factoryClass.getName()__		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList())__	};load,the,fully,qualified,class,names,of,factory,implementations,of,the,given,type,from,value,using,the,given,class,loader,param,factory,class,the,interface,or,abstract,class,representing,the,factory,param,class,loader,the,class,loader,to,use,for,loading,resources,can,be,code,null,to,use,the,default,throws,illegal,argument,exception,if,an,error,occurs,while,loading,factory,names,see,load,factories;public,static,list,string,load,factory,names,class,factory,class,nullable,class,loader,class,loader,string,factory,class,name,factory,class,get,name,return,load,spring,factories,class,loader,get,or,default,factory,class,name,collections,empty,list
