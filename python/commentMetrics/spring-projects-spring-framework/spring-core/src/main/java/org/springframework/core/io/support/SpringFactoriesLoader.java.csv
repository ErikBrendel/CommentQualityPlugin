commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;17;/**  * Load and instantiate the factory implementations of the given type from  * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader.  * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.  * <p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}  * to obtain all registered factory names.  * @param factoryClass the interface or abstract class representing the factory  * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)  * @throws IllegalArgumentException if any factory implementation class cannot  * be loaded or if an error occurs while instantiating any factory  * @see #loadFactoryNames  */ ;/**  * Load and instantiate the factory implementations of the given type from  * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader.  * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}.  * <p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}  * to obtain all registered factory names.  * @param factoryClass the interface or abstract class representing the factory  * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)  * @throws IllegalArgumentException if any factory implementation class cannot  * be loaded or if an error occurs while instantiating any factory  * @see #loadFactoryNames  */ public static <T> List<T> loadFactories(Class<T> factoryClass, @Nullable ClassLoader classLoader) {     Assert.notNull(factoryClass, "'factoryClass' must not be null").     ClassLoader classLoaderToUse = classLoader.     if (classLoaderToUse == null) {         classLoaderToUse = SpringFactoriesLoader.class.getClassLoader().     }     List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse).     if (logger.isTraceEnabled()) {         logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames).     }     List<T> result = new ArrayList<>(factoryNames.size()).     for (String factoryName : factoryNames) {         result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse)).     }     AnnotationAwareOrderComparator.sort(result).     return result. }
true;public,static;2;4;/**  * Load the fully qualified class names of factory implementations of the  * given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given  * class loader.  * @param factoryClass the interface or abstract class representing the factory  * @param classLoader the ClassLoader to use for loading resources. can be  * {@code null} to use the default  * @throws IllegalArgumentException if an error occurs while loading factory names  * @see #loadFactories  */ ;/**  * Load the fully qualified class names of factory implementations of the  * given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given  * class loader.  * @param factoryClass the interface or abstract class representing the factory  * @param classLoader the ClassLoader to use for loading resources. can be  * {@code null} to use the default  * @throws IllegalArgumentException if an error occurs while loading factory names  * @see #loadFactories  */ public static List<String> loadFactoryNames(Class<?> factoryClass, @Nullable ClassLoader classLoader) {     String factoryClassName = factoryClass.getName().     return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList()). }
false;private,static;1;30;;private static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {     MultiValueMap<String, String> result = cache.get(classLoader).     if (result != null) {         return result.     }     try {         Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)).         result = new LinkedMultiValueMap<>().         while (urls.hasMoreElements()) {             URL url = urls.nextElement().             UrlResource resource = new UrlResource(url).             Properties properties = PropertiesLoaderUtils.loadProperties(resource).             for (Map.Entry<?, ?> entry : properties.entrySet()) {                 String factoryClassName = ((String) entry.getKey()).trim().                 for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {                     result.add(factoryClassName, factoryName.trim()).                 }             }         }         cache.put(classLoader, result).         return result.     } catch (IOException ex) {         throw new IllegalArgumentException("Unable to load factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex).     } }
false;private,static;3;14;;@SuppressWarnings("unchecked") private static <T> T instantiateFactory(String instanceClassName, Class<T> factoryClass, ClassLoader classLoader) {     try {         Class<?> instanceClass = ClassUtils.forName(instanceClassName, classLoader).         if (!factoryClass.isAssignableFrom(instanceClass)) {             throw new IllegalArgumentException("Class [" + instanceClassName + "] is not assignable to [" + factoryClass.getName() + "]").         }         return (T) ReflectionUtils.accessibleConstructor(instanceClass).newInstance().     } catch (Throwable ex) {         throw new IllegalArgumentException("Unable to instantiate factory class: " + factoryClass.getName(), ex).     } }
